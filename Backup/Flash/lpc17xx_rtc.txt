; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\lpc17xx_rtc.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_rtc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\lpc17xx_rtc.crf Lib\Drivers\source\lpc17xx_rtc.c]
                          THUMB

                          AREA ||i.RTC_AlarmIntConfig||, CODE, READONLY, ALIGN=2

                  RTC_AlarmIntConfig PROC
;;;247     **********************************************************************/
;;;248    void RTC_AlarmIntConfig (LPC_RTC_TypeDef *RTCx, uint32_t AlarmTimeType, \
000000  b570              PUSH     {r4-r6,lr}
;;;249    								FunctionalState NewState)
;;;250    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;251    	CHECK_PARAM(PARAM_RTCx(RTCx));
000008  4844              LDR      r0,|L1.284|
00000a  4284              CMP      r4,r0
00000c  d100              BNE      |L1.16|
00000e  e003              B        |L1.24|
                  |L1.16|
000010  21fb              MOVS     r1,#0xfb
000012  a043              ADR      r0,|L1.288|
000014  f7fffffe          BL       check_failed
                  |L1.24|
;;;252    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
000018  b10e              CBZ      r6,|L1.30|
00001a  2e01              CMP      r6,#1
00001c  d100              BNE      |L1.32|
                  |L1.30|
00001e  e003              B        |L1.40|
                  |L1.32|
000020  21fc              MOVS     r1,#0xfc
000022  a03f              ADR      r0,|L1.288|
000024  f7fffffe          BL       check_failed
                  |L1.40|
;;;253    	CHECK_PARAM(PARAM_RTC_TIMETYPE(AlarmTimeType));
000028  b16d              CBZ      r5,|L1.70|
00002a  2d01              CMP      r5,#1
00002c  d00b              BEQ      |L1.70|
00002e  2d02              CMP      r5,#2
000030  d009              BEQ      |L1.70|
000032  2d03              CMP      r5,#3
000034  d007              BEQ      |L1.70|
000036  2d04              CMP      r5,#4
000038  d005              BEQ      |L1.70|
00003a  2d05              CMP      r5,#5
00003c  d003              BEQ      |L1.70|
00003e  2d06              CMP      r5,#6
000040  d001              BEQ      |L1.70|
000042  2d07              CMP      r5,#7
000044  d100              BNE      |L1.72|
                  |L1.70|
000046  e003              B        |L1.80|
                  |L1.72|
000048  21fd              MOVS     r1,#0xfd
00004a  a035              ADR      r0,|L1.288|
00004c  f7fffffe          BL       check_failed
                  |L1.80|
;;;254    
;;;255    	if (NewState == ENABLE)
000050  2e01              CMP      r6,#1
000052  d130              BNE      |L1.182|
;;;256    	{
;;;257    		switch (AlarmTimeType)
000054  2d08              CMP      r5,#8
000056  d22d              BCS      |L1.180|
000058  e8dff005          TBB      [pc,r5]
00005c  04090e13          DCB      0x04,0x09,0x0e,0x13
000060  181d2227          DCB      0x18,0x1d,0x22,0x27
;;;258    		{
;;;259    		case RTC_TIMETYPE_SECOND:
;;;260    			RTCx->AMR &= (~RTC_AMR_AMRSEC) & RTC_AMR_BITMASK;
000064  7c20              LDRB     r0,[r4,#0x10]
000066  f00000fe          AND      r0,r0,#0xfe
00006a  7420              STRB     r0,[r4,#0x10]
;;;261    			break;
00006c  e022              B        |L1.180|
;;;262    		case RTC_TIMETYPE_MINUTE:
;;;263    			RTCx->AMR &= (~RTC_AMR_AMRMIN) & RTC_AMR_BITMASK;
00006e  7c20              LDRB     r0,[r4,#0x10]
000070  f00000fd          AND      r0,r0,#0xfd
000074  7420              STRB     r0,[r4,#0x10]
;;;264    			break;
000076  e01d              B        |L1.180|
;;;265    		case RTC_TIMETYPE_HOUR:
;;;266    			RTCx->AMR &= (~RTC_AMR_AMRHOUR) & RTC_AMR_BITMASK;
000078  7c20              LDRB     r0,[r4,#0x10]
00007a  f00000fb          AND      r0,r0,#0xfb
00007e  7420              STRB     r0,[r4,#0x10]
;;;267    			break;
000080  e018              B        |L1.180|
;;;268    		case RTC_TIMETYPE_DAYOFWEEK:
;;;269    			RTCx->AMR &= (~RTC_AMR_AMRDOW) & RTC_AMR_BITMASK;
000082  7c20              LDRB     r0,[r4,#0x10]
000084  f00000ef          AND      r0,r0,#0xef
000088  7420              STRB     r0,[r4,#0x10]
;;;270    			break;
00008a  e013              B        |L1.180|
;;;271    		case RTC_TIMETYPE_DAYOFMONTH:
;;;272    			RTCx->AMR &= (~RTC_AMR_AMRDOM) & RTC_AMR_BITMASK;
00008c  7c20              LDRB     r0,[r4,#0x10]
00008e  f00000f7          AND      r0,r0,#0xf7
000092  7420              STRB     r0,[r4,#0x10]
;;;273    			break;
000094  e00e              B        |L1.180|
;;;274    		case RTC_TIMETYPE_DAYOFYEAR:
;;;275    			RTCx->AMR &= (~RTC_AMR_AMRDOY) & RTC_AMR_BITMASK;
000096  7c20              LDRB     r0,[r4,#0x10]
000098  f00000df          AND      r0,r0,#0xdf
00009c  7420              STRB     r0,[r4,#0x10]
;;;276    			break;
00009e  e009              B        |L1.180|
;;;277    		case RTC_TIMETYPE_MONTH:
;;;278    			RTCx->AMR &= (~RTC_AMR_AMRMON) & RTC_AMR_BITMASK;
0000a0  7c20              LDRB     r0,[r4,#0x10]
0000a2  f00000bf          AND      r0,r0,#0xbf
0000a6  7420              STRB     r0,[r4,#0x10]
;;;279    			break;
0000a8  e004              B        |L1.180|
;;;280    		case RTC_TIMETYPE_YEAR:
;;;281    			RTCx->AMR &= (~RTC_AMR_AMRYEAR) & RTC_AMR_BITMASK;
0000aa  7c20              LDRB     r0,[r4,#0x10]
0000ac  f000007f          AND      r0,r0,#0x7f
0000b0  7420              STRB     r0,[r4,#0x10]
;;;282    			break;
0000b2  bf00              NOP      
                  |L1.180|
0000b4  e030              B        |L1.280|
                  |L1.182|
;;;283    		}
;;;284    	}
;;;285    	else
;;;286    	{
;;;287    		switch (AlarmTimeType)
0000b6  2d08              CMP      r5,#8
0000b8  d22d              BCS      |L1.278|
0000ba  e8dff005          TBB      [pc,r5]
0000be  0409              DCB      0x04,0x09
0000c0  0e13181d          DCB      0x0e,0x13,0x18,0x1d
0000c4  2227              DCB      0x22,0x27
;;;288    		{
;;;289    		case RTC_TIMETYPE_SECOND:
;;;290    			RTCx->AMR |= (RTC_AMR_AMRSEC);
0000c6  7c20              LDRB     r0,[r4,#0x10]
0000c8  f0400001          ORR      r0,r0,#1
0000cc  7420              STRB     r0,[r4,#0x10]
;;;291    			break;
0000ce  e022              B        |L1.278|
;;;292    		case RTC_TIMETYPE_MINUTE:
;;;293    			RTCx->AMR |= (RTC_AMR_AMRMIN);
0000d0  7c20              LDRB     r0,[r4,#0x10]
0000d2  f0400002          ORR      r0,r0,#2
0000d6  7420              STRB     r0,[r4,#0x10]
;;;294    			break;
0000d8  e01d              B        |L1.278|
;;;295    		case RTC_TIMETYPE_HOUR:
;;;296    			RTCx->AMR |= (RTC_AMR_AMRHOUR);
0000da  7c20              LDRB     r0,[r4,#0x10]
0000dc  f0400004          ORR      r0,r0,#4
0000e0  7420              STRB     r0,[r4,#0x10]
;;;297    			break;
0000e2  e018              B        |L1.278|
;;;298    		case RTC_TIMETYPE_DAYOFWEEK:
;;;299    			RTCx->AMR |= (RTC_AMR_AMRDOW);
0000e4  7c20              LDRB     r0,[r4,#0x10]
0000e6  f0400010          ORR      r0,r0,#0x10
0000ea  7420              STRB     r0,[r4,#0x10]
;;;300    			break;
0000ec  e013              B        |L1.278|
;;;301    		case RTC_TIMETYPE_DAYOFMONTH:
;;;302    			RTCx->AMR |= (RTC_AMR_AMRDOM);
0000ee  7c20              LDRB     r0,[r4,#0x10]
0000f0  f0400008          ORR      r0,r0,#8
0000f4  7420              STRB     r0,[r4,#0x10]
;;;303    			break;
0000f6  e00e              B        |L1.278|
;;;304    		case RTC_TIMETYPE_DAYOFYEAR:
;;;305    			RTCx->AMR |= (RTC_AMR_AMRDOY);
0000f8  7c20              LDRB     r0,[r4,#0x10]
0000fa  f0400020          ORR      r0,r0,#0x20
0000fe  7420              STRB     r0,[r4,#0x10]
;;;306    			break;
000100  e009              B        |L1.278|
;;;307    		case RTC_TIMETYPE_MONTH:
;;;308    			RTCx->AMR |= (RTC_AMR_AMRMON);
000102  7c20              LDRB     r0,[r4,#0x10]
000104  f0400040          ORR      r0,r0,#0x40
000108  7420              STRB     r0,[r4,#0x10]
;;;309    			break;
00010a  e004              B        |L1.278|
;;;310    		case RTC_TIMETYPE_YEAR:
;;;311    			RTCx->AMR |= (RTC_AMR_AMRYEAR);
00010c  7c20              LDRB     r0,[r4,#0x10]
00010e  f0400080          ORR      r0,r0,#0x80
000112  7420              STRB     r0,[r4,#0x10]
;;;312    			break;
000114  bf00              NOP      
                  |L1.278|
000116  bf00              NOP                            ;291
                  |L1.280|
;;;313    		}
;;;314    	}
;;;315    }
000118  bd70              POP      {r4-r6,pc}
;;;316    
                          ENDP

00011a  0000              DCW      0x0000
                  |L1.284|
                          DCD      0x40024000
                  |L1.288|
000120  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000124  44726976
000128  6572735c
00012c  736f7572
000130  63655c6c
000134  70633137
000138  78785f72
00013c  74632e63
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0

                          AREA ||i.RTC_CalibConfig||, CODE, READONLY, ALIGN=2

                  RTC_CalibConfig PROC
;;;712     **********************************************************************/
;;;713    void RTC_CalibConfig(LPC_RTC_TypeDef *RTCx, uint32_t CalibValue, uint8_t CalibDir)
000000  b570              PUSH     {r4-r6,lr}
;;;714    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;715    	CHECK_PARAM(PARAM_RTCx(RTCx));
000008  4812              LDR      r0,|L2.84|
00000a  4285              CMP      r5,r0
00000c  d100              BNE      |L2.16|
00000e  e004              B        |L2.26|
                  |L2.16|
000010  f24021cb          MOV      r1,#0x2cb
000014  a010              ADR      r0,|L2.88|
000016  f7fffffe          BL       check_failed
                  |L2.26|
;;;716    	CHECK_PARAM(PARAM_RTC_CALIB_DIR(CalibDir));
00001a  b10c              CBZ      r4,|L2.32|
00001c  2c01              CMP      r4,#1
00001e  d100              BNE      |L2.34|
                  |L2.32|
000020  e004              B        |L2.44|
                  |L2.34|
000022  f44f7133          MOV      r1,#0x2cc
000026  a00c              ADR      r0,|L2.88|
000028  f7fffffe          BL       check_failed
                  |L2.44|
;;;717    	CHECK_PARAM(CalibValue < RTC_CALIBRATION_MAX);
00002c  f5b63f00          CMP      r6,#0x20000
000030  d200              BCS      |L2.52|
000032  e004              B        |L2.62|
                  |L2.52|
000034  f24021cd          MOV      r1,#0x2cd
000038  a007              ADR      r0,|L2.88|
00003a  f7fffffe          BL       check_failed
                  |L2.62|
;;;718    
;;;719    	RTCx->CALIBRATION = ((CalibValue) & RTC_CALIBRATION_CALVAL_MASK) \
00003e  f3c60010          UBFX     r0,r6,#0,#17
000042  2c01              CMP      r4,#1
000044  d101              BNE      |L2.74|
;;;720    			| ((CalibDir == RTC_CALIB_DIR_BACKWARD) ? RTC_CALIBRATION_LIBDIR : 0);
000046  0461              LSLS     r1,r4,#17
000048  e000              B        |L2.76|
                  |L2.74|
00004a  2100              MOVS     r1,#0
                  |L2.76|
00004c  4308              ORRS     r0,r0,r1
00004e  6428              STR      r0,[r5,#0x40]
;;;721    }
000050  bd70              POP      {r4-r6,pc}
;;;722    
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      0x40024000
                  |L2.88|
000058  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
00005c  44726976
000060  6572735c
000064  736f7572
000068  63655c6c
00006c  70633137
000070  78785f72
000074  74632e63
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0

                          AREA ||i.RTC_CalibCounterCmd||, CODE, READONLY, ALIGN=2

                  RTC_CalibCounterCmd PROC
;;;686     **********************************************************************/
;;;687    void RTC_CalibCounterCmd(LPC_RTC_TypeDef *RTCx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;688    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;689    	CHECK_PARAM(PARAM_RTCx(RTCx));
000006  480f              LDR      r0,|L3.68|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L3.14|
00000c  e004              B        |L3.24|
                  |L3.14|
00000e  f24021b1          MOV      r1,#0x2b1
000012  a00d              ADR      r0,|L3.72|
000014  f7fffffe          BL       check_failed
                  |L3.24|
;;;690    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
000018  b10d              CBZ      r5,|L3.30|
00001a  2d01              CMP      r5,#1
00001c  d100              BNE      |L3.32|
                  |L3.30|
00001e  e004              B        |L3.42|
                  |L3.32|
000020  f24021b2          MOV      r1,#0x2b2
000024  a008              ADR      r0,|L3.72|
000026  f7fffffe          BL       check_failed
                  |L3.42|
;;;691    
;;;692    	if (NewState == ENABLE)
00002a  2d01              CMP      r5,#1
00002c  d104              BNE      |L3.56|
;;;693    	{
;;;694    		RTCx->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
00002e  7a20              LDRB     r0,[r4,#8]
000030  f0000003          AND      r0,r0,#3
000034  7220              STRB     r0,[r4,#8]
000036  e003              B        |L3.64|
                  |L3.56|
;;;695    	}
;;;696    	else
;;;697    	{
;;;698    		RTCx->CCR |= RTC_CCR_CCALEN;
000038  7a20              LDRB     r0,[r4,#8]
00003a  f0400010          ORR      r0,r0,#0x10
00003e  7220              STRB     r0,[r4,#8]
                  |L3.64|
;;;699    	}
;;;700    }
000040  bd70              POP      {r4-r6,pc}
;;;701    
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      0x40024000
                  |L3.72|
000048  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
00004c  44726976
000050  6572735c
000054  736f7572
000058  63655c6c
00005c  70633137
000060  78785f72
000064  74632e63
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.RTC_ClearIntPending||, CODE, READONLY, ALIGN=2

                  RTC_ClearIntPending PROC
;;;670     **********************************************************************/
;;;671    void RTC_ClearIntPending (LPC_RTC_TypeDef *RTCx, uint32_t IntType)
000000  b570              PUSH     {r4-r6,lr}
;;;672    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;673    	CHECK_PARAM(PARAM_RTCx(RTCx));
000006  480b              LDR      r0,|L4.52|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L4.14|
00000c  e004              B        |L4.24|
                  |L4.14|
00000e  f24021a1          MOV      r1,#0x2a1
000012  a009              ADR      r0,|L4.56|
000014  f7fffffe          BL       check_failed
                  |L4.24|
;;;674    	CHECK_PARAM(PARAM_RTC_INT(IntType));
000018  2d01              CMP      r5,#1
00001a  d001              BEQ      |L4.32|
00001c  2d02              CMP      r5,#2
00001e  d100              BNE      |L4.34|
                  |L4.32|
000020  e004              B        |L4.44|
                  |L4.34|
000022  f24021a2          MOV      r1,#0x2a2
000026  a004              ADR      r0,|L4.56|
000028  f7fffffe          BL       check_failed
                  |L4.44|
;;;675    
;;;676    	RTCx->ILR |= IntType;
00002c  7820              LDRB     r0,[r4,#0]
00002e  4328              ORRS     r0,r0,r5
000030  7020              STRB     r0,[r4,#0]
;;;677    }
000032  bd70              POP      {r4-r6,pc}
;;;678    
                          ENDP

                  |L4.52|
                          DCD      0x40024000
                  |L4.56|
000038  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
00003c  44726976
000040  6572735c
000044  736f7572
000048  63655c6c
00004c  70633137
000050  78785f72
000054  74632e63
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.RTC_Cmd||, CODE, READONLY, ALIGN=2

                  RTC_Cmd PROC
;;;117     **********************************************************************/
;;;118    void RTC_Cmd (LPC_RTC_TypeDef *RTCx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;119    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;120    	CHECK_PARAM(PARAM_RTCx(RTCx));
000006  480e              LDR      r0,|L5.64|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L5.14|
00000c  e003              B        |L5.22|
                  |L5.14|
00000e  2178              MOVS     r1,#0x78
000010  a00c              ADR      r0,|L5.68|
000012  f7fffffe          BL       check_failed
                  |L5.22|
;;;121    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
000016  b10d              CBZ      r5,|L5.28|
000018  2d01              CMP      r5,#1
00001a  d100              BNE      |L5.30|
                  |L5.28|
00001c  e003              B        |L5.38|
                  |L5.30|
00001e  2179              MOVS     r1,#0x79
000020  a008              ADR      r0,|L5.68|
000022  f7fffffe          BL       check_failed
                  |L5.38|
;;;122    
;;;123    	if (NewState == ENABLE)
000026  2d01              CMP      r5,#1
000028  d104              BNE      |L5.52|
;;;124    	{
;;;125    		RTCx->CCR |= RTC_CCR_CLKEN;
00002a  7a20              LDRB     r0,[r4,#8]
00002c  f0400001          ORR      r0,r0,#1
000030  7220              STRB     r0,[r4,#8]
000032  e003              B        |L5.60|
                  |L5.52|
;;;126    	}
;;;127    	else
;;;128    	{
;;;129    		RTCx->CCR &= (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
000034  7a20              LDRB     r0,[r4,#8]
000036  f0000012          AND      r0,r0,#0x12
00003a  7220              STRB     r0,[r4,#8]
                  |L5.60|
;;;130    	}
;;;131    }
00003c  bd70              POP      {r4-r6,pc}
;;;132    
                          ENDP

00003e  0000              DCW      0x0000
                  |L5.64|
                          DCD      0x40024000
                  |L5.68|
000044  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000048  44726976
00004c  6572735c
000050  736f7572
000054  63655c6c
000058  70633137
00005c  78785f72
000060  74632e63
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.RTC_CntIncrIntConfig||, CODE, READONLY, ALIGN=2

                  RTC_CntIncrIntConfig PROC
;;;155     **********************************************************************/
;;;156    void RTC_CntIncrIntConfig (LPC_RTC_TypeDef *RTCx, uint32_t CntIncrIntType, \
000000  b570              PUSH     {r4-r6,lr}
;;;157    								FunctionalState NewState)
;;;158    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;159    	CHECK_PARAM(PARAM_RTCx(RTCx));
000008  4844              LDR      r0,|L6.284|
00000a  4284              CMP      r4,r0
00000c  d100              BNE      |L6.16|
00000e  e003              B        |L6.24|
                  |L6.16|
000010  219f              MOVS     r1,#0x9f
000012  a043              ADR      r0,|L6.288|
000014  f7fffffe          BL       check_failed
                  |L6.24|
;;;160    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
000018  b10e              CBZ      r6,|L6.30|
00001a  2e01              CMP      r6,#1
00001c  d100              BNE      |L6.32|
                  |L6.30|
00001e  e003              B        |L6.40|
                  |L6.32|
000020  21a0              MOVS     r1,#0xa0
000022  a03f              ADR      r0,|L6.288|
000024  f7fffffe          BL       check_failed
                  |L6.40|
;;;161    	CHECK_PARAM(PARAM_RTC_TIMETYPE(CntIncrIntType));
000028  b16d              CBZ      r5,|L6.70|
00002a  2d01              CMP      r5,#1
00002c  d00b              BEQ      |L6.70|
00002e  2d02              CMP      r5,#2
000030  d009              BEQ      |L6.70|
000032  2d03              CMP      r5,#3
000034  d007              BEQ      |L6.70|
000036  2d04              CMP      r5,#4
000038  d005              BEQ      |L6.70|
00003a  2d05              CMP      r5,#5
00003c  d003              BEQ      |L6.70|
00003e  2d06              CMP      r5,#6
000040  d001              BEQ      |L6.70|
000042  2d07              CMP      r5,#7
000044  d100              BNE      |L6.72|
                  |L6.70|
000046  e003              B        |L6.80|
                  |L6.72|
000048  21a1              MOVS     r1,#0xa1
00004a  a035              ADR      r0,|L6.288|
00004c  f7fffffe          BL       check_failed
                  |L6.80|
;;;162    
;;;163    	if (NewState ==  ENABLE)
000050  2e01              CMP      r6,#1
000052  d130              BNE      |L6.182|
;;;164    	{
;;;165    		switch (CntIncrIntType)
000054  2d08              CMP      r5,#8
000056  d22d              BCS      |L6.180|
000058  e8dff005          TBB      [pc,r5]
00005c  04090e13          DCB      0x04,0x09,0x0e,0x13
000060  181d2227          DCB      0x18,0x1d,0x22,0x27
;;;166    		{
;;;167    		case RTC_TIMETYPE_SECOND:
;;;168    			RTCx->CIIR |= RTC_CIIR_IMSEC;
000064  7b20              LDRB     r0,[r4,#0xc]
000066  f0400001          ORR      r0,r0,#1
00006a  7320              STRB     r0,[r4,#0xc]
;;;169    			break;
00006c  e022              B        |L6.180|
;;;170    		case RTC_TIMETYPE_MINUTE:
;;;171    			RTCx->CIIR |= RTC_CIIR_IMMIN;
00006e  7b20              LDRB     r0,[r4,#0xc]
000070  f0400002          ORR      r0,r0,#2
000074  7320              STRB     r0,[r4,#0xc]
;;;172    			break;
000076  e01d              B        |L6.180|
;;;173    		case RTC_TIMETYPE_HOUR:
;;;174    			RTCx->CIIR |= RTC_CIIR_IMHOUR;
000078  7b20              LDRB     r0,[r4,#0xc]
00007a  f0400004          ORR      r0,r0,#4
00007e  7320              STRB     r0,[r4,#0xc]
;;;175    			break;
000080  e018              B        |L6.180|
;;;176    		case RTC_TIMETYPE_DAYOFWEEK:
;;;177    			RTCx->CIIR |= RTC_CIIR_IMDOW;
000082  7b20              LDRB     r0,[r4,#0xc]
000084  f0400010          ORR      r0,r0,#0x10
000088  7320              STRB     r0,[r4,#0xc]
;;;178    			break;
00008a  e013              B        |L6.180|
;;;179    		case RTC_TIMETYPE_DAYOFMONTH:
;;;180    			RTCx->CIIR |= RTC_CIIR_IMDOM;
00008c  7b20              LDRB     r0,[r4,#0xc]
00008e  f0400008          ORR      r0,r0,#8
000092  7320              STRB     r0,[r4,#0xc]
;;;181    			break;
000094  e00e              B        |L6.180|
;;;182    		case RTC_TIMETYPE_DAYOFYEAR:
;;;183    			RTCx->CIIR |= RTC_CIIR_IMDOY;
000096  7b20              LDRB     r0,[r4,#0xc]
000098  f0400020          ORR      r0,r0,#0x20
00009c  7320              STRB     r0,[r4,#0xc]
;;;184    			break;
00009e  e009              B        |L6.180|
;;;185    		case RTC_TIMETYPE_MONTH:
;;;186    			RTCx->CIIR |= RTC_CIIR_IMMON;
0000a0  7b20              LDRB     r0,[r4,#0xc]
0000a2  f0400040          ORR      r0,r0,#0x40
0000a6  7320              STRB     r0,[r4,#0xc]
;;;187    			break;
0000a8  e004              B        |L6.180|
;;;188    		case RTC_TIMETYPE_YEAR:
;;;189    			RTCx->CIIR |= RTC_CIIR_IMYEAR;
0000aa  7b20              LDRB     r0,[r4,#0xc]
0000ac  f0400080          ORR      r0,r0,#0x80
0000b0  7320              STRB     r0,[r4,#0xc]
;;;190    			break;
0000b2  bf00              NOP      
                  |L6.180|
0000b4  e030              B        |L6.280|
                  |L6.182|
;;;191    		}
;;;192    	}
;;;193    	else
;;;194    	{
;;;195    		switch (CntIncrIntType)
0000b6  2d08              CMP      r5,#8
0000b8  d22d              BCS      |L6.278|
0000ba  e8dff005          TBB      [pc,r5]
0000be  0409              DCB      0x04,0x09
0000c0  0e13181d          DCB      0x0e,0x13,0x18,0x1d
0000c4  2227              DCB      0x22,0x27
;;;196    		{
;;;197    		case RTC_TIMETYPE_SECOND:
;;;198    			RTCx->CIIR &= (~RTC_CIIR_IMSEC) & RTC_CIIR_BITMASK;
0000c6  7b20              LDRB     r0,[r4,#0xc]
0000c8  f00000fe          AND      r0,r0,#0xfe
0000cc  7320              STRB     r0,[r4,#0xc]
;;;199    			break;
0000ce  e022              B        |L6.278|
;;;200    		case RTC_TIMETYPE_MINUTE:
;;;201    			RTCx->CIIR &= (~RTC_CIIR_IMMIN) & RTC_CIIR_BITMASK;
0000d0  7b20              LDRB     r0,[r4,#0xc]
0000d2  f00000fd          AND      r0,r0,#0xfd
0000d6  7320              STRB     r0,[r4,#0xc]
;;;202    			break;
0000d8  e01d              B        |L6.278|
;;;203    		case RTC_TIMETYPE_HOUR:
;;;204    			RTCx->CIIR &= (~RTC_CIIR_IMHOUR) & RTC_CIIR_BITMASK;
0000da  7b20              LDRB     r0,[r4,#0xc]
0000dc  f00000fb          AND      r0,r0,#0xfb
0000e0  7320              STRB     r0,[r4,#0xc]
;;;205    			break;
0000e2  e018              B        |L6.278|
;;;206    		case RTC_TIMETYPE_DAYOFWEEK:
;;;207    			RTCx->CIIR &= (~RTC_CIIR_IMDOW) & RTC_CIIR_BITMASK;
0000e4  7b20              LDRB     r0,[r4,#0xc]
0000e6  f00000ef          AND      r0,r0,#0xef
0000ea  7320              STRB     r0,[r4,#0xc]
;;;208    			break;
0000ec  e013              B        |L6.278|
;;;209    		case RTC_TIMETYPE_DAYOFMONTH:
;;;210    			RTCx->CIIR &= (~RTC_CIIR_IMDOM) & RTC_CIIR_BITMASK;
0000ee  7b20              LDRB     r0,[r4,#0xc]
0000f0  f00000f7          AND      r0,r0,#0xf7
0000f4  7320              STRB     r0,[r4,#0xc]
;;;211    			break;
0000f6  e00e              B        |L6.278|
;;;212    		case RTC_TIMETYPE_DAYOFYEAR:
;;;213    			RTCx->CIIR &= (~RTC_CIIR_IMDOY) & RTC_CIIR_BITMASK;
0000f8  7b20              LDRB     r0,[r4,#0xc]
0000fa  f00000df          AND      r0,r0,#0xdf
0000fe  7320              STRB     r0,[r4,#0xc]
;;;214    			break;
000100  e009              B        |L6.278|
;;;215    		case RTC_TIMETYPE_MONTH:
;;;216    			RTCx->CIIR &= (~RTC_CIIR_IMMON) & RTC_CIIR_BITMASK;
000102  7b20              LDRB     r0,[r4,#0xc]
000104  f00000bf          AND      r0,r0,#0xbf
000108  7320              STRB     r0,[r4,#0xc]
;;;217    			break;
00010a  e004              B        |L6.278|
;;;218    		case RTC_TIMETYPE_YEAR:
;;;219    			RTCx->CIIR &= (~RTC_CIIR_IMYEAR) & RTC_CIIR_BITMASK;
00010c  7b20              LDRB     r0,[r4,#0xc]
00010e  f000007f          AND      r0,r0,#0x7f
000112  7320              STRB     r0,[r4,#0xc]
;;;220    			break;
000114  bf00              NOP      
                  |L6.278|
000116  bf00              NOP                            ;199
                  |L6.280|
;;;221    		}
;;;222    	}
;;;223    }
000118  bd70              POP      {r4-r6,pc}
;;;224    
                          ENDP

00011a  0000              DCW      0x0000
                  |L6.284|
                          DCD      0x40024000
                  |L6.288|
000120  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000124  44726976
000128  6572735c
00012c  736f7572
000130  63655c6c
000134  70633137
000138  78785f72
00013c  74632e63
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0

                          AREA ||i.RTC_DeInit||, CODE, READONLY, ALIGN=2

                  RTC_DeInit PROC
;;;87      **********************************************************************/
;;;88     void RTC_DeInit(LPC_RTC_TypeDef *RTCx)
000000  b510              PUSH     {r4,lr}
;;;89     {
000002  4604              MOV      r4,r0
;;;90     	CHECK_PARAM(PARAM_RTCx(RTCx));
000004  4807              LDR      r0,|L7.36|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L7.12|
00000a  e003              B        |L7.20|
                  |L7.12|
00000c  215a              MOVS     r1,#0x5a
00000e  a006              ADR      r0,|L7.40|
000010  f7fffffe          BL       check_failed
                  |L7.20|
;;;91     
;;;92     	RTCx->CCR = 0x00;
000014  2000              MOVS     r0,#0
000016  7220              STRB     r0,[r4,#8]
;;;93     	// Disable power and clock for RTC module
;;;94     	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCRTC, DISABLE);
000018  2100              MOVS     r1,#0
00001a  f44f7000          MOV      r0,#0x200
00001e  f7fffffe          BL       CLKPWR_ConfigPPWR
;;;95     }
000022  bd10              POP      {r4,pc}
;;;96     
                          ENDP

                  |L7.36|
                          DCD      0x40024000
                  |L7.40|
000028  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
00002c  44726976
000030  6572735c
000034  736f7572
000038  63655c6c
00003c  70633137
000040  78785f72
000044  74632e63
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.RTC_GetAlarmTime||, CODE, READONLY, ALIGN=1

                  RTC_GetAlarmTime PROC
;;;569     **********************************************************************/
;;;570    uint32_t RTC_GetAlarmTime (LPC_RTC_TypeDef *RTCx, uint32_t Timetype)
000000  4602              MOV      r2,r0
;;;571    {
;;;572    	switch (Timetype)
000002  2908              CMP      r1,#8
000004  d22d              BCS      |L8.98|
000006  e8dff001          TBB      [pc,r1]
00000a  0409              DCB      0x04,0x09
00000c  0e13181d          DCB      0x0e,0x13,0x18,0x1d
000010  2227              DCB      0x22,0x27
;;;573    	{
;;;574    	case RTC_TIMETYPE_SECOND:
;;;575    		return (RTCx->ALSEC & RTC_SEC_MASK);
000012  f8920060          LDRB     r0,[r2,#0x60]
000016  f000003f          AND      r0,r0,#0x3f
                  |L8.26|
;;;576    	case RTC_TIMETYPE_MINUTE:
;;;577    		return (RTCx->ALMIN & RTC_MIN_MASK);
;;;578    	case RTC_TIMETYPE_HOUR:
;;;579    		return (RTCx->ALHOUR & RTC_HOUR_MASK);
;;;580    	case RTC_TIMETYPE_DAYOFWEEK:
;;;581    		return (RTCx->ALDOW & RTC_DOW_MASK);
;;;582    	case RTC_TIMETYPE_DAYOFMONTH:
;;;583    		return (RTCx->ALDOM & RTC_DOM_MASK);
;;;584    	case RTC_TIMETYPE_DAYOFYEAR:
;;;585    		return (RTCx->ALDOY & RTC_DOY_MASK);
;;;586    	case RTC_TIMETYPE_MONTH:
;;;587    		return (RTCx->ALMON & RTC_MONTH_MASK);
;;;588    	case RTC_TIMETYPE_YEAR:
;;;589    		return (RTCx->ALYEAR & RTC_YEAR_MASK);
;;;590    	default:
;;;591    		return (0);
;;;592    	}
;;;593    }
00001a  4770              BX       lr
00001c  f8920064          LDRB     r0,[r2,#0x64]         ;577
000020  f000003f          AND      r0,r0,#0x3f           ;577
000024  e7f9              B        |L8.26|
000026  f8920068          LDRB     r0,[r2,#0x68]         ;579
00002a  f000001f          AND      r0,r0,#0x1f           ;579
00002e  e7f4              B        |L8.26|
000030  f8920070          LDRB     r0,[r2,#0x70]         ;581
000034  f0000007          AND      r0,r0,#7              ;581
000038  e7ef              B        |L8.26|
00003a  f892006c          LDRB     r0,[r2,#0x6c]         ;583
00003e  f000001f          AND      r0,r0,#0x1f           ;583
000042  e7ea              B        |L8.26|
000044  f8b20074          LDRH     r0,[r2,#0x74]         ;585
000048  f3c00008          UBFX     r0,r0,#0,#9           ;585
00004c  e7e5              B        |L8.26|
00004e  f8920078          LDRB     r0,[r2,#0x78]         ;587
000052  f000000f          AND      r0,r0,#0xf            ;587
000056  e7e0              B        |L8.26|
000058  f8b2007c          LDRH     r0,[r2,#0x7c]         ;589
00005c  f3c0000b          UBFX     r0,r0,#0,#12          ;589
000060  e7db              B        |L8.26|
                  |L8.98|
000062  2000              MOVS     r0,#0                 ;591
000064  e7d9              B        |L8.26|
;;;594    
                          ENDP


                          AREA ||i.RTC_GetFullAlarmTime||, CODE, READONLY, ALIGN=2

                  RTC_GetFullAlarmTime PROC
;;;624     **********************************************************************/
;;;625    void RTC_GetFullAlarmTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
000000  b570              PUSH     {r4-r6,lr}
;;;626    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;627    	CHECK_PARAM(PARAM_RTCx(RTCx));
000006  4816              LDR      r0,|L9.96|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L9.14|
00000c  e004              B        |L9.24|
                  |L9.14|
00000e  f2402173          MOV      r1,#0x273
000012  a014              ADR      r0,|L9.100|
000014  f7fffffe          BL       check_failed
                  |L9.24|
;;;628    
;;;629    	pFullTime->DOM = RTCx->ALDOM & RTC_DOM_MASK;
000018  3460              ADDS     r4,r4,#0x60
00001a  7b20              LDRB     r0,[r4,#0xc]
00001c  f000001f          AND      r0,r0,#0x1f
000020  60e8              STR      r0,[r5,#0xc]
;;;630    	pFullTime->DOW = RTCx->ALDOW & RTC_DOW_MASK;
000022  7c20              LDRB     r0,[r4,#0x10]
000024  f0000007          AND      r0,r0,#7
000028  6128              STR      r0,[r5,#0x10]
;;;631    	pFullTime->DOY = RTCx->ALDOY & RTC_DOY_MASK;
00002a  8aa0              LDRH     r0,[r4,#0x14]
00002c  f3c00008          UBFX     r0,r0,#0,#9
000030  6168              STR      r0,[r5,#0x14]
;;;632    	pFullTime->HOUR = RTCx->ALHOUR & RTC_HOUR_MASK;
000032  7a20              LDRB     r0,[r4,#8]
000034  f000001f          AND      r0,r0,#0x1f
000038  60a8              STR      r0,[r5,#8]
;;;633    	pFullTime->MIN = RTCx->ALMIN & RTC_MIN_MASK;
00003a  7920              LDRB     r0,[r4,#4]
00003c  f000003f          AND      r0,r0,#0x3f
000040  6068              STR      r0,[r5,#4]
;;;634    	pFullTime->SEC = RTCx->ALSEC & RTC_SEC_MASK;
000042  7820              LDRB     r0,[r4,#0]
000044  f000003f          AND      r0,r0,#0x3f
000048  6028              STR      r0,[r5,#0]
;;;635    	pFullTime->MONTH = RTCx->ALMON & RTC_MONTH_MASK;
00004a  7e20              LDRB     r0,[r4,#0x18]
00004c  f000000f          AND      r0,r0,#0xf
000050  61a8              STR      r0,[r5,#0x18]
;;;636    	pFullTime->YEAR = RTCx->ALYEAR & RTC_YEAR_MASK;
000052  8ba0              LDRH     r0,[r4,#0x1c]
000054  3c60              SUBS     r4,r4,#0x60
000056  f3c0000b          UBFX     r0,r0,#0,#12
00005a  61e8              STR      r0,[r5,#0x1c]
;;;637    }
00005c  bd70              POP      {r4-r6,pc}
;;;638    
                          ENDP

00005e  0000              DCW      0x0000
                  |L9.96|
                          DCD      0x40024000
                  |L9.100|
000064  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000068  44726976
00006c  6572735c
000070  736f7572
000074  63655c6c
000078  70633137
00007c  78785f72
000080  74632e63
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.RTC_GetFullTime||, CODE, READONLY, ALIGN=2

                  RTC_GetFullTime PROC
;;;464     **********************************************************************/
;;;465    void RTC_GetFullTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
000000  b570              PUSH     {r4-r6,lr}
;;;466    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;467    	CHECK_PARAM(PARAM_RTCx(RTCx));
000006  4816              LDR      r0,|L10.96|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L10.14|
00000c  e004              B        |L10.24|
                  |L10.14|
00000e  f24011d3          MOV      r1,#0x1d3
000012  a014              ADR      r0,|L10.100|
000014  f7fffffe          BL       check_failed
                  |L10.24|
;;;468    
;;;469    	pFullTime->DOM = RTCx->DOM & RTC_DOM_MASK;
000018  3420              ADDS     r4,r4,#0x20
00001a  7b20              LDRB     r0,[r4,#0xc]
00001c  f000001f          AND      r0,r0,#0x1f
000020  60e8              STR      r0,[r5,#0xc]
;;;470    	pFullTime->DOW = RTCx->DOW & RTC_DOW_MASK;
000022  7c20              LDRB     r0,[r4,#0x10]
000024  f0000007          AND      r0,r0,#7
000028  6128              STR      r0,[r5,#0x10]
;;;471    	pFullTime->DOY = RTCx->DOY & RTC_DOY_MASK;
00002a  8aa0              LDRH     r0,[r4,#0x14]
00002c  f3c00008          UBFX     r0,r0,#0,#9
000030  6168              STR      r0,[r5,#0x14]
;;;472    	pFullTime->HOUR = RTCx->HOUR & RTC_HOUR_MASK;
000032  7a20              LDRB     r0,[r4,#8]
000034  f000001f          AND      r0,r0,#0x1f
000038  60a8              STR      r0,[r5,#8]
;;;473    	pFullTime->MIN = RTCx->MIN & RTC_MIN_MASK;
00003a  7920              LDRB     r0,[r4,#4]
00003c  f000003f          AND      r0,r0,#0x3f
000040  6068              STR      r0,[r5,#4]
;;;474    	pFullTime->SEC = RTCx->SEC & RTC_SEC_MASK;
000042  7820              LDRB     r0,[r4,#0]
000044  f000003f          AND      r0,r0,#0x3f
000048  6028              STR      r0,[r5,#0]
;;;475    	pFullTime->MONTH = RTCx->MONTH & RTC_MONTH_MASK;
00004a  7e20              LDRB     r0,[r4,#0x18]
00004c  f000000f          AND      r0,r0,#0xf
000050  61a8              STR      r0,[r5,#0x18]
;;;476    	pFullTime->YEAR = RTCx->YEAR & RTC_YEAR_MASK;
000052  8ba0              LDRH     r0,[r4,#0x1c]
000054  3c20              SUBS     r4,r4,#0x20
000056  f3c0000b          UBFX     r0,r0,#0,#12
00005a  61e8              STR      r0,[r5,#0x1c]
;;;477    }
00005c  bd70              POP      {r4-r6,pc}
;;;478    
                          ENDP

00005e  0000              DCW      0x0000
                  |L10.96|
                          DCD      0x40024000
                  |L10.100|
000064  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000068  44726976
00006c  6572735c
000070  736f7572
000074  63655c6c
000078  70633137
00007c  78785f72
000080  74632e63
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.RTC_GetIntPending||, CODE, READONLY, ALIGN=2

                  RTC_GetIntPending PROC
;;;651     **********************************************************************/
;;;652    IntStatus RTC_GetIntPending (LPC_RTC_TypeDef *RTCx, uint32_t IntType)
000000  b570              PUSH     {r4-r6,lr}
;;;653    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;654    	CHECK_PARAM(PARAM_RTCx(RTCx));
000006  480d              LDR      r0,|L11.60|
000008  4285              CMP      r5,r0
00000a  d100              BNE      |L11.14|
00000c  e004              B        |L11.24|
                  |L11.14|
00000e  f240218e          MOV      r1,#0x28e
000012  a00b              ADR      r0,|L11.64|
000014  f7fffffe          BL       check_failed
                  |L11.24|
;;;655    	CHECK_PARAM(PARAM_RTC_INT(IntType));
000018  2c01              CMP      r4,#1
00001a  d001              BEQ      |L11.32|
00001c  2c02              CMP      r4,#2
00001e  d100              BNE      |L11.34|
                  |L11.32|
000020  e004              B        |L11.44|
                  |L11.34|
000022  f240218f          MOV      r1,#0x28f
000026  a006              ADR      r0,|L11.64|
000028  f7fffffe          BL       check_failed
                  |L11.44|
;;;656    
;;;657    	return ((RTCx->ILR & IntType) ? SET : RESET);
00002c  7828              LDRB     r0,[r5,#0]
00002e  4020              ANDS     r0,r0,r4
000030  b108              CBZ      r0,|L11.54|
000032  2001              MOVS     r0,#1
                  |L11.52|
;;;658    }
000034  bd70              POP      {r4-r6,pc}
                  |L11.54|
000036  2000              MOVS     r0,#0                 ;657
000038  e7fc              B        |L11.52|
;;;659    
                          ENDP

00003a  0000              DCW      0x0000
                  |L11.60|
                          DCD      0x40024000
                  |L11.64|
000040  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000044  44726976
000048  6572735c
00004c  736f7572
000050  63655c6c
000054  70633137
000058  78785f72
00005c  74632e63
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.RTC_GetTime||, CODE, READONLY, ALIGN=2

                  RTC_GetTime PROC
;;;406     **********************************************************************/
;;;407    uint32_t RTC_GetTime(LPC_RTC_TypeDef *RTCx, uint32_t Timetype)
000000  b570              PUSH     {r4-r6,lr}
;;;408    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;409    	CHECK_PARAM(PARAM_RTCx(RTCx));
000006  4827              LDR      r0,|L12.164|
000008  4285              CMP      r5,r0
00000a  d100              BNE      |L12.14|
00000c  e004              B        |L12.24|
                  |L12.14|
00000e  f2401199          MOV      r1,#0x199
000012  a025              ADR      r0,|L12.168|
000014  f7fffffe          BL       check_failed
                  |L12.24|
;;;410    	CHECK_PARAM(PARAM_RTC_TIMETYPE(Timetype));
000018  b16c              CBZ      r4,|L12.54|
00001a  2c01              CMP      r4,#1
00001c  d00b              BEQ      |L12.54|
00001e  2c02              CMP      r4,#2
000020  d009              BEQ      |L12.54|
000022  2c03              CMP      r4,#3
000024  d007              BEQ      |L12.54|
000026  2c04              CMP      r4,#4
000028  d005              BEQ      |L12.54|
00002a  2c05              CMP      r4,#5
00002c  d003              BEQ      |L12.54|
00002e  2c06              CMP      r4,#6
000030  d001              BEQ      |L12.54|
000032  2c07              CMP      r4,#7
000034  d100              BNE      |L12.56|
                  |L12.54|
000036  e004              B        |L12.66|
                  |L12.56|
000038  f44f71cd          MOV      r1,#0x19a
00003c  a01a              ADR      r0,|L12.168|
00003e  f7fffffe          BL       check_failed
                  |L12.66|
;;;411    
;;;412    	switch (Timetype)
000042  2c08              CMP      r4,#8
000044  d22b              BCS      |L12.158|
000046  e8dff004          TBB      [pc,r4]
00004a  0409              DCB      0x04,0x09
00004c  0e13181d          DCB      0x0e,0x13,0x18,0x1d
000050  2126              DCB      0x21,0x26
;;;413    	{
;;;414    	case RTC_TIMETYPE_SECOND:
;;;415    		return (RTCx->SEC & RTC_SEC_MASK);
000052  f8950020          LDRB     r0,[r5,#0x20]
000056  f000003f          AND      r0,r0,#0x3f
                  |L12.90|
;;;416    	case RTC_TIMETYPE_MINUTE:
;;;417    		return (RTCx->MIN & RTC_MIN_MASK);
;;;418    	case RTC_TIMETYPE_HOUR:
;;;419    		return (RTCx->HOUR & RTC_HOUR_MASK);
;;;420    	case RTC_TIMETYPE_DAYOFWEEK:
;;;421    		return (RTCx->DOW & RTC_DOW_MASK);
;;;422    	case RTC_TIMETYPE_DAYOFMONTH:
;;;423    		return (RTCx->DOM & RTC_DOM_MASK);
;;;424    	case RTC_TIMETYPE_DAYOFYEAR:
;;;425    		return (RTCx->DOY & RTC_DOY_MASK);
;;;426    	case RTC_TIMETYPE_MONTH:
;;;427    		return (RTCx->MONTH & RTC_MONTH_MASK);
;;;428    	case RTC_TIMETYPE_YEAR:
;;;429    		return (RTCx->YEAR & RTC_YEAR_MASK);
;;;430    	default:
;;;431    		return (0);
;;;432    	}
;;;433    }
00005a  bd70              POP      {r4-r6,pc}
00005c  f8950024          LDRB     r0,[r5,#0x24]         ;417
000060  f000003f          AND      r0,r0,#0x3f           ;417
000064  e7f9              B        |L12.90|
000066  f8950028          LDRB     r0,[r5,#0x28]         ;419
00006a  f000001f          AND      r0,r0,#0x1f           ;419
00006e  e7f4              B        |L12.90|
000070  f8950030          LDRB     r0,[r5,#0x30]         ;421
000074  f0000007          AND      r0,r0,#7              ;421
000078  e7ef              B        |L12.90|
00007a  f895002c          LDRB     r0,[r5,#0x2c]         ;423
00007e  f000001f          AND      r0,r0,#0x1f           ;423
000082  e7ea              B        |L12.90|
000084  8ea8              LDRH     r0,[r5,#0x34]         ;425
000086  f3c00008          UBFX     r0,r0,#0,#9           ;425
00008a  e7e6              B        |L12.90|
00008c  f8950038          LDRB     r0,[r5,#0x38]         ;427
000090  f000000f          AND      r0,r0,#0xf            ;427
000094  e7e1              B        |L12.90|
000096  8fa8              LDRH     r0,[r5,#0x3c]         ;429
000098  f3c0000b          UBFX     r0,r0,#0,#12          ;429
00009c  e7dd              B        |L12.90|
                  |L12.158|
00009e  2000              MOVS     r0,#0                 ;431
0000a0  e7db              B        |L12.90|
;;;434    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L12.164|
                          DCD      0x40024000
                  |L12.168|
0000a8  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
0000ac  44726976
0000b0  6572735c
0000b4  736f7572
0000b8  63655c6c
0000bc  70633137
0000c0  78785f72
0000c4  74632e63
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0

                          AREA ||i.RTC_Init||, CODE, READONLY, ALIGN=2

                  RTC_Init PROC
;;;65      *********************************************************************/
;;;66     void RTC_Init (LPC_RTC_TypeDef *RTCx)
000000  b510              PUSH     {r4,lr}
;;;67     {
000002  4604              MOV      r4,r0
;;;68     	CHECK_PARAM(PARAM_RTCx(RTCx));
000004  480a              LDR      r0,|L13.48|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L13.12|
00000a  e003              B        |L13.20|
                  |L13.12|
00000c  2144              MOVS     r1,#0x44
00000e  a009              ADR      r0,|L13.52|
000010  f7fffffe          BL       check_failed
                  |L13.20|
;;;69     
;;;70     	/* Set up clock and power for RTC module */
;;;71     	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCRTC, ENABLE);
000014  2101              MOVS     r1,#1
000016  0248              LSLS     r0,r1,#9
000018  f7fffffe          BL       CLKPWR_ConfigPPWR
;;;72     
;;;73     	// Clear all register to be default
;;;74     	RTCx->ILR = 0x00;
00001c  2000              MOVS     r0,#0
00001e  7020              STRB     r0,[r4,#0]
;;;75     	RTCx->CCR = 0x00;
000020  7220              STRB     r0,[r4,#8]
;;;76     	RTCx->CIIR = 0x00;
000022  7320              STRB     r0,[r4,#0xc]
;;;77     	RTCx->AMR = 0xFF;
000024  20ff              MOVS     r0,#0xff
000026  7420              STRB     r0,[r4,#0x10]
;;;78     	RTCx->CALIBRATION = 0x00;
000028  2000              MOVS     r0,#0
00002a  6420              STR      r0,[r4,#0x40]
;;;79     }
00002c  bd10              POP      {r4,pc}
;;;80     
                          ENDP

00002e  0000              DCW      0x0000
                  |L13.48|
                          DCD      0x40024000
                  |L13.52|
000034  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000038  44726976
00003c  6572735c
000040  736f7572
000044  63655c6c
000048  70633137
00004c  78785f72
000050  74632e63
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.RTC_ReadGPREG||, CODE, READONLY, ALIGN=2

                  RTC_ReadGPREG PROC
;;;757     **********************************************************************/
;;;758    uint32_t RTC_ReadGPREG (LPC_RTC_TypeDef *RTCx, uint8_t Channel)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;759    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;760    	uint32_t *preg;
;;;761    	uint32_t value;
;;;762    
;;;763    	CHECK_PARAM(PARAM_RTCx(RTCx));
000008  480c              LDR      r0,|L14.60|
00000a  4284              CMP      r4,r0
00000c  d100              BNE      |L14.16|
00000e  e004              B        |L14.26|
                  |L14.16|
000010  f24021fb          MOV      r1,#0x2fb
000014  a00a              ADR      r0,|L14.64|
000016  f7fffffe          BL       check_failed
                  |L14.26|
;;;764    	CHECK_PARAM(PARAM_RTC_GPREG_CH(Channel));
00001a  2d04              CMP      r5,#4
00001c  dc00              BGT      |L14.32|
00001e  e004              B        |L14.42|
                  |L14.32|
000020  f44f713f          MOV      r1,#0x2fc
000024  a006              ADR      r0,|L14.64|
000026  f7fffffe          BL       check_failed
                  |L14.42|
;;;765    
;;;766    	preg = (uint32_t *)&RTCx->GPREG0;
00002a  f1040644          ADD      r6,r4,#0x44
;;;767    	preg += Channel;
00002e  eb060685          ADD      r6,r6,r5,LSL #2
;;;768    	value = *preg;
000032  6837              LDR      r7,[r6,#0]
;;;769    	return (value);
000034  4638              MOV      r0,r7
;;;770    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;771    
                          ENDP

00003a  0000              DCW      0x0000
                  |L14.60|
                          DCD      0x40024000
                  |L14.64|
000040  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000044  44726976
000048  6572735c
00004c  736f7572
000050  63655c6c
000054  70633137
000058  78785f72
00005c  74632e63
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.RTC_ResetClockTickCounter||, CODE, READONLY, ALIGN=2

                  RTC_ResetClockTickCounter PROC
;;;101     **********************************************************************/
;;;102    void RTC_ResetClockTickCounter(LPC_RTC_TypeDef *RTCx)
000000  b510              PUSH     {r4,lr}
;;;103    {
000002  4604              MOV      r4,r0
;;;104    	CHECK_PARAM(PARAM_RTCx(RTCx));
000004  4808              LDR      r0,|L15.40|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L15.12|
00000a  e003              B        |L15.20|
                  |L15.12|
00000c  2168              MOVS     r1,#0x68
00000e  a007              ADR      r0,|L15.44|
000010  f7fffffe          BL       check_failed
                  |L15.20|
;;;105    
;;;106    	RTCx->CCR |= RTC_CCR_CTCRST;
000014  7a20              LDRB     r0,[r4,#8]
000016  f0400002          ORR      r0,r0,#2
00001a  7220              STRB     r0,[r4,#8]
;;;107    	RTCx->CCR &= (~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
00001c  7a20              LDRB     r0,[r4,#8]
00001e  f0000011          AND      r0,r0,#0x11
000022  7220              STRB     r0,[r4,#8]
;;;108    }
000024  bd10              POP      {r4,pc}
;;;109    
                          ENDP

000026  0000              DCW      0x0000
                  |L15.40|
                          DCD      0x40024000
                  |L15.44|
00002c  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000030  44726976
000034  6572735c
000038  736f7572
00003c  63655c6c
000040  70633137
000044  78785f72
000048  74632e63
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.RTC_SetAlarmTime||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmTime PROC
;;;494     **********************************************************************/
;;;495    void RTC_SetAlarmTime (LPC_RTC_TypeDef *RTCx, uint32_t Timetype, uint32_t ALValue)
000000  b570              PUSH     {r4-r6,lr}
;;;496    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;497    	CHECK_PARAM(PARAM_RTCx(RTCx));
000008  483f              LDR      r0,|L16.264|
00000a  4285              CMP      r5,r0
00000c  d100              BNE      |L16.16|
00000e  e004              B        |L16.26|
                  |L16.16|
000010  f24011f1          MOV      r1,#0x1f1
000014  a03d              ADR      r0,|L16.268|
000016  f7fffffe          BL       check_failed
                  |L16.26|
;;;498    
;;;499    	switch (Timetype)
00001a  2e08              CMP      r6,#8
00001c  d272              BCS      |L16.260|
00001e  e8dff006          TBB      [pc,r6]
000022  0411              DCB      0x04,0x11
000024  1e2b3846          DCB      0x1e,0x2b,0x38,0x46
000028  5563              DCB      0x55,0x63
;;;500    	{
;;;501    	case RTC_TIMETYPE_SECOND:
;;;502    		CHECK_PARAM(ALValue <= RTC_SECOND_MAX);
00002a  2c3b              CMP      r4,#0x3b
00002c  d800              BHI      |L16.48|
00002e  e004              B        |L16.58|
                  |L16.48|
000030  f44f71fb          MOV      r1,#0x1f6
000034  a035              ADR      r0,|L16.268|
000036  f7fffffe          BL       check_failed
                  |L16.58|
;;;503    
;;;504    		RTCx->ALSEC = ALValue & RTC_SEC_MASK;
00003a  f004003f          AND      r0,r4,#0x3f
00003e  f8850060          STRB     r0,[r5,#0x60]
;;;505    		break;
000042  e05f              B        |L16.260|
;;;506    
;;;507    	case RTC_TIMETYPE_MINUTE:
;;;508    		CHECK_PARAM(ALValue <= RTC_MINUTE_MAX);
000044  2c3b              CMP      r4,#0x3b
000046  d800              BHI      |L16.74|
000048  e004              B        |L16.84|
                  |L16.74|
00004a  f44f71fe          MOV      r1,#0x1fc
00004e  a02f              ADR      r0,|L16.268|
000050  f7fffffe          BL       check_failed
                  |L16.84|
;;;509    
;;;510    		RTCx->ALMIN = ALValue & RTC_MIN_MASK;
000054  f004003f          AND      r0,r4,#0x3f
000058  f8850064          STRB     r0,[r5,#0x64]
;;;511    		break;
00005c  e052              B        |L16.260|
;;;512    
;;;513    	case RTC_TIMETYPE_HOUR:
;;;514    		CHECK_PARAM(ALValue <= RTC_HOUR_MAX);
00005e  2c17              CMP      r4,#0x17
000060  d800              BHI      |L16.100|
000062  e004              B        |L16.110|
                  |L16.100|
000064  f2402102          MOV      r1,#0x202
000068  a028              ADR      r0,|L16.268|
00006a  f7fffffe          BL       check_failed
                  |L16.110|
;;;515    
;;;516    		RTCx->ALHOUR = ALValue & RTC_HOUR_MASK;
00006e  f004001f          AND      r0,r4,#0x1f
000072  f8850068          STRB     r0,[r5,#0x68]
;;;517    		break;
000076  e045              B        |L16.260|
;;;518    
;;;519    	case RTC_TIMETYPE_DAYOFWEEK:
;;;520    		CHECK_PARAM(ALValue <= RTC_DAYOFWEEK_MAX);
000078  2c06              CMP      r4,#6
00007a  d800              BHI      |L16.126|
00007c  e004              B        |L16.136|
                  |L16.126|
00007e  f44f7102          MOV      r1,#0x208
000082  a022              ADR      r0,|L16.268|
000084  f7fffffe          BL       check_failed
                  |L16.136|
;;;521    
;;;522    		RTCx->ALDOW = ALValue & RTC_DOW_MASK;
000088  f0040007          AND      r0,r4,#7
00008c  f8850070          STRB     r0,[r5,#0x70]
;;;523    		break;
000090  e038              B        |L16.260|
;;;524    
;;;525    	case RTC_TIMETYPE_DAYOFMONTH:
;;;526    		CHECK_PARAM((ALValue <= RTC_DAYOFMONTH_MAX) \
000092  2c1f              CMP      r4,#0x1f
000094  d801              BHI      |L16.154|
000096  b104              CBZ      r4,|L16.154|
000098  e004              B        |L16.164|
                  |L16.154|
00009a  f240210e          MOV      r1,#0x20e
00009e  a01b              ADR      r0,|L16.268|
0000a0  f7fffffe          BL       check_failed
                  |L16.164|
;;;527    				&& (ALValue >= RTC_DAYOFMONTH_MIN));
;;;528    
;;;529    		RTCx->ALDOM = ALValue & RTC_DOM_MASK;
0000a4  f004001f          AND      r0,r4,#0x1f
0000a8  f885006c          STRB     r0,[r5,#0x6c]
;;;530    		break;
0000ac  e02a              B        |L16.260|
;;;531    
;;;532    	case RTC_TIMETYPE_DAYOFYEAR:
;;;533    		CHECK_PARAM((ALValue >= RTC_DAYOFYEAR_MIN) \
0000ae  b11c              CBZ      r4,|L16.184|
0000b0  f5b47fb7          CMP      r4,#0x16e
0000b4  d800              BHI      |L16.184|
0000b6  e004              B        |L16.194|
                  |L16.184|
0000b8  f2402115          MOV      r1,#0x215
0000bc  a013              ADR      r0,|L16.268|
0000be  f7fffffe          BL       check_failed
                  |L16.194|
;;;534    				&& (ALValue <= RTC_DAYOFYEAR_MAX));
;;;535    
;;;536    		RTCx->ALDOY = ALValue & RTC_DOY_MASK;
0000c2  f3c40008          UBFX     r0,r4,#0,#9
0000c6  f8a50074          STRH     r0,[r5,#0x74]
;;;537    		break;
0000ca  e01b              B        |L16.260|
;;;538    
;;;539    	case RTC_TIMETYPE_MONTH:
;;;540    		CHECK_PARAM((ALValue >= RTC_MONTH_MIN) \
0000cc  b114              CBZ      r4,|L16.212|
0000ce  2c0c              CMP      r4,#0xc
0000d0  d800              BHI      |L16.212|
0000d2  e004              B        |L16.222|
                  |L16.212|
0000d4  f44f7107          MOV      r1,#0x21c
0000d8  a00c              ADR      r0,|L16.268|
0000da  f7fffffe          BL       check_failed
                  |L16.222|
;;;541    				&& (ALValue <= RTC_MONTH_MAX));
;;;542    
;;;543    		RTCx->ALMON = ALValue & RTC_MONTH_MASK;
0000de  f004000f          AND      r0,r4,#0xf
0000e2  f8850078          STRB     r0,[r5,#0x78]
;;;544    		break;
0000e6  e00d              B        |L16.260|
;;;545    
;;;546    	case RTC_TIMETYPE_YEAR:
;;;547    		CHECK_PARAM(ALValue <= RTC_YEAR_MAX);
0000e8  f5b45f80          CMP      r4,#0x1000
0000ec  d200              BCS      |L16.240|
0000ee  e004              B        |L16.250|
                  |L16.240|
0000f0  f2402123          MOV      r1,#0x223
0000f4  a005              ADR      r0,|L16.268|
0000f6  f7fffffe          BL       check_failed
                  |L16.250|
;;;548    
;;;549    		RTCx->ALYEAR = ALValue & RTC_YEAR_MASK;
0000fa  f3c4000b          UBFX     r0,r4,#0,#12
0000fe  f8a5007c          STRH     r0,[r5,#0x7c]
;;;550    		break;
000102  bf00              NOP      
                  |L16.260|
000104  bf00              NOP                            ;505
;;;551    	}
;;;552    }
000106  bd70              POP      {r4-r6,pc}
;;;553    
                          ENDP

                  |L16.264|
                          DCD      0x40024000
                  |L16.268|
00010c  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000110  44726976
000114  6572735c
000118  736f7572
00011c  63655c6c
000120  70633137
000124  78785f72
000128  74632e63
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0

                          AREA ||i.RTC_SetFullAlarmTime||, CODE, READONLY, ALIGN=2

                  RTC_SetFullAlarmTime PROC
;;;602     **********************************************************************/
;;;603    void RTC_SetFullAlarmTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
000000  b570              PUSH     {r4-r6,lr}
;;;604    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;605    	CHECK_PARAM(PARAM_RTCx(RTCx));
000006  4816              LDR      r0,|L17.96|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L17.14|
00000c  e004              B        |L17.24|
                  |L17.14|
00000e  f240215d          MOV      r1,#0x25d
000012  a014              ADR      r0,|L17.100|
000014  f7fffffe          BL       check_failed
                  |L17.24|
;;;606    
;;;607    	RTCx->ALDOM = pFullTime->DOM & RTC_DOM_MASK;
000018  7b28              LDRB     r0,[r5,#0xc]
00001a  f000001f          AND      r0,r0,#0x1f
00001e  3460              ADDS     r4,r4,#0x60
000020  7320              STRB     r0,[r4,#0xc]
;;;608    	RTCx->ALDOW = pFullTime->DOW & RTC_DOW_MASK;
000022  7c28              LDRB     r0,[r5,#0x10]
000024  f0000007          AND      r0,r0,#7
000028  7420              STRB     r0,[r4,#0x10]
;;;609    	RTCx->ALDOY = pFullTime->DOY & RTC_DOY_MASK;
00002a  8aa8              LDRH     r0,[r5,#0x14]
00002c  f3c00008          UBFX     r0,r0,#0,#9
000030  82a0              STRH     r0,[r4,#0x14]
;;;610    	RTCx->ALHOUR = pFullTime->HOUR & RTC_HOUR_MASK;
000032  7a28              LDRB     r0,[r5,#8]
000034  f000001f          AND      r0,r0,#0x1f
000038  7220              STRB     r0,[r4,#8]
;;;611    	RTCx->ALMIN = pFullTime->MIN & RTC_MIN_MASK;
00003a  7928              LDRB     r0,[r5,#4]
00003c  f000003f          AND      r0,r0,#0x3f
000040  7120              STRB     r0,[r4,#4]
;;;612    	RTCx->ALSEC = pFullTime->SEC & RTC_SEC_MASK;
000042  7828              LDRB     r0,[r5,#0]
000044  f000003f          AND      r0,r0,#0x3f
000048  7020              STRB     r0,[r4,#0]
;;;613    	RTCx->ALMON = pFullTime->MONTH & RTC_MONTH_MASK;
00004a  7e28              LDRB     r0,[r5,#0x18]
00004c  f000000f          AND      r0,r0,#0xf
000050  7620              STRB     r0,[r4,#0x18]
;;;614    	RTCx->ALYEAR = pFullTime->YEAR & RTC_YEAR_MASK;
000052  8ba8              LDRH     r0,[r5,#0x1c]
000054  f3c0000b          UBFX     r0,r0,#0,#12
000058  83a0              STRH     r0,[r4,#0x1c]
00005a  3c60              SUBS     r4,r4,#0x60
;;;615    }
00005c  bd70              POP      {r4-r6,pc}
;;;616    
                          ENDP

00005e  0000              DCW      0x0000
                  |L17.96|
                          DCD      0x40024000
                  |L17.100|
000064  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000068  44726976
00006c  6572735c
000070  736f7572
000074  63655c6c
000078  70633137
00007c  78785f72
000080  74632e63
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.RTC_SetFullTime||, CODE, READONLY, ALIGN=2

                  RTC_SetFullTime PROC
;;;442     **********************************************************************/
;;;443    void RTC_SetFullTime (LPC_RTC_TypeDef *RTCx, RTC_TIME_Type *pFullTime)
000000  b570              PUSH     {r4-r6,lr}
;;;444    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;445    	CHECK_PARAM(PARAM_RTCx(RTCx));
000006  4816              LDR      r0,|L18.96|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L18.14|
00000c  e004              B        |L18.24|
                  |L18.14|
00000e  f24011bd          MOV      r1,#0x1bd
000012  a014              ADR      r0,|L18.100|
000014  f7fffffe          BL       check_failed
                  |L18.24|
;;;446    
;;;447    	RTCx->DOM = pFullTime->DOM & RTC_DOM_MASK;
000018  7b28              LDRB     r0,[r5,#0xc]
00001a  f000001f          AND      r0,r0,#0x1f
00001e  3420              ADDS     r4,r4,#0x20
000020  7320              STRB     r0,[r4,#0xc]
;;;448    	RTCx->DOW = pFullTime->DOW & RTC_DOW_MASK;
000022  7c28              LDRB     r0,[r5,#0x10]
000024  f0000007          AND      r0,r0,#7
000028  7420              STRB     r0,[r4,#0x10]
;;;449    	RTCx->DOY = pFullTime->DOY & RTC_DOY_MASK;
00002a  8aa8              LDRH     r0,[r5,#0x14]
00002c  f3c00008          UBFX     r0,r0,#0,#9
000030  82a0              STRH     r0,[r4,#0x14]
;;;450    	RTCx->HOUR = pFullTime->HOUR & RTC_HOUR_MASK;
000032  7a28              LDRB     r0,[r5,#8]
000034  f000001f          AND      r0,r0,#0x1f
000038  7220              STRB     r0,[r4,#8]
;;;451    	RTCx->MIN = pFullTime->MIN & RTC_MIN_MASK;
00003a  7928              LDRB     r0,[r5,#4]
00003c  f000003f          AND      r0,r0,#0x3f
000040  7120              STRB     r0,[r4,#4]
;;;452    	RTCx->SEC = pFullTime->SEC & RTC_SEC_MASK;
000042  7828              LDRB     r0,[r5,#0]
000044  f000003f          AND      r0,r0,#0x3f
000048  7020              STRB     r0,[r4,#0]
;;;453    	RTCx->MONTH = pFullTime->MONTH & RTC_MONTH_MASK;
00004a  7e28              LDRB     r0,[r5,#0x18]
00004c  f000000f          AND      r0,r0,#0xf
000050  7620              STRB     r0,[r4,#0x18]
;;;454    	RTCx->YEAR = pFullTime->YEAR & RTC_YEAR_MASK;
000052  8ba8              LDRH     r0,[r5,#0x1c]
000054  f3c0000b          UBFX     r0,r0,#0,#12
000058  83a0              STRH     r0,[r4,#0x1c]
00005a  3c20              SUBS     r4,r4,#0x20
;;;455    }
00005c  bd70              POP      {r4-r6,pc}
;;;456    
                          ENDP

00005e  0000              DCW      0x0000
                  |L18.96|
                          DCD      0x40024000
                  |L18.100|
000064  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000068  44726976
00006c  6572735c
000070  736f7572
000074  63655c6c
000078  70633137
00007c  78785f72
000080  74632e63
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.RTC_SetTime||, CODE, READONLY, ALIGN=2

                  RTC_SetTime PROC
;;;332     **********************************************************************/
;;;333    void RTC_SetTime (LPC_RTC_TypeDef *RTCx, uint32_t Timetype, uint32_t TimeValue)
000000  b570              PUSH     {r4-r6,lr}
;;;334    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;335    	CHECK_PARAM(PARAM_RTCx(RTCx));
000008  4849              LDR      r0,|L19.304|
00000a  4286              CMP      r6,r0
00000c  d100              BNE      |L19.16|
00000e  e004              B        |L19.26|
                  |L19.16|
000010  f240114f          MOV      r1,#0x14f
000014  a047              ADR      r0,|L19.308|
000016  f7fffffe          BL       check_failed
                  |L19.26|
;;;336    	CHECK_PARAM(PARAM_RTC_TIMETYPE(Timetype));
00001a  b16d              CBZ      r5,|L19.56|
00001c  2d01              CMP      r5,#1
00001e  d00b              BEQ      |L19.56|
000020  2d02              CMP      r5,#2
000022  d009              BEQ      |L19.56|
000024  2d03              CMP      r5,#3
000026  d007              BEQ      |L19.56|
000028  2d04              CMP      r5,#4
00002a  d005              BEQ      |L19.56|
00002c  2d05              CMP      r5,#5
00002e  d003              BEQ      |L19.56|
000030  2d06              CMP      r5,#6
000032  d001              BEQ      |L19.56|
000034  2d07              CMP      r5,#7
000036  d100              BNE      |L19.58|
                  |L19.56|
000038  e004              B        |L19.68|
                  |L19.58|
00003a  f44f71a8          MOV      r1,#0x150
00003e  a03d              ADR      r0,|L19.308|
000040  f7fffffe          BL       check_failed
                  |L19.68|
;;;337    
;;;338    	switch ( Timetype)
000044  2d08              CMP      r5,#8
000046  d270              BCS      |L19.298|
000048  e8dff005          TBB      [pc,r5]
00004c  04111e2b          DCB      0x04,0x11,0x1e,0x2b
000050  38465462          DCB      0x38,0x46,0x54,0x62
;;;339    	{
;;;340    	case RTC_TIMETYPE_SECOND:
;;;341    		CHECK_PARAM(TimeValue <= RTC_SECOND_MAX);
000054  2c3b              CMP      r4,#0x3b
000056  d800              BHI      |L19.90|
000058  e004              B        |L19.100|
                  |L19.90|
00005a  f2401155          MOV      r1,#0x155
00005e  a035              ADR      r0,|L19.308|
000060  f7fffffe          BL       check_failed
                  |L19.100|
;;;342    
;;;343    		RTCx->SEC = TimeValue & RTC_SEC_MASK;
000064  f004003f          AND      r0,r4,#0x3f
000068  f8860020          STRB     r0,[r6,#0x20]
;;;344    		break;
00006c  e05d              B        |L19.298|
;;;345    
;;;346    	case RTC_TIMETYPE_MINUTE:
;;;347    		CHECK_PARAM(TimeValue <= RTC_MINUTE_MAX);
00006e  2c3b              CMP      r4,#0x3b
000070  d800              BHI      |L19.116|
000072  e004              B        |L19.126|
                  |L19.116|
000074  f240115b          MOV      r1,#0x15b
000078  a02e              ADR      r0,|L19.308|
00007a  f7fffffe          BL       check_failed
                  |L19.126|
;;;348    
;;;349    		RTCx->MIN = TimeValue & RTC_MIN_MASK;
00007e  f004003f          AND      r0,r4,#0x3f
000082  f8860024          STRB     r0,[r6,#0x24]
;;;350    		break;
000086  e050              B        |L19.298|
;;;351    
;;;352    	case RTC_TIMETYPE_HOUR:
;;;353    		CHECK_PARAM(TimeValue <= RTC_HOUR_MAX);
000088  2c17              CMP      r4,#0x17
00008a  d800              BHI      |L19.142|
00008c  e004              B        |L19.152|
                  |L19.142|
00008e  f2401161          MOV      r1,#0x161
000092  a028              ADR      r0,|L19.308|
000094  f7fffffe          BL       check_failed
                  |L19.152|
;;;354    
;;;355    		RTCx->HOUR = TimeValue & RTC_HOUR_MASK;
000098  f004001f          AND      r0,r4,#0x1f
00009c  f8860028          STRB     r0,[r6,#0x28]
;;;356    		break;
0000a0  e043              B        |L19.298|
;;;357    
;;;358    	case RTC_TIMETYPE_DAYOFWEEK:
;;;359    		CHECK_PARAM(TimeValue <= RTC_DAYOFWEEK_MAX);
0000a2  2c06              CMP      r4,#6
0000a4  d800              BHI      |L19.168|
0000a6  e004              B        |L19.178|
                  |L19.168|
0000a8  f2401167          MOV      r1,#0x167
0000ac  a021              ADR      r0,|L19.308|
0000ae  f7fffffe          BL       check_failed
                  |L19.178|
;;;360    
;;;361    		RTCx->DOW = TimeValue & RTC_DOW_MASK;
0000b2  f0040007          AND      r0,r4,#7
0000b6  f8860030          STRB     r0,[r6,#0x30]
;;;362    		break;
0000ba  e036              B        |L19.298|
;;;363    
;;;364    	case RTC_TIMETYPE_DAYOFMONTH:
;;;365    		CHECK_PARAM((TimeValue <= RTC_DAYOFMONTH_MAX) \
0000bc  2c1f              CMP      r4,#0x1f
0000be  d801              BHI      |L19.196|
0000c0  b104              CBZ      r4,|L19.196|
0000c2  e004              B        |L19.206|
                  |L19.196|
0000c4  f240116d          MOV      r1,#0x16d
0000c8  a01a              ADR      r0,|L19.308|
0000ca  f7fffffe          BL       check_failed
                  |L19.206|
;;;366    				&& (TimeValue >= RTC_DAYOFMONTH_MIN));
;;;367    
;;;368    		RTCx->DOM = TimeValue & RTC_DOM_MASK;
0000ce  f004001f          AND      r0,r4,#0x1f
0000d2  f886002c          STRB     r0,[r6,#0x2c]
;;;369    		break;
0000d6  e028              B        |L19.298|
;;;370    
;;;371    	case RTC_TIMETYPE_DAYOFYEAR:
;;;372    		CHECK_PARAM((TimeValue >= RTC_DAYOFYEAR_MIN) \
0000d8  b11c              CBZ      r4,|L19.226|
0000da  f5b47fb7          CMP      r4,#0x16e
0000de  d800              BHI      |L19.226|
0000e0  e004              B        |L19.236|
                  |L19.226|
0000e2  f44f71ba          MOV      r1,#0x174
0000e6  a013              ADR      r0,|L19.308|
0000e8  f7fffffe          BL       check_failed
                  |L19.236|
;;;373    				&& (TimeValue <= RTC_DAYOFYEAR_MAX));
;;;374    
;;;375    		RTCx->DOY = TimeValue & RTC_DOY_MASK;
0000ec  f3c40008          UBFX     r0,r4,#0,#9
0000f0  86b0              STRH     r0,[r6,#0x34]
;;;376    		break;
0000f2  e01a              B        |L19.298|
;;;377    
;;;378    	case RTC_TIMETYPE_MONTH:
;;;379    		CHECK_PARAM((TimeValue >= RTC_MONTH_MIN) \
0000f4  b114              CBZ      r4,|L19.252|
0000f6  2c0c              CMP      r4,#0xc
0000f8  d800              BHI      |L19.252|
0000fa  e004              B        |L19.262|
                  |L19.252|
0000fc  f240117b          MOV      r1,#0x17b
000100  a00c              ADR      r0,|L19.308|
000102  f7fffffe          BL       check_failed
                  |L19.262|
;;;380    				&& (TimeValue <= RTC_MONTH_MAX));
;;;381    
;;;382    		RTCx->MONTH = TimeValue & RTC_MONTH_MASK;
000106  f004000f          AND      r0,r4,#0xf
00010a  f8860038          STRB     r0,[r6,#0x38]
;;;383    		break;
00010e  e00c              B        |L19.298|
;;;384    
;;;385    	case RTC_TIMETYPE_YEAR:
;;;386    		CHECK_PARAM(TimeValue <= RTC_YEAR_MAX);
000110  f5b45f80          CMP      r4,#0x1000
000114  d200              BCS      |L19.280|
000116  e004              B        |L19.290|
                  |L19.280|
000118  f44f71c1          MOV      r1,#0x182
00011c  a005              ADR      r0,|L19.308|
00011e  f7fffffe          BL       check_failed
                  |L19.290|
;;;387    
;;;388    		RTCx->YEAR = TimeValue & RTC_YEAR_MASK;
000122  f3c4000b          UBFX     r0,r4,#0,#12
000126  87b0              STRH     r0,[r6,#0x3c]
;;;389    		break;
000128  bf00              NOP      
                  |L19.298|
00012a  bf00              NOP                            ;344
;;;390    	}
;;;391    }
00012c  bd70              POP      {r4-r6,pc}
;;;392    
                          ENDP

00012e  0000              DCW      0x0000
                  |L19.304|
                          DCD      0x40024000
                  |L19.308|
000134  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000138  44726976
00013c  6572735c
000140  736f7572
000144  63655c6c
000148  70633137
00014c  78785f72
000150  74632e63
000154  00      
000155  00                DCB      0
000156  00                DCB      0
000157  00                DCB      0

                          AREA ||i.RTC_WriteGPREG||, CODE, READONLY, ALIGN=2

                  RTC_WriteGPREG PROC
;;;734     **********************************************************************/
;;;735    void RTC_WriteGPREG (LPC_RTC_TypeDef *RTCx, uint8_t Channel, uint32_t Value)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;736    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;737    	uint32_t *preg;
;;;738    
;;;739    	CHECK_PARAM(PARAM_RTCx(RTCx));
00000a  480c              LDR      r0,|L20.60|
00000c  4284              CMP      r4,r0
00000e  d100              BNE      |L20.18|
000010  e004              B        |L20.28|
                  |L20.18|
000012  f24021e3          MOV      r1,#0x2e3
000016  a00a              ADR      r0,|L20.64|
000018  f7fffffe          BL       check_failed
                  |L20.28|
;;;740    	CHECK_PARAM(PARAM_RTC_GPREG_CH(Channel));
00001c  2d04              CMP      r5,#4
00001e  dc00              BGT      |L20.34|
000020  e004              B        |L20.44|
                  |L20.34|
000022  f44f7139          MOV      r1,#0x2e4
000026  a006              ADR      r0,|L20.64|
000028  f7fffffe          BL       check_failed
                  |L20.44|
;;;741    
;;;742    	preg = (uint32_t *)&RTCx->GPREG0;
00002c  f1040744          ADD      r7,r4,#0x44
;;;743    	preg += Channel;
000030  eb070785          ADD      r7,r7,r5,LSL #2
;;;744    	*preg = Value;
000034  603e              STR      r6,[r7,#0]
;;;745    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;746    
                          ENDP

00003a  0000              DCW      0x0000
                  |L20.60|
                          DCD      0x40024000
                  |L20.64|
000040  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_rtc.c",0
000044  44726976
000048  6572735c
00004c  736f7572
000050  63655c6c
000054  70633137
000058  78785f72
00005c  74632e63
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

;*** Start embedded assembler ***

#line 1 "Lib\\Drivers\\source\\lpc17xx_rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc17xx_rtc_c_RTC_Init____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_lpc17xx_rtc_c_RTC_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc17xx_rtc_c_RTC_Init____REVSH|
#line 144
|__asm___13_lpc17xx_rtc_c_RTC_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
