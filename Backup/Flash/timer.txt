; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\timer.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\timer.crf Lib\CLib__1_0_0_4\src\Timer.c]
                          THUMB

                          AREA ||i.Timer_Elapsed||, CODE, READONLY, ALIGN=1

                  Timer_Elapsed PROC
;;;117    *******************************************************************************/
;;;118    boolean Timer_Elapsed(Timer *p)
000000  b570              PUSH     {r4-r6,lr}
;;;119    {
000002  4604              MOV      r4,r0
;;;120    		uint32_t timeSpan = Timer_GetTime(p);	
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       Timer_GetTime
00000a  4605              MOV      r5,r0
;;;121    	
;;;122    		if(timeSpan == 0)
00000c  b90d              CBNZ     r5,|L1.18|
;;;123    				return 0;	
00000e  2000              MOVS     r0,#0
                  |L1.16|
;;;124    		
;;;125    		if(timeSpan < p->interval)
;;;126    				return 0;
;;;127    
;;;128    		Timer_Stop(p);
;;;129    		
;;;130    		return 1;
;;;131    }
000010  bd70              POP      {r4-r6,pc}
                  |L1.18|
000012  6860              LDR      r0,[r4,#4]            ;125
000014  42a8              CMP      r0,r5                 ;125
000016  d901              BLS      |L1.28|
000018  2000              MOVS     r0,#0                 ;126
00001a  e7f9              B        |L1.16|
                  |L1.28|
00001c  4620              MOV      r0,r4                 ;128
00001e  f7fffffe          BL       Timer_Stop
000022  2001              MOVS     r0,#1                 ;130
000024  e7f4              B        |L1.16|
;;;132    
                          ENDP


                          AREA ||i.Timer_GetRemainingTime||, CODE, READONLY, ALIGN=1

                  Timer_GetRemainingTime PROC
;;;28     *******************************************************************************/
;;;29     uint32_t Timer_GetRemainingTime(Timer *p)
000000  b570              PUSH     {r4-r6,lr}
;;;30     {
000002  4604              MOV      r4,r0
;;;31     		uint32_t timeSpan = Timer_GetTime(p);	
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       Timer_GetTime
00000a  4605              MOV      r5,r0
;;;32     	
;;;33     		if(timeSpan == 0)
00000c  b90d              CBNZ     r5,|L2.18|
;;;34     				return 0;	
00000e  2000              MOVS     r0,#0
                  |L2.16|
;;;35     		
;;;36     		if(timeSpan < p->interval)
;;;37     				return p->interval - timeSpan;
;;;38     
;;;39     		return 0;
;;;40     }
000010  bd70              POP      {r4-r6,pc}
                  |L2.18|
000012  6860              LDR      r0,[r4,#4]            ;36
000014  42a8              CMP      r0,r5                 ;36
000016  d902              BLS      |L2.30|
000018  6860              LDR      r0,[r4,#4]            ;37
00001a  1b40              SUBS     r0,r0,r5              ;37
00001c  e7f8              B        |L2.16|
                  |L2.30|
00001e  2000              MOVS     r0,#0                 ;39
000020  e7f6              B        |L2.16|
;;;41     
                          ENDP


                          AREA ||i.Timer_GetRemainingTimeInSeconds||, CODE, READONLY, ALIGN=1

                  Timer_GetRemainingTimeInSeconds PROC
;;;8      *******************************************************************************/
;;;9      uint32_t Timer_GetRemainingTimeInSeconds(Timer *p)
000000  b570              PUSH     {r4-r6,lr}
;;;10     {
000002  4604              MOV      r4,r0
;;;11     		uint32_t timeSpan = Timer_GetTime(p);	
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       Timer_GetTime
00000a  4605              MOV      r5,r0
;;;12     	
;;;13     		if(timeSpan == 0)
00000c  b90d              CBNZ     r5,|L3.18|
;;;14     				return 0;	
00000e  2000              MOVS     r0,#0
                  |L3.16|
;;;15     		
;;;16     		if(timeSpan < p->interval)
;;;17     				return (p->interval - timeSpan) / 1000;
;;;18     
;;;19     		return 0;
;;;20     }
000010  bd70              POP      {r4-r6,pc}
                  |L3.18|
000012  6860              LDR      r0,[r4,#4]            ;16
000014  42a8              CMP      r0,r5                 ;16
000016  d906              BLS      |L3.38|
000018  6860              LDR      r0,[r4,#4]            ;17
00001a  1b40              SUBS     r0,r0,r5              ;17
00001c  f44f717a          MOV      r1,#0x3e8             ;17
000020  fbb0f0f1          UDIV     r0,r0,r1              ;17
000024  e7f4              B        |L3.16|
                  |L3.38|
000026  2000              MOVS     r0,#0                 ;19
000028  e7f2              B        |L3.16|
;;;21     
                          ENDP


                          AREA ||i.Timer_GetTime||, CODE, READONLY, ALIGN=1

                  Timer_GetTime PROC
;;;48     *******************************************************************************/
;;;49     uint32_t  	Timer_GetTime(Timer *p)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51     		uint32_t systemTime;
;;;52     		uint32_t timeSpan;	
;;;53     	
;;;54     		if(p->enabled == 0)
000004  7a20              LDRB     r0,[r4,#8]
000006  b908              CBNZ     r0,|L4.12|
;;;55     				return 0;
000008  2000              MOVS     r0,#0
                  |L4.10|
;;;56     		
;;;57     		if(p->enabled != 1)
;;;58     				return 0;		
;;;59     		
;;;60     		systemTime = SystemTime_GetTime();
;;;61     		
;;;62     		if(systemTime < p->startTime)
;;;63     		{
;;;64     				timeSpan = (0xFFFFFFFF - p->startTime) + systemTime;
;;;65     		}
;;;66     		else
;;;67     		{
;;;68     				timeSpan = systemTime - p->startTime;
;;;69     		}
;;;70     		
;;;71     		return timeSpan;
;;;72     }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  7a20              LDRB     r0,[r4,#8]            ;57
00000e  2801              CMP      r0,#1                 ;57
000010  d001              BEQ      |L4.22|
000012  2000              MOVS     r0,#0                 ;58
000014  e7f9              B        |L4.10|
                  |L4.22|
000016  f7fffffe          BL       SystemTime_GetTime
00001a  4605              MOV      r5,r0                 ;60
00001c  6820              LDR      r0,[r4,#0]            ;62
00001e  42a8              CMP      r0,r5                 ;62
000020  d904              BLS      |L4.44|
000022  6820              LDR      r0,[r4,#0]            ;64
000024  f1c030ff          RSB      r0,r0,#0xffffffff     ;64
000028  1946              ADDS     r6,r0,r5              ;64
00002a  e001              B        |L4.48|
                  |L4.44|
00002c  6820              LDR      r0,[r4,#0]            ;68
00002e  1a2e              SUBS     r6,r5,r0              ;68
                  |L4.48|
000030  4630              MOV      r0,r6                 ;71
000032  e7ea              B        |L4.10|
;;;73     
                          ENDP


                          AREA ||i.Timer_Init||, CODE, READONLY, ALIGN=1

                  Timer_Init PROC
;;;139    *******************************************************************************/
;;;140    void  	Timer_Init(Timer *p, uint32_t interval)
000000  2200              MOVS     r2,#0
;;;141    {
;;;142    		p->startTime = 0; 
000002  6002              STR      r2,[r0,#0]
;;;143    		p->interval = interval;
000004  6041              STR      r1,[r0,#4]
;;;144    	  p->enabled = 0;
000006  7202              STRB     r2,[r0,#8]
;;;145    }
000008  4770              BX       lr
;;;146    
                          ENDP


                          AREA ||i.Timer_SetInterval||, CODE, READONLY, ALIGN=1

                  Timer_SetInterval PROC
;;;80     *******************************************************************************/
;;;81     void  	Timer_SetInterval(Timer *p, uint32_t interval)
000000  6041              STR      r1,[r0,#4]
;;;82     {
;;;83     		p->interval = interval;
;;;84     }
000002  4770              BX       lr
;;;85     
                          ENDP


                          AREA ||i.Timer_Start||, CODE, READONLY, ALIGN=1

                  Timer_Start PROC
;;;92     *******************************************************************************/
;;;93     void  	Timer_Start(Timer *p)
000000  b510              PUSH     {r4,lr}
;;;94     {
000002  4604              MOV      r4,r0
;;;95     		p->startTime = SystemTime_GetTime();
000004  f7fffffe          BL       SystemTime_GetTime
000008  6020              STR      r0,[r4,#0]
;;;96     		p->enabled = 1;
00000a  2001              MOVS     r0,#1
00000c  7220              STRB     r0,[r4,#8]
;;;97     }
00000e  bd10              POP      {r4,pc}
;;;98     
                          ENDP


                          AREA ||i.Timer_Stop||, CODE, READONLY, ALIGN=1

                  Timer_Stop PROC
;;;105    *******************************************************************************/
;;;106    void  	Timer_Stop(Timer *p)
000000  2100              MOVS     r1,#0
;;;107    {
;;;108    		p->enabled = 0;
000002  7201              STRB     r1,[r0,#8]
;;;109    }
000004  4770              BX       lr
;;;110    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Lib\\CLib__1_0_0_4\\src\\Timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_Timer_c_060f0861____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_Timer_c_060f0861____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_Timer_c_060f0861____REVSH|
#line 144
|__asm___7_Timer_c_060f0861____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
