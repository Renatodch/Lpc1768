; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\lpc17xx_uart.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_uart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\lpc17xx_uart.crf Lib\Drivers\source\lpc17xx_uart.c]
                          THUMB

                          AREA ||i.UART_ABClearIntPending||, CODE, READONLY, ALIGN=2

                  UART_ABClearIntPending PROC
;;;982     **********************************************************************/
;;;983    void UART_ABClearIntPending(LPC_UART_TypeDef *UARTx, UART_ABEO_Type ABIntType)
000000  b570              PUSH     {r4-r6,lr}
;;;984    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;985    	CHECK_PARAM(PARAM_UARTx(UARTx));
000006  480e              LDR      r0,|L1.64|
000008  4284              CMP      r4,r0
00000a  d008              BEQ      |L1.30|
00000c  480d              LDR      r0,|L1.68|
00000e  4284              CMP      r4,r0
000010  d005              BEQ      |L1.30|
000012  480d              LDR      r0,|L1.72|
000014  4284              CMP      r4,r0
000016  d002              BEQ      |L1.30|
000018  480c              LDR      r0,|L1.76|
00001a  4284              CMP      r4,r0
00001c  d100              BNE      |L1.32|
                  |L1.30|
00001e  e004              B        |L1.42|
                  |L1.32|
000020  f24031d9          MOV      r1,#0x3d9
000024  a00a              ADR      r0,|L1.80|
000026  f7fffffe          BL       check_failed
                  |L1.42|
;;;986    	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
00002a  4806              LDR      r0,|L1.68|
00002c  4284              CMP      r4,r0
00002e  d103              BNE      |L1.56|
;;;987    	{
;;;988    		UARTx->ACR |= ABIntType;
000030  6a20              LDR      r0,[r4,#0x20]
000032  4328              ORRS     r0,r0,r5
000034  6220              STR      r0,[r4,#0x20]
000036  e002              B        |L1.62|
                  |L1.56|
;;;989    	}
;;;990    	else
;;;991    		UARTx->ACR |= ABIntType;
000038  6a20              LDR      r0,[r4,#0x20]
00003a  4328              ORRS     r0,r0,r5
00003c  6220              STR      r0,[r4,#0x20]
                  |L1.62|
;;;992    }
00003e  bd70              POP      {r4-r6,pc}
;;;993    
                          ENDP

                  |L1.64|
                          DCD      0x4000c000
                  |L1.68|
                          DCD      0x40010000
                  |L1.72|
                          DCD      0x40098000
                  |L1.76|
                          DCD      0x4009c000
                  |L1.80|
000050  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000054  44726976
000058  6572735c
00005c  736f7572
000060  63655c6c
000064  70633137
000068  78785f75
00006c  6172742e
000070  6300    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.UART_ABCmd||, CODE, READONLY, ALIGN=2

                  UART_ABCmd PROC
;;;914     **********************************************************************/
;;;915    void UART_ABCmd(LPC_UART_TypeDef *UARTx, UART_AB_CFG_Type *ABConfigStruct, \
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;916    				FunctionalState NewState)
;;;917    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;918    	uint32_t tmp;
;;;919    
;;;920    	CHECK_PARAM(PARAM_UARTx(UARTx));
00000a  482c              LDR      r0,|L2.188|
00000c  4284              CMP      r4,r0
00000e  d008              BEQ      |L2.34|
000010  482b              LDR      r0,|L2.192|
000012  4284              CMP      r4,r0
000014  d005              BEQ      |L2.34|
000016  482b              LDR      r0,|L2.196|
000018  4284              CMP      r4,r0
00001a  d002              BEQ      |L2.34|
00001c  482a              LDR      r0,|L2.200|
00001e  4284              CMP      r4,r0
000020  d100              BNE      |L2.36|
                  |L2.34|
000022  e004              B        |L2.46|
                  |L2.36|
000024  f44f7166          MOV      r1,#0x398
000028  a028              ADR      r0,|L2.204|
00002a  f7fffffe          BL       check_failed
                  |L2.46|
;;;921    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
00002e  b10d              CBZ      r5,|L2.52|
000030  2d01              CMP      r5,#1
000032  d100              BNE      |L2.54|
                  |L2.52|
000034  e004              B        |L2.64|
                  |L2.54|
000036  f2403199          MOV      r1,#0x399
00003a  a024              ADR      r0,|L2.204|
00003c  f7fffffe          BL       check_failed
                  |L2.64|
;;;922    
;;;923    	tmp = 0;
000040  2600              MOVS     r6,#0
;;;924    	if (NewState == ENABLE) {
000042  2d01              CMP      r5,#1
000044  d109              BNE      |L2.90|
;;;925    		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
000046  7838              LDRB     r0,[r7,#0]
000048  2801              CMP      r0,#1
00004a  d101              BNE      |L2.80|
;;;926    			tmp |= UART_ACR_MODE;
00004c  f0460602          ORR      r6,r6,#2
                  |L2.80|
;;;927    		}
;;;928    		if (ABConfigStruct->AutoRestart == ENABLE){
000050  7878              LDRB     r0,[r7,#1]
000052  2801              CMP      r0,#1
000054  d101              BNE      |L2.90|
;;;929    			tmp |= UART_ACR_AUTO_RESTART;
000056  f0460604          ORR      r6,r6,#4
                  |L2.90|
;;;930    		}
;;;931    	}
;;;932    
;;;933    	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
00005a  4819              LDR      r0,|L2.192|
00005c  4284              CMP      r4,r0
00005e  d115              BNE      |L2.140|
;;;934    	{
;;;935    		if (NewState == ENABLE)
000060  2d01              CMP      r5,#1
000062  d110              BNE      |L2.134|
;;;936    		{
;;;937    			// Clear DLL and DLM value
;;;938    			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
000064  7b20              LDRB     r0,[r4,#0xc]
000066  f0400080          ORR      r0,r0,#0x80
00006a  7320              STRB     r0,[r4,#0xc]
;;;939    			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
00006c  2000              MOVS     r0,#0
00006e  7020              STRB     r0,[r4,#0]
;;;940    			((LPC_UART1_TypeDef *)UARTx)->DLM = 0;
000070  7120              STRB     r0,[r4,#4]
;;;941    			((LPC_UART1_TypeDef *)UARTx)->LCR &= ~UART_LCR_DLAB_EN;
000072  7b20              LDRB     r0,[r4,#0xc]
000074  f0200080          BIC      r0,r0,#0x80
000078  7320              STRB     r0,[r4,#0xc]
;;;942    			// FDR value must be reset to default value
;;;943    			((LPC_UART1_TypeDef *)UARTx)->FDR = 0x10;
00007a  2010              MOVS     r0,#0x10
00007c  62a0              STR      r0,[r4,#0x28]
;;;944    			((LPC_UART1_TypeDef *)UARTx)->ACR = UART_ACR_START | tmp;
00007e  f0460001          ORR      r0,r6,#1
000082  6220              STR      r0,[r4,#0x20]
000084  e018              B        |L2.184|
                  |L2.134|
;;;945    		}
;;;946    		else
;;;947    		{
;;;948    			((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
000086  2000              MOVS     r0,#0
000088  6220              STR      r0,[r4,#0x20]
00008a  e015              B        |L2.184|
                  |L2.140|
;;;949    		}
;;;950    	}
;;;951    	else
;;;952    	{
;;;953    		if (NewState == ENABLE)
00008c  2d01              CMP      r5,#1
00008e  d111              BNE      |L2.180|
;;;954    		{
;;;955    			// Clear DLL and DLM value
;;;956    			UARTx->LCR |= UART_LCR_DLAB_EN;
000090  7b20              LDRB     r0,[r4,#0xc]
000092  f0400080          ORR      r0,r0,#0x80
000096  7320              STRB     r0,[r4,#0xc]
;;;957    			UARTx->DLL = 0;
000098  2000              MOVS     r0,#0
00009a  7020              STRB     r0,[r4,#0]
;;;958    			UARTx->DLM = 0;
00009c  7120              STRB     r0,[r4,#4]
;;;959    			UARTx->LCR &= ~UART_LCR_DLAB_EN;
00009e  7b20              LDRB     r0,[r4,#0xc]
0000a0  f0200080          BIC      r0,r0,#0x80
0000a4  7320              STRB     r0,[r4,#0xc]
;;;960    			// FDR value must be reset to default value
;;;961    			UARTx->FDR = 0x10;
0000a6  2010              MOVS     r0,#0x10
0000a8  f8840028          STRB     r0,[r4,#0x28]
;;;962    			UARTx->ACR = UART_ACR_START | tmp;
0000ac  f0460001          ORR      r0,r6,#1
0000b0  6220              STR      r0,[r4,#0x20]
0000b2  e001              B        |L2.184|
                  |L2.180|
;;;963    		}
;;;964    		else
;;;965    		{
;;;966    			UARTx->ACR = 0;
0000b4  2000              MOVS     r0,#0
0000b6  6220              STR      r0,[r4,#0x20]
                  |L2.184|
;;;967    		}
;;;968    	}
;;;969    }
0000b8  e8bd81f0          POP      {r4-r8,pc}
;;;970    
                          ENDP

                  |L2.188|
                          DCD      0x4000c000
                  |L2.192|
                          DCD      0x40010000
                  |L2.196|
                          DCD      0x40098000
                  |L2.200|
                          DCD      0x4009c000
                  |L2.204|
0000cc  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
0000d0  44726976
0000d4  6572735c
0000d8  736f7572
0000dc  63655c6c
0000e0  70633137
0000e4  78785f75
0000e8  6172742e
0000ec  6300    
0000ee  00                DCB      0
0000ef  00                DCB      0

                          AREA ||i.UART_CheckBusy||, CODE, READONLY, ALIGN=1

                  UART_CheckBusy PROC
;;;803     **********************************************************************/
;;;804    FlagStatus UART_CheckBusy(LPC_UART_TypeDef *UARTx)
000000  4601              MOV      r1,r0
;;;805    {
;;;806    	if (UARTx->LSR & UART_LSR_TEMT){
000002  7d08              LDRB     r0,[r1,#0x14]
000004  f0000040          AND      r0,r0,#0x40
000008  b108              CBZ      r0,|L3.14|
;;;807    		return RESET;
00000a  2000              MOVS     r0,#0
                  |L3.12|
;;;808    	} else {
;;;809    		return SET;
;;;810    	}
;;;811    }
00000c  4770              BX       lr
                  |L3.14|
00000e  2001              MOVS     r0,#1                 ;809
000010  e7fc              B        |L3.12|
;;;812    
                          ENDP


                          AREA ||i.UART_ConfigStructInit||, CODE, READONLY, ALIGN=1

                  UART_ConfigStructInit PROC
;;;457    *******************************************************************************/
;;;458    void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
000000  f44f5116          MOV      r1,#0x2580
;;;459    {
;;;460    	UART_InitStruct->Baud_rate = 9600;
000004  6001              STR      r1,[r0,#0]
;;;461    	UART_InitStruct->Databits = UART_DATABIT_8;
000006  2103              MOVS     r1,#3
000008  7141              STRB     r1,[r0,#5]
;;;462    	UART_InitStruct->Parity = UART_PARITY_NONE;
00000a  2100              MOVS     r1,#0
00000c  7101              STRB     r1,[r0,#4]
;;;463    	UART_InitStruct->Stopbits = UART_STOPBIT_1;
00000e  7181              STRB     r1,[r0,#6]
;;;464    }
000010  4770              BX       lr
;;;465    
                          ENDP


                          AREA ||i.UART_DeInit||, CODE, READONLY, ALIGN=2

                  UART_DeInit PROC
;;;407     **********************************************************************/
;;;408    void UART_DeInit(LPC_UART_TypeDef* UARTx)
000000  b510              PUSH     {r4,lr}
;;;409    {
000002  4604              MOV      r4,r0
;;;410    	// For debug mode
;;;411    	CHECK_PARAM(PARAM_UARTx(UARTx));
000004  481a              LDR      r0,|L5.112|
000006  4284              CMP      r4,r0
000008  d008              BEQ      |L5.28|
00000a  481a              LDR      r0,|L5.116|
00000c  4284              CMP      r4,r0
00000e  d005              BEQ      |L5.28|
000010  4819              LDR      r0,|L5.120|
000012  4284              CMP      r4,r0
000014  d002              BEQ      |L5.28|
000016  4819              LDR      r0,|L5.124|
000018  4284              CMP      r4,r0
00001a  d100              BNE      |L5.30|
                  |L5.28|
00001c  e004              B        |L5.40|
                  |L5.30|
00001e  f240119b          MOV      r1,#0x19b
000022  a017              ADR      r0,|L5.128|
000024  f7fffffe          BL       check_failed
                  |L5.40|
;;;412    
;;;413    	UART_TxCmd(UARTx, DISABLE);
000028  2100              MOVS     r1,#0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       UART_TxCmd
;;;414    
;;;415    #ifdef _UART0
;;;416    	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
000030  480f              LDR      r0,|L5.112|
000032  4284              CMP      r4,r0
000034  d103              BNE      |L5.62|
;;;417    	{
;;;418    		/* Set up clock and power for UART module */
;;;419    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, DISABLE);
000036  2100              MOVS     r1,#0
000038  2008              MOVS     r0,#8
00003a  f7fffffe          BL       CLKPWR_ConfigPPWR
                  |L5.62|
;;;420    	}
;;;421    #endif
;;;422    
;;;423    #ifdef _UART1
;;;424    	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
00003e  480d              LDR      r0,|L5.116|
000040  4284              CMP      r4,r0
000042  d103              BNE      |L5.76|
;;;425    	{
;;;426    		/* Set up clock and power for UART module */
;;;427    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, DISABLE);
000044  2100              MOVS     r1,#0
000046  2010              MOVS     r0,#0x10
000048  f7fffffe          BL       CLKPWR_ConfigPPWR
                  |L5.76|
;;;428    	}
;;;429    #endif
;;;430    
;;;431    #ifdef _UART2
;;;432    	if (UARTx == LPC_UART2)
00004c  480a              LDR      r0,|L5.120|
00004e  4284              CMP      r4,r0
000050  d104              BNE      |L5.92|
;;;433    	{
;;;434    		/* Set up clock and power for UART module */
;;;435    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, DISABLE);
000052  2100              MOVS     r1,#0
000054  f04f7080          MOV      r0,#0x1000000
000058  f7fffffe          BL       CLKPWR_ConfigPPWR
                  |L5.92|
;;;436    	}
;;;437    #endif
;;;438    
;;;439    #ifdef _UART3
;;;440    	if (UARTx == LPC_UART3)
00005c  4807              LDR      r0,|L5.124|
00005e  4284              CMP      r4,r0
000060  d104              BNE      |L5.108|
;;;441    	{
;;;442    		/* Set up clock and power for UART module */
;;;443    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, DISABLE);
000062  2100              MOVS     r1,#0
000064  f04f7000          MOV      r0,#0x2000000
000068  f7fffffe          BL       CLKPWR_ConfigPPWR
                  |L5.108|
;;;444    	}
;;;445    #endif
;;;446    }
00006c  bd10              POP      {r4,pc}
;;;447    
                          ENDP

00006e  0000              DCW      0x0000
                  |L5.112|
                          DCD      0x4000c000
                  |L5.116|
                          DCD      0x40010000
                  |L5.120|
                          DCD      0x40098000
                  |L5.124|
                          DCD      0x4009c000
                  |L5.128|
000080  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000084  44726976
000088  6572735c
00008c  736f7572
000090  63655c6c
000094  70633137
000098  78785f75
00009c  6172742e
0000a0  6300    
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.UART_FIFOConfig||, CODE, READONLY, ALIGN=2

                  UART_FIFOConfig PROC
;;;824     **********************************************************************/
;;;825    void UART_FIFOConfig(LPC_UART_TypeDef *UARTx, UART_FIFO_CFG_Type *FIFOCfg)
000000  b570              PUSH     {r4-r6,lr}
;;;826    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;827    	uint8_t tmp = 0;
000006  2500              MOVS     r5,#0
;;;828    
;;;829    	CHECK_PARAM(PARAM_UARTx(UARTx));
000008  483a              LDR      r0,|L6.244|
00000a  4286              CMP      r6,r0
00000c  d008              BEQ      |L6.32|
00000e  483a              LDR      r0,|L6.248|
000010  4286              CMP      r6,r0
000012  d005              BEQ      |L6.32|
000014  4839              LDR      r0,|L6.252|
000016  4286              CMP      r6,r0
000018  d002              BEQ      |L6.32|
00001a  4839              LDR      r0,|L6.256|
00001c  4286              CMP      r6,r0
00001e  d100              BNE      |L6.34|
                  |L6.32|
000020  e004              B        |L6.44|
                  |L6.34|
000022  f240313d          MOV      r1,#0x33d
000026  a037              ADR      r0,|L6.260|
000028  f7fffffe          BL       check_failed
                  |L6.44|
;;;830    	CHECK_PARAM(PARAM_UART_FIFO_LEVEL(FIFOCfg->FIFO_Level));
00002c  78e0              LDRB     r0,[r4,#3]
00002e  b140              CBZ      r0,|L6.66|
000030  78e0              LDRB     r0,[r4,#3]
000032  2801              CMP      r0,#1
000034  d005              BEQ      |L6.66|
000036  78e0              LDRB     r0,[r4,#3]
000038  2802              CMP      r0,#2
00003a  d002              BEQ      |L6.66|
00003c  78e0              LDRB     r0,[r4,#3]
00003e  2803              CMP      r0,#3
000040  d100              BNE      |L6.68|
                  |L6.66|
000042  e004              B        |L6.78|
                  |L6.68|
000044  f240313e          MOV      r1,#0x33e
000048  a02e              ADR      r0,|L6.260|
00004a  f7fffffe          BL       check_failed
                  |L6.78|
;;;831    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
00004e  78a0              LDRB     r0,[r4,#2]
000050  b110              CBZ      r0,|L6.88|
000052  78a0              LDRB     r0,[r4,#2]
000054  2801              CMP      r0,#1
000056  d100              BNE      |L6.90|
                  |L6.88|
000058  e004              B        |L6.100|
                  |L6.90|
00005a  f240313f          MOV      r1,#0x33f
00005e  a029              ADR      r0,|L6.260|
000060  f7fffffe          BL       check_failed
                  |L6.100|
;;;832    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
000064  7820              LDRB     r0,[r4,#0]
000066  b110              CBZ      r0,|L6.110|
000068  7820              LDRB     r0,[r4,#0]
00006a  2801              CMP      r0,#1
00006c  d100              BNE      |L6.112|
                  |L6.110|
00006e  e004              B        |L6.122|
                  |L6.112|
000070  f44f7150          MOV      r1,#0x340
000074  a023              ADR      r0,|L6.260|
000076  f7fffffe          BL       check_failed
                  |L6.122|
;;;833    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));
00007a  7860              LDRB     r0,[r4,#1]
00007c  b110              CBZ      r0,|L6.132|
00007e  7860              LDRB     r0,[r4,#1]
000080  2801              CMP      r0,#1
000082  d100              BNE      |L6.134|
                  |L6.132|
000084  e004              B        |L6.144|
                  |L6.134|
000086  f2403141          MOV      r1,#0x341
00008a  a01e              ADR      r0,|L6.260|
00008c  f7fffffe          BL       check_failed
                  |L6.144|
;;;834    
;;;835    	tmp |= UART_FCR_FIFO_EN;
000090  f0450501          ORR      r5,r5,#1
;;;836    	switch (FIFOCfg->FIFO_Level){
000094  78e0              LDRB     r0,[r4,#3]
000096  b130              CBZ      r0,|L6.166|
000098  2801              CMP      r0,#1
00009a  d006              BEQ      |L6.170|
00009c  2802              CMP      r0,#2
00009e  d007              BEQ      |L6.176|
0000a0  2803              CMP      r0,#3
0000a2  d108              BNE      |L6.182|
0000a4  e008              B        |L6.184|
                  |L6.166|
;;;837    	case UART_FIFO_TRGLEV0:
;;;838    		tmp |= UART_FCR_TRG_LEV0;
0000a6  bf00              NOP      
;;;839    		break;
0000a8  e009              B        |L6.190|
                  |L6.170|
;;;840    	case UART_FIFO_TRGLEV1:
;;;841    		tmp |= UART_FCR_TRG_LEV1;
0000aa  f0450540          ORR      r5,r5,#0x40
;;;842    		break;
0000ae  e006              B        |L6.190|
                  |L6.176|
;;;843    	case UART_FIFO_TRGLEV2:
;;;844    		tmp |= UART_FCR_TRG_LEV2;
0000b0  f0450580          ORR      r5,r5,#0x80
;;;845    		break;
0000b4  e003              B        |L6.190|
                  |L6.182|
;;;846    	case UART_FIFO_TRGLEV3:
0000b6  bf00              NOP      
                  |L6.184|
;;;847    	default:
;;;848    		tmp |= UART_FCR_TRG_LEV3;
0000b8  f04505c0          ORR      r5,r5,#0xc0
;;;849    		break;
0000bc  bf00              NOP      
                  |L6.190|
0000be  bf00              NOP                            ;839
;;;850    	}
;;;851    
;;;852    	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
0000c0  7860              LDRB     r0,[r4,#1]
0000c2  2801              CMP      r0,#1
0000c4  d101              BNE      |L6.202|
;;;853    	{
;;;854    		tmp |= UART_FCR_TX_RS;
0000c6  f0450504          ORR      r5,r5,#4
                  |L6.202|
;;;855    	}
;;;856    	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
0000ca  7820              LDRB     r0,[r4,#0]
0000cc  2801              CMP      r0,#1
0000ce  d101              BNE      |L6.212|
;;;857    	{
;;;858    		tmp |= UART_FCR_RX_RS;
0000d0  f0450502          ORR      r5,r5,#2
                  |L6.212|
;;;859    	}
;;;860    	if (FIFOCfg->FIFO_DMAMode == ENABLE)
0000d4  78a0              LDRB     r0,[r4,#2]
0000d6  2801              CMP      r0,#1
0000d8  d101              BNE      |L6.222|
;;;861    	{
;;;862    		tmp |= UART_FCR_DMAMODE_SEL;
0000da  f0450508          ORR      r5,r5,#8
                  |L6.222|
;;;863    	}
;;;864    
;;;865    
;;;866    	//write to FIFO control register
;;;867    	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
0000de  4806              LDR      r0,|L6.248|
0000e0  4286              CMP      r6,r0
0000e2  d103              BNE      |L6.236|
;;;868    	{
;;;869    		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
0000e4  f00500cf          AND      r0,r5,#0xcf
0000e8  7230              STRB     r0,[r6,#8]
0000ea  e002              B        |L6.242|
                  |L6.236|
;;;870    	}
;;;871    	else
;;;872    	{
;;;873    		UARTx->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
0000ec  f00500cf          AND      r0,r5,#0xcf
0000f0  7230              STRB     r0,[r6,#8]
                  |L6.242|
;;;874    	}
;;;875    }
0000f2  bd70              POP      {r4-r6,pc}
;;;876    
                          ENDP

                  |L6.244|
                          DCD      0x4000c000
                  |L6.248|
                          DCD      0x40010000
                  |L6.252|
                          DCD      0x40098000
                  |L6.256|
                          DCD      0x4009c000
                  |L6.260|
000104  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000108  44726976
00010c  6572735c
000110  736f7572
000114  63655c6c
000118  70633137
00011c  78785f75
000120  6172742e
000124  6300    
000126  00                DCB      0
000127  00                DCB      0

                          AREA ||i.UART_FIFOConfigStructInit||, CODE, READONLY, ALIGN=1

                  UART_FIFOConfigStructInit PROC
;;;888    *******************************************************************************/
;;;889    void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
000000  2100              MOVS     r1,#0
;;;890    {
;;;891    	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
000002  7081              STRB     r1,[r0,#2]
;;;892    	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
000004  70c1              STRB     r1,[r0,#3]
;;;893    	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
000006  2101              MOVS     r1,#1
000008  7001              STRB     r1,[r0,#0]
;;;894    	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
00000a  7041              STRB     r1,[r0,#1]
;;;895    }
00000c  4770              BX       lr
;;;896    
                          ENDP


                          AREA ||i.UART_ForceBreak||, CODE, READONLY, ALIGN=2

                  UART_ForceBreak PROC
;;;647     **********************************************************************/
;;;648    void UART_ForceBreak(LPC_UART_TypeDef* UARTx)
000000  b510              PUSH     {r4,lr}
;;;649    {
000002  4604              MOV      r4,r0
;;;650    	CHECK_PARAM(PARAM_UARTx(UARTx));
000004  480f              LDR      r0,|L8.68|
000006  4284              CMP      r4,r0
000008  d008              BEQ      |L8.28|
00000a  480f              LDR      r0,|L8.72|
00000c  4284              CMP      r4,r0
00000e  d005              BEQ      |L8.28|
000010  480e              LDR      r0,|L8.76|
000012  4284              CMP      r4,r0
000014  d002              BEQ      |L8.28|
000016  480e              LDR      r0,|L8.80|
000018  4284              CMP      r4,r0
00001a  d100              BNE      |L8.30|
                  |L8.28|
00001c  e004              B        |L8.40|
                  |L8.30|
00001e  f240218a          MOV      r1,#0x28a
000022  a00c              ADR      r0,|L8.84|
000024  f7fffffe          BL       check_failed
                  |L8.40|
;;;651    
;;;652    	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
000028  4807              LDR      r0,|L8.72|
00002a  4284              CMP      r4,r0
00002c  d104              BNE      |L8.56|
;;;653    	{
;;;654    		((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_BREAK_EN;
00002e  7b20              LDRB     r0,[r4,#0xc]
000030  f0400040          ORR      r0,r0,#0x40
000034  7320              STRB     r0,[r4,#0xc]
000036  e003              B        |L8.64|
                  |L8.56|
;;;655    	}
;;;656    	else
;;;657    	{
;;;658    		UARTx->LCR |= UART_LCR_BREAK_EN;
000038  7b20              LDRB     r0,[r4,#0xc]
00003a  f0400040          ORR      r0,r0,#0x40
00003e  7320              STRB     r0,[r4,#0xc]
                  |L8.64|
;;;659    	}
;;;660    }
000040  bd10              POP      {r4,pc}
;;;661    
                          ENDP

000042  0000              DCW      0x0000
                  |L8.68|
                          DCD      0x4000c000
                  |L8.72|
                          DCD      0x40010000
                  |L8.76|
                          DCD      0x40098000
                  |L8.80|
                          DCD      0x4009c000
                  |L8.84|
000054  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000058  44726976
00005c  6572735c
000060  736f7572
000064  63655c6c
000068  70633137
00006c  78785f75
000070  6172742e
000074  6300    
000076  00                DCB      0
000077  00                DCB      0

                          AREA ||i.UART_FullModemConfigMode||, CODE, READONLY, ALIGN=2

                  UART_FullModemConfigMode PROC
;;;1173    **********************************************************************/
;;;1174   void UART_FullModemConfigMode(LPC_UART1_TypeDef *UARTx, UART_MODEM_MODE_Type Mode, \
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1175   							FunctionalState NewState)
;;;1176   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;1177   	uint8_t tmp;
;;;1178   
;;;1179   	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
00000a  481c              LDR      r0,|L9.124|
00000c  4284              CMP      r4,r0
00000e  d100              BNE      |L9.18|
000010  e004              B        |L9.28|
                  |L9.18|
000012  f240419b          MOV      r1,#0x49b
000016  a01a              ADR      r0,|L9.128|
000018  f7fffffe          BL       check_failed
                  |L9.28|
;;;1180   	CHECK_PARAM(PARAM_UART1_MODEM_MODE(Mode));
00001c  b11d              CBZ      r5,|L9.38|
00001e  2d01              CMP      r5,#1
000020  d001              BEQ      |L9.38|
000022  2d02              CMP      r5,#2
000024  d100              BNE      |L9.40|
                  |L9.38|
000026  e004              B        |L9.50|
                  |L9.40|
000028  f240419c          MOV      r1,#0x49c
00002c  a014              ADR      r0,|L9.128|
00002e  f7fffffe          BL       check_failed
                  |L9.50|
;;;1181   	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
000032  b10f              CBZ      r7,|L9.56|
000034  2f01              CMP      r7,#1
000036  d100              BNE      |L9.58|
                  |L9.56|
000038  e004              B        |L9.68|
                  |L9.58|
00003a  f240419d          MOV      r1,#0x49d
00003e  a010              ADR      r0,|L9.128|
000040  f7fffffe          BL       check_failed
                  |L9.68|
;;;1182   
;;;1183   	switch(Mode){
000044  b125              CBZ      r5,|L9.80|
000046  2d01              CMP      r5,#1
000048  d004              BEQ      |L9.84|
00004a  2d02              CMP      r5,#2
00004c  d106              BNE      |L9.92|
00004e  e003              B        |L9.88|
                  |L9.80|
;;;1184   	case UART1_MODEM_MODE_LOOPBACK:
;;;1185   		tmp = UART1_MCR_LOOPB_EN;
000050  2610              MOVS     r6,#0x10
;;;1186   		break;
000052  e004              B        |L9.94|
                  |L9.84|
;;;1187   	case UART1_MODEM_MODE_AUTO_RTS:
;;;1188   		tmp = UART1_MCR_AUTO_RTS_EN;
000054  2640              MOVS     r6,#0x40
;;;1189   		break;
000056  e002              B        |L9.94|
                  |L9.88|
;;;1190   	case UART1_MODEM_MODE_AUTO_CTS:
;;;1191   		tmp = UART1_MCR_AUTO_CTS_EN;
000058  2680              MOVS     r6,#0x80
;;;1192   		break;
00005a  e000              B        |L9.94|
                  |L9.92|
;;;1193   	default:
;;;1194   		break;
00005c  bf00              NOP      
                  |L9.94|
00005e  bf00              NOP                            ;1186
;;;1195   	}
;;;1196   
;;;1197   	if (NewState == ENABLE)
000060  2f01              CMP      r7,#1
000062  d103              BNE      |L9.108|
;;;1198   	{
;;;1199   		UARTx->MCR |= tmp;
000064  7c20              LDRB     r0,[r4,#0x10]
000066  4330              ORRS     r0,r0,r6
000068  7420              STRB     r0,[r4,#0x10]
00006a  e004              B        |L9.118|
                  |L9.108|
;;;1200   	}
;;;1201   	else
;;;1202   	{
;;;1203   		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
00006c  7c20              LDRB     r0,[r4,#0x10]
00006e  21f3              MOVS     r1,#0xf3
000070  43b1              BICS     r1,r1,r6
000072  4008              ANDS     r0,r0,r1
000074  7420              STRB     r0,[r4,#0x10]
                  |L9.118|
;;;1204   	}
;;;1205   }
000076  e8bd81f0          POP      {r4-r8,pc}
;;;1206   
                          ENDP

00007a  0000              DCW      0x0000
                  |L9.124|
                          DCD      0x40010000
                  |L9.128|
000080  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000084  44726976
000088  6572735c
00008c  736f7572
000090  63655c6c
000094  70633137
000098  78785f75
00009c  6172742e
0000a0  6300    
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||i.UART_FullModemForcePinState||, CODE, READONLY, ALIGN=2

                  UART_FullModemForcePinState PROC
;;;1133    **********************************************************************/
;;;1134   void UART_FullModemForcePinState(LPC_UART1_TypeDef *UARTx, UART_MODEM_PIN_Type Pin, \
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1135   							UART1_SignalState NewState)
;;;1136   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;1137   	uint8_t tmp = 0;
00000a  2700              MOVS     r7,#0
;;;1138   
;;;1139   	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
00000c  4818              LDR      r0,|L10.112|
00000e  4284              CMP      r4,r0
000010  d100              BNE      |L10.20|
000012  e004              B        |L10.30|
                  |L10.20|
000014  f2404173          MOV      r1,#0x473
000018  a016              ADR      r0,|L10.116|
00001a  f7fffffe          BL       check_failed
                  |L10.30|
;;;1140   	CHECK_PARAM(PARAM_UART1_MODEM_PIN(Pin));
00001e  b10d              CBZ      r5,|L10.36|
000020  2d01              CMP      r5,#1
000022  d100              BNE      |L10.38|
                  |L10.36|
000024  e004              B        |L10.48|
                  |L10.38|
000026  f2404174          MOV      r1,#0x474
00002a  a012              ADR      r0,|L10.116|
00002c  f7fffffe          BL       check_failed
                  |L10.48|
;;;1141   	CHECK_PARAM(PARAM_UART1_SIGNALSTATE(NewState));
000030  b10e              CBZ      r6,|L10.54|
000032  2e01              CMP      r6,#1
000034  d100              BNE      |L10.56|
                  |L10.54|
000036  e004              B        |L10.66|
                  |L10.56|
000038  f2404175          MOV      r1,#0x475
00003c  a00d              ADR      r0,|L10.116|
00003e  f7fffffe          BL       check_failed
                  |L10.66|
;;;1142   
;;;1143   	switch (Pin){
000042  b115              CBZ      r5,|L10.74|
000044  2d01              CMP      r5,#1
000046  d104              BNE      |L10.82|
000048  e001              B        |L10.78|
                  |L10.74|
;;;1144   	case UART1_MODEM_PIN_DTR:
;;;1145   		tmp = UART1_MCR_DTR_CTRL;
00004a  2701              MOVS     r7,#1
;;;1146   		break;
00004c  e002              B        |L10.84|
                  |L10.78|
;;;1147   	case UART1_MODEM_PIN_RTS:
;;;1148   		tmp = UART1_MCR_RTS_CTRL;
00004e  2702              MOVS     r7,#2
;;;1149   		break;
000050  e000              B        |L10.84|
                  |L10.82|
;;;1150   	default:
;;;1151   		break;
000052  bf00              NOP      
                  |L10.84|
000054  bf00              NOP                            ;1146
;;;1152   	}
;;;1153   
;;;1154   	if (NewState == ACTIVE){
000056  2e01              CMP      r6,#1
000058  d103              BNE      |L10.98|
;;;1155   		UARTx->MCR |= tmp;
00005a  7c20              LDRB     r0,[r4,#0x10]
00005c  4338              ORRS     r0,r0,r7
00005e  7420              STRB     r0,[r4,#0x10]
000060  e004              B        |L10.108|
                  |L10.98|
;;;1156   	} else {
;;;1157   		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
000062  7c20              LDRB     r0,[r4,#0x10]
000064  21f3              MOVS     r1,#0xf3
000066  43b9              BICS     r1,r1,r7
000068  4008              ANDS     r0,r0,r1
00006a  7420              STRB     r0,[r4,#0x10]
                  |L10.108|
;;;1158   	}
;;;1159   }
00006c  e8bd81f0          POP      {r4-r8,pc}
;;;1160   
                          ENDP

                  |L10.112|
                          DCD      0x40010000
                  |L10.116|
000074  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000078  44726976
00007c  6572735c
000080  736f7572
000084  63655c6c
000088  70633137
00008c  78785f75
000090  6172742e
000094  6300    
000096  00                DCB      0
000097  00                DCB      0

                          AREA ||i.UART_FullModemGetStatus||, CODE, READONLY, ALIGN=2

                  UART_FullModemGetStatus PROC
;;;1219    **********************************************************************/
;;;1220   uint8_t UART_FullModemGetStatus(LPC_UART1_TypeDef *UARTx)
000000  b510              PUSH     {r4,lr}
;;;1221   {
000002  4604              MOV      r4,r0
;;;1222   	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
000004  4805              LDR      r0,|L11.28|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L11.12|
00000a  e004              B        |L11.22|
                  |L11.12|
00000c  f24041c6          MOV      r1,#0x4c6
000010  a003              ADR      r0,|L11.32|
000012  f7fffffe          BL       check_failed
                  |L11.22|
;;;1223   	return ((UARTx->MSR) & UART1_MSR_BITMASK);
000016  7e20              LDRB     r0,[r4,#0x18]
;;;1224   }
000018  bd10              POP      {r4,pc}
;;;1225   
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0x40010000
                  |L11.32|
000020  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000024  44726976
000028  6572735c
00002c  736f7572
000030  63655c6c
000034  70633137
000038  78785f75
00003c  6172742e
000040  6300    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.UART_GetIntId||, CODE, READONLY, ALIGN=2

                  UART_GetIntId PROC
;;;788     *********************************************************************/
;;;789    uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
000000  b510              PUSH     {r4,lr}
;;;790    {
000002  4604              MOV      r4,r0
;;;791    	CHECK_PARAM(PARAM_UARTx(UARTx));
000004  480b              LDR      r0,|L12.52|
000006  4284              CMP      r4,r0
000008  d008              BEQ      |L12.28|
00000a  480b              LDR      r0,|L12.56|
00000c  4284              CMP      r4,r0
00000e  d005              BEQ      |L12.28|
000010  480a              LDR      r0,|L12.60|
000012  4284              CMP      r4,r0
000014  d002              BEQ      |L12.28|
000016  480a              LDR      r0,|L12.64|
000018  4284              CMP      r4,r0
00001a  d100              BNE      |L12.30|
                  |L12.28|
00001c  e004              B        |L12.40|
                  |L12.30|
00001e  f2403117          MOV      r1,#0x317
000022  a008              ADR      r0,|L12.68|
000024  f7fffffe          BL       check_failed
                  |L12.40|
;;;792    	return (UARTx->IIR & 0x03CF);
000028  68a0              LDR      r0,[r4,#8]
00002a  f24031cf          MOV      r1,#0x3cf
00002e  4008              ANDS     r0,r0,r1
;;;793    }
000030  bd10              POP      {r4,pc}
;;;794    
                          ENDP

000032  0000              DCW      0x0000
                  |L12.52|
                          DCD      0x4000c000
                  |L12.56|
                          DCD      0x40010000
                  |L12.60|
                          DCD      0x40098000
                  |L12.64|
                          DCD      0x4009c000
                  |L12.68|
000044  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000048  44726976
00004c  6572735c
000050  736f7572
000054  63655c6c
000058  70633137
00005c  78785f75
000060  6172742e
000064  6300    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.UART_GetLineStatus||, CODE, READONLY, ALIGN=2

                  UART_GetLineStatus PROC
;;;765     *********************************************************************/
;;;766    uint8_t UART_GetLineStatus(LPC_UART_TypeDef* UARTx)
000000  b510              PUSH     {r4,lr}
;;;767    {
000002  4604              MOV      r4,r0
;;;768    	CHECK_PARAM(PARAM_UARTx(UARTx));
000004  480c              LDR      r0,|L13.56|
000006  4284              CMP      r4,r0
000008  d008              BEQ      |L13.28|
00000a  480c              LDR      r0,|L13.60|
00000c  4284              CMP      r4,r0
00000e  d005              BEQ      |L13.28|
000010  480b              LDR      r0,|L13.64|
000012  4284              CMP      r4,r0
000014  d002              BEQ      |L13.28|
000016  480b              LDR      r0,|L13.68|
000018  4284              CMP      r4,r0
00001a  d100              BNE      |L13.30|
                  |L13.28|
00001c  e004              B        |L13.40|
                  |L13.30|
00001e  f44f7140          MOV      r1,#0x300
000022  a009              ADR      r0,|L13.72|
000024  f7fffffe          BL       check_failed
                  |L13.40|
;;;769    
;;;770    	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
000028  4804              LDR      r0,|L13.60|
00002a  4284              CMP      r4,r0
00002c  d101              BNE      |L13.50|
;;;771    	{
;;;772    		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
00002e  7d00              LDRB     r0,[r0,#0x14]
                  |L13.48|
;;;773    	}
;;;774    	else
;;;775    	{
;;;776    		return ((UARTx->LSR) & UART_LSR_BITMASK);
;;;777    	}
;;;778    }
000030  bd10              POP      {r4,pc}
                  |L13.50|
000032  7d20              LDRB     r0,[r4,#0x14]         ;776
000034  e7fc              B        |L13.48|
;;;779    
                          ENDP

000036  0000              DCW      0x0000
                  |L13.56|
                          DCD      0x4000c000
                  |L13.60|
                          DCD      0x40010000
                  |L13.64|
                          DCD      0x40098000
                  |L13.68|
                          DCD      0x4009c000
                  |L13.72|
000048  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
00004c  44726976
000050  6572735c
000054  736f7572
000058  63655c6c
00005c  70633137
000060  78785f75
000064  6172742e
000068  6300    
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.UART_Init||, CODE, READONLY, ALIGN=2

                  UART_Init PROC
;;;201     *********************************************************************/
;;;202    void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;203    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;204    	uint32_t tmp;
;;;205    
;;;206    	// For debug mode
;;;207    	CHECK_PARAM(PARAM_UARTx(UARTx));
000006  4879              LDR      r0,|L14.492|
000008  4284              CMP      r4,r0
00000a  d008              BEQ      |L14.30|
00000c  4878              LDR      r0,|L14.496|
00000e  4284              CMP      r4,r0
000010  d005              BEQ      |L14.30|
000012  4878              LDR      r0,|L14.500|
000014  4284              CMP      r4,r0
000016  d002              BEQ      |L14.30|
000018  4877              LDR      r0,|L14.504|
00001a  4284              CMP      r4,r0
00001c  d100              BNE      |L14.32|
                  |L14.30|
00001e  e003              B        |L14.40|
                  |L14.32|
000020  21cf              MOVS     r1,#0xcf
000022  a076              ADR      r0,|L14.508|
000024  f7fffffe          BL       check_failed
                  |L14.40|
;;;208    	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
000028  7968              LDRB     r0,[r5,#5]
00002a  b140              CBZ      r0,|L14.62|
00002c  7968              LDRB     r0,[r5,#5]
00002e  2801              CMP      r0,#1
000030  d005              BEQ      |L14.62|
000032  7968              LDRB     r0,[r5,#5]
000034  2802              CMP      r0,#2
000036  d002              BEQ      |L14.62|
000038  7968              LDRB     r0,[r5,#5]
00003a  2803              CMP      r0,#3
00003c  d100              BNE      |L14.64|
                  |L14.62|
00003e  e003              B        |L14.72|
                  |L14.64|
000040  21d0              MOVS     r1,#0xd0
000042  a06e              ADR      r0,|L14.508|
000044  f7fffffe          BL       check_failed
                  |L14.72|
;;;209    	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
000048  79a8              LDRB     r0,[r5,#6]
00004a  b110              CBZ      r0,|L14.82|
00004c  79a8              LDRB     r0,[r5,#6]
00004e  2801              CMP      r0,#1
000050  d100              BNE      |L14.84|
                  |L14.82|
000052  e003              B        |L14.92|
                  |L14.84|
000054  21d1              MOVS     r1,#0xd1
000056  a069              ADR      r0,|L14.508|
000058  f7fffffe          BL       check_failed
                  |L14.92|
;;;210    	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));
00005c  7928              LDRB     r0,[r5,#4]
00005e  b158              CBZ      r0,|L14.120|
000060  7928              LDRB     r0,[r5,#4]
000062  2801              CMP      r0,#1
000064  d008              BEQ      |L14.120|
000066  7928              LDRB     r0,[r5,#4]
000068  2802              CMP      r0,#2
00006a  d005              BEQ      |L14.120|
00006c  7928              LDRB     r0,[r5,#4]
00006e  2803              CMP      r0,#3
000070  d002              BEQ      |L14.120|
000072  7928              LDRB     r0,[r5,#4]
000074  2804              CMP      r0,#4
000076  d100              BNE      |L14.122|
                  |L14.120|
000078  e003              B        |L14.130|
                  |L14.122|
00007a  21d2              MOVS     r1,#0xd2
00007c  a05f              ADR      r0,|L14.508|
00007e  f7fffffe          BL       check_failed
                  |L14.130|
;;;211    
;;;212    #ifdef _UART0
;;;213    	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
000082  485a              LDR      r0,|L14.492|
000084  4284              CMP      r4,r0
000086  d103              BNE      |L14.144|
;;;214    	{
;;;215    		/* Set up clock and power for UART module */
;;;216    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
000088  2101              MOVS     r1,#1
00008a  2008              MOVS     r0,#8
00008c  f7fffffe          BL       CLKPWR_ConfigPPWR
                  |L14.144|
;;;217    	}
;;;218    #endif
;;;219    
;;;220    #ifdef _UART1
;;;221    	if(((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
000090  4857              LDR      r0,|L14.496|
000092  4284              CMP      r4,r0
000094  d103              BNE      |L14.158|
;;;222    	{
;;;223    		/* Set up clock and power for UART module */
;;;224    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
000096  2101              MOVS     r1,#1
000098  2010              MOVS     r0,#0x10
00009a  f7fffffe          BL       CLKPWR_ConfigPPWR
                  |L14.158|
;;;225    	}
;;;226    #endif
;;;227    
;;;228    #ifdef _UART2
;;;229    	if(UARTx == LPC_UART2)
00009e  4855              LDR      r0,|L14.500|
0000a0  4284              CMP      r4,r0
0000a2  d103              BNE      |L14.172|
;;;230    	{
;;;231    		/* Set up clock and power for UART module */
;;;232    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
0000a4  2101              MOVS     r1,#1
0000a6  0608              LSLS     r0,r1,#24
0000a8  f7fffffe          BL       CLKPWR_ConfigPPWR
                  |L14.172|
;;;233    	}
;;;234    #endif
;;;235    
;;;236    #ifdef _UART3
;;;237    	if(UARTx == LPC_UART3)
0000ac  4852              LDR      r0,|L14.504|
0000ae  4284              CMP      r4,r0
0000b0  d103              BNE      |L14.186|
;;;238    	{
;;;239    		/* Set up clock and power for UART module */
;;;240    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
0000b2  2101              MOVS     r1,#1
0000b4  0648              LSLS     r0,r1,#25
0000b6  f7fffffe          BL       CLKPWR_ConfigPPWR
                  |L14.186|
;;;241    	}
;;;242    #endif
;;;243    
;;;244    	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
0000ba  484d              LDR      r0,|L14.496|
0000bc  4284              CMP      r4,r0
0000be  d123              BNE      |L14.264|
;;;245    	{
;;;246    		/* FIFOs are empty */
;;;247    		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
0000c0  2007              MOVS     r0,#7
0000c2  7220              STRB     r0,[r4,#8]
;;;248    				| UART_FCR_RX_RS | UART_FCR_TX_RS);
;;;249    		// Disable FIFO
;;;250    		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
0000c4  2000              MOVS     r0,#0
0000c6  7220              STRB     r0,[r4,#8]
;;;251    
;;;252    		// Dummy reading
;;;253    		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
0000c8  e000              B        |L14.204|
                  |L14.202|
;;;254    		{
;;;255    			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
0000ca  7826              LDRB     r6,[r4,#0]
                  |L14.204|
0000cc  7d20              LDRB     r0,[r4,#0x14]         ;253
0000ce  f0000001          AND      r0,r0,#1              ;253
0000d2  2800              CMP      r0,#0                 ;253
0000d4  d1f9              BNE      |L14.202|
;;;256    		}
;;;257    
;;;258    		((LPC_UART1_TypeDef *)UARTx)->TER = UART_TER_TXEN;
0000d6  2080              MOVS     r0,#0x80
0000d8  f8840030          STRB     r0,[r4,#0x30]
;;;259    		// Wait for current transmit complete
;;;260    		while (!(((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_THRE));
0000dc  bf00              NOP      
                  |L14.222|
0000de  7d20              LDRB     r0,[r4,#0x14]
0000e0  f0000020          AND      r0,r0,#0x20
0000e4  2800              CMP      r0,#0
0000e6  d0fa              BEQ      |L14.222|
;;;261    		// Disable Tx
;;;262    		((LPC_UART1_TypeDef *)UARTx)->TER = 0;
0000e8  2000              MOVS     r0,#0
0000ea  f8840030          STRB     r0,[r4,#0x30]
;;;263    
;;;264    		// Disable interrupt
;;;265    		((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER = 0;
0000ee  6060              STR      r0,[r4,#4]
;;;266    		// Set LCR to default state
;;;267    		((LPC_UART1_TypeDef *)UARTx)->LCR = 0;
0000f0  7320              STRB     r0,[r4,#0xc]
;;;268    		// Set ACR to default state
;;;269    		((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
0000f2  6220              STR      r0,[r4,#0x20]
;;;270    		// Set Modem Control to default state
;;;271    		((LPC_UART1_TypeDef *)UARTx)->MCR = 0;
0000f4  7420              STRB     r0,[r4,#0x10]
;;;272    		// Set RS485 control to default state
;;;273    		((LPC_UART1_TypeDef *)UARTx)->RS485CTRL = 0;
0000f6  f884004c          STRB     r0,[r4,#0x4c]
;;;274    		// Set RS485 delay timer to default state
;;;275    		((LPC_UART1_TypeDef *)UARTx)->RS485DLY = 0;
0000fa  f8840054          STRB     r0,[r4,#0x54]
;;;276    		// Set RS485 addr match to default state
;;;277    		((LPC_UART1_TypeDef *)UARTx)->ADRMATCH = 0;
0000fe  f8840050          STRB     r0,[r4,#0x50]
;;;278    		//Dummy Reading to Clear Status
;;;279    		tmp = ((LPC_UART1_TypeDef *)UARTx)->MSR;
000102  7e26              LDRB     r6,[r4,#0x18]
;;;280    		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
000104  7d26              LDRB     r6,[r4,#0x14]
000106  e01a              B        |L14.318|
                  |L14.264|
;;;281    	}
;;;282    	else
;;;283    	{
;;;284    		/* FIFOs are empty */
;;;285    		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
000108  2007              MOVS     r0,#7
00010a  7220              STRB     r0,[r4,#8]
;;;286    		// Disable FIFO
;;;287    		UARTx->/*IIFCR.*/FCR = 0;
00010c  2000              MOVS     r0,#0
00010e  7220              STRB     r0,[r4,#8]
;;;288    
;;;289    		// Dummy reading
;;;290    		while (UARTx->LSR & UART_LSR_RDR)
000110  e000              B        |L14.276|
                  |L14.274|
;;;291    		{
;;;292    			tmp = UARTx->/*RBTHDLR.*/RBR;
000112  7826              LDRB     r6,[r4,#0]
                  |L14.276|
000114  7d20              LDRB     r0,[r4,#0x14]         ;290
000116  f0000001          AND      r0,r0,#1              ;290
00011a  2800              CMP      r0,#0                 ;290
00011c  d1f9              BNE      |L14.274|
;;;293    		}
;;;294    
;;;295    		UARTx->TER = UART_TER_TXEN;
00011e  2080              MOVS     r0,#0x80
000120  f8840030          STRB     r0,[r4,#0x30]
;;;296    		// Wait for current transmit complete
;;;297    		while (!(UARTx->LSR & UART_LSR_THRE));
000124  bf00              NOP      
                  |L14.294|
000126  7d20              LDRB     r0,[r4,#0x14]
000128  f0000020          AND      r0,r0,#0x20
00012c  2800              CMP      r0,#0
00012e  d0fa              BEQ      |L14.294|
;;;298    		// Disable Tx
;;;299    		UARTx->TER = 0;
000130  2000              MOVS     r0,#0
000132  f8840030          STRB     r0,[r4,#0x30]
;;;300    
;;;301    		// Disable interrupt
;;;302    		UARTx->/*DLIER.*/IER = 0;
000136  6060              STR      r0,[r4,#4]
;;;303    		// Set LCR to default state
;;;304    		UARTx->LCR = 0;
000138  7320              STRB     r0,[r4,#0xc]
;;;305    		// Set ACR to default state
;;;306    		UARTx->ACR = 0;
00013a  6220              STR      r0,[r4,#0x20]
;;;307    		// Dummy reading
;;;308    		tmp = UARTx->LSR;
00013c  7d26              LDRB     r6,[r4,#0x14]
                  |L14.318|
;;;309    	}
;;;310    
;;;311    	if (UARTx == LPC_UART3)
00013e  482e              LDR      r0,|L14.504|
000140  4284              CMP      r4,r0
000142  d102              BNE      |L14.330|
;;;312    	{
;;;313    		// Set IrDA to default state
;;;314    		UARTx->ICR = 0;
000144  2000              MOVS     r0,#0
000146  f8840024          STRB     r0,[r4,#0x24]
                  |L14.330|
;;;315    	}
;;;316    
;;;317    	// Set Line Control register ----------------------------
;;;318    
;;;319    	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
00014a  4620              MOV      r0,r4
00014c  6829              LDR      r1,[r5,#0]
00014e  f7fffffe          BL       uart_set_divisors
;;;320    
;;;321    	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
000152  4827              LDR      r0,|L14.496|
000154  4284              CMP      r4,r0
000156  d103              BNE      |L14.352|
;;;322    	{
;;;323    		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
000158  7b20              LDRB     r0,[r4,#0xc]
00015a  f00006c0          AND      r6,r0,#0xc0
00015e  e002              B        |L14.358|
                  |L14.352|
;;;324    				& UART_LCR_BITMASK;
;;;325    	}
;;;326    	else
;;;327    	{
;;;328    		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
000160  7b20              LDRB     r0,[r4,#0xc]
000162  f00006c0          AND      r6,r0,#0xc0
                  |L14.358|
;;;329    	}
;;;330    
;;;331    	switch (UART_ConfigStruct->Databits){
000166  7968              LDRB     r0,[r5,#5]
000168  b130              CBZ      r0,|L14.376|
00016a  2801              CMP      r0,#1
00016c  d006              BEQ      |L14.380|
00016e  2802              CMP      r0,#2
000170  d007              BEQ      |L14.386|
000172  2803              CMP      r0,#3
000174  d108              BNE      |L14.392|
000176  e008              B        |L14.394|
                  |L14.376|
;;;332    	case UART_DATABIT_5:
;;;333    		tmp |= UART_LCR_WLEN5;
000178  bf00              NOP      
;;;334    		break;
00017a  e009              B        |L14.400|
                  |L14.380|
;;;335    	case UART_DATABIT_6:
;;;336    		tmp |= UART_LCR_WLEN6;
00017c  f0460601          ORR      r6,r6,#1
;;;337    		break;
000180  e006              B        |L14.400|
                  |L14.386|
;;;338    	case UART_DATABIT_7:
;;;339    		tmp |= UART_LCR_WLEN7;
000182  f0460602          ORR      r6,r6,#2
;;;340    		break;
000186  e003              B        |L14.400|
                  |L14.392|
;;;341    	case UART_DATABIT_8:
000188  bf00              NOP      
                  |L14.394|
;;;342    	default:
;;;343    		tmp |= UART_LCR_WLEN8;
00018a  f0460603          ORR      r6,r6,#3
;;;344    		break;
00018e  bf00              NOP      
                  |L14.400|
000190  bf00              NOP                            ;334
;;;345    	}
;;;346    
;;;347    	if (UART_ConfigStruct->Parity == UART_PARITY_NONE)
000192  7928              LDRB     r0,[r5,#4]
000194  b1c0              CBZ      r0,|L14.456|
;;;348    	{
;;;349    		// Do nothing...
;;;350    	}
;;;351    	else
;;;352    	{
;;;353    		tmp |= UART_LCR_PARITY_EN;
000196  f0460608          ORR      r6,r6,#8
;;;354    		switch (UART_ConfigStruct->Parity)
00019a  7928              LDRB     r0,[r5,#4]
00019c  2801              CMP      r0,#1
00019e  d006              BEQ      |L14.430|
0001a0  2802              CMP      r0,#2
0001a2  d006              BEQ      |L14.434|
0001a4  2803              CMP      r0,#3
0001a6  d007              BEQ      |L14.440|
0001a8  2804              CMP      r0,#4
0001aa  d10b              BNE      |L14.452|
0001ac  e007              B        |L14.446|
                  |L14.430|
;;;355    		{
;;;356    		case UART_PARITY_ODD:
;;;357    			tmp |= UART_LCR_PARITY_ODD;
0001ae  bf00              NOP      
;;;358    			break;
0001b0  e009              B        |L14.454|
                  |L14.434|
;;;359    
;;;360    		case UART_PARITY_EVEN:
;;;361    			tmp |= UART_LCR_PARITY_EVEN;
0001b2  f0460610          ORR      r6,r6,#0x10
;;;362    			break;
0001b6  e006              B        |L14.454|
                  |L14.440|
;;;363    
;;;364    		case UART_PARITY_SP_1:
;;;365    			tmp |= UART_LCR_PARITY_F_1;
0001b8  f0460620          ORR      r6,r6,#0x20
;;;366    			break;
0001bc  e003              B        |L14.454|
                  |L14.446|
;;;367    
;;;368    		case UART_PARITY_SP_0:
;;;369    			tmp |= UART_LCR_PARITY_F_0;
0001be  f0460630          ORR      r6,r6,#0x30
;;;370    			break;
0001c2  e000              B        |L14.454|
                  |L14.452|
;;;371    		default:
;;;372    			break;
0001c4  bf00              NOP      
                  |L14.454|
0001c6  bf00              NOP                            ;358
                  |L14.456|
;;;373    		}
;;;374    	}
;;;375    
;;;376    	switch (UART_ConfigStruct->Stopbits){
0001c8  79a8              LDRB     r0,[r5,#6]
0001ca  b128              CBZ      r0,|L14.472|
0001cc  2801              CMP      r0,#1
0001ce  d102              BNE      |L14.470|
;;;377    	case UART_STOPBIT_2:
;;;378    		tmp |= UART_LCR_STOPBIT_SEL;
0001d0  f0460604          ORR      r6,r6,#4
;;;379    		break;
0001d4  e001              B        |L14.474|
                  |L14.470|
;;;380    	case UART_STOPBIT_1:
0001d6  bf00              NOP      
                  |L14.472|
;;;381    	default:
;;;382    		// Do no thing
;;;383    		break;
0001d8  bf00              NOP      
                  |L14.474|
0001da  bf00              NOP                            ;379
;;;384    	}
;;;385    
;;;386    
;;;387    	// Write back to LCR, configure FIFO and Disable Tx
;;;388    	if (((LPC_UART1_TypeDef *)UARTx) ==  LPC_UART1)
0001dc  4804              LDR      r0,|L14.496|
0001de  4284              CMP      r4,r0
0001e0  d101              BNE      |L14.486|
;;;389    	{
;;;390    		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
0001e2  7326              STRB     r6,[r4,#0xc]
0001e4  e000              B        |L14.488|
                  |L14.486|
;;;391    	}
;;;392    	else
;;;393    	{
;;;394    		UARTx->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
0001e6  7326              STRB     r6,[r4,#0xc]
                  |L14.488|
;;;395    	}
;;;396    }
0001e8  bd70              POP      {r4-r6,pc}
;;;397    
                          ENDP

0001ea  0000              DCW      0x0000
                  |L14.492|
                          DCD      0x4000c000
                  |L14.496|
                          DCD      0x40010000
                  |L14.500|
                          DCD      0x40098000
                  |L14.504|
                          DCD      0x4009c000
                  |L14.508|
0001fc  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000200  44726976
000204  6572735c
000208  736f7572
00020c  63655c6c
000210  70633137
000214  78785f75
000218  6172742e
00021c  6300    
00021e  00                DCB      0
00021f  00                DCB      0

                          AREA ||i.UART_IntConfig||, CODE, READONLY, ALIGN=2

                  UART_IntConfig PROC
;;;684     *********************************************************************/
;;;685    void UART_IntConfig(LPC_UART_TypeDef *UARTx, UART_INT_Type UARTIntCfg, FunctionalState NewState)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;686    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;687    	uint32_t tmp;
;;;688    
;;;689    	CHECK_PARAM(PARAM_UARTx(UARTx));
00000a  483c              LDR      r0,|L15.252|
00000c  4284              CMP      r4,r0
00000e  d008              BEQ      |L15.34|
000010  483b              LDR      r0,|L15.256|
000012  4284              CMP      r4,r0
000014  d005              BEQ      |L15.34|
000016  483b              LDR      r0,|L15.260|
000018  4284              CMP      r4,r0
00001a  d002              BEQ      |L15.34|
00001c  483a              LDR      r0,|L15.264|
00001e  4284              CMP      r4,r0
000020  d100              BNE      |L15.36|
                  |L15.34|
000022  e004              B        |L15.46|
                  |L15.36|
000024  f24021b1          MOV      r1,#0x2b1
000028  a038              ADR      r0,|L15.268|
00002a  f7fffffe          BL       check_failed
                  |L15.46|
;;;690    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
00002e  b10f              CBZ      r7,|L15.52|
000030  2f01              CMP      r7,#1
000032  d100              BNE      |L15.54|
                  |L15.52|
000034  e004              B        |L15.64|
                  |L15.54|
000036  f24021b2          MOV      r1,#0x2b2
00003a  a034              ADR      r0,|L15.268|
00003c  f7fffffe          BL       check_failed
                  |L15.64|
;;;691    
;;;692    	switch(UARTIntCfg){
000040  2d07              CMP      r5,#7
000042  d215              BCS      |L15.112|
000044  e8dff005          TBB      [pc,r5]
000048  0406080a          DCB      0x04,0x06,0x08,0x0a
00004c  0c0e1100          DCB      0x0c,0x0e,0x11,0x00
;;;693    		case UART_INTCFG_RBR:
;;;694    			tmp = UART_IER_RBRINT_EN;
000050  2601              MOVS     r6,#1
;;;695    			break;
000052  e00d              B        |L15.112|
;;;696    		case UART_INTCFG_THRE:
;;;697    			tmp = UART_IER_THREINT_EN;
000054  2602              MOVS     r6,#2
;;;698    			break;
000056  e00b              B        |L15.112|
;;;699    		case UART_INTCFG_RLS:
;;;700    			tmp = UART_IER_RLSINT_EN;
000058  2604              MOVS     r6,#4
;;;701    			break;
00005a  e009              B        |L15.112|
;;;702    		case UART1_INTCFG_MS:
;;;703    			tmp = UART1_IER_MSINT_EN;
00005c  2608              MOVS     r6,#8
;;;704    			break;
00005e  e007              B        |L15.112|
;;;705    		case UART1_INTCFG_CTS:
;;;706    			tmp = UART1_IER_CTSINT_EN;
000060  2680              MOVS     r6,#0x80
;;;707    			break;
000062  e005              B        |L15.112|
;;;708    		case UART_INTCFG_ABEO:
;;;709    			tmp = UART_IER_ABEOINT_EN;
000064  f44f7680          MOV      r6,#0x100
;;;710    			break;
000068  e002              B        |L15.112|
;;;711    		case UART_INTCFG_ABTO:
;;;712    			tmp = UART_IER_ABTOINT_EN;
00006a  f44f7600          MOV      r6,#0x200
;;;713    			break;
00006e  bf00              NOP      
                  |L15.112|
000070  bf00              NOP                            ;695
;;;714    	}
;;;715    
;;;716    	if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
000072  4823              LDR      r0,|L15.256|
000074  4284              CMP      r4,r0
000076  d113              BNE      |L15.160|
;;;717    	{
;;;718    		CHECK_PARAM((PARAM_UART_INTCFG(UARTIntCfg)) || (PARAM_UART1_INTCFG(UARTIntCfg)));
000078  b15d              CBZ      r5,|L15.146|
00007a  2d01              CMP      r5,#1
00007c  d009              BEQ      |L15.146|
00007e  2d02              CMP      r5,#2
000080  d007              BEQ      |L15.146|
000082  2d05              CMP      r5,#5
000084  d005              BEQ      |L15.146|
000086  2d06              CMP      r5,#6
000088  d003              BEQ      |L15.146|
00008a  2d03              CMP      r5,#3
00008c  d001              BEQ      |L15.146|
00008e  2d04              CMP      r5,#4
000090  d100              BNE      |L15.148|
                  |L15.146|
000092  e014              B        |L15.190|
                  |L15.148|
000094  f24021ce          MOV      r1,#0x2ce
000098  a01c              ADR      r0,|L15.268|
00009a  f7fffffe          BL       check_failed
00009e  e00e              B        |L15.190|
                  |L15.160|
;;;719    	}
;;;720    	else
;;;721    	{
;;;722    		CHECK_PARAM(PARAM_UART_INTCFG(UARTIntCfg));
0000a0  b13d              CBZ      r5,|L15.178|
0000a2  2d01              CMP      r5,#1
0000a4  d005              BEQ      |L15.178|
0000a6  2d02              CMP      r5,#2
0000a8  d003              BEQ      |L15.178|
0000aa  2d05              CMP      r5,#5
0000ac  d001              BEQ      |L15.178|
0000ae  2d06              CMP      r5,#6
0000b0  d100              BNE      |L15.180|
                  |L15.178|
0000b2  e004              B        |L15.190|
                  |L15.180|
0000b4  f24021d2          MOV      r1,#0x2d2
0000b8  a014              ADR      r0,|L15.268|
0000ba  f7fffffe          BL       check_failed
                  |L15.190|
;;;723    	}
;;;724    
;;;725    	if (NewState == ENABLE)
0000be  2f01              CMP      r7,#1
0000c0  d10a              BNE      |L15.216|
;;;726    	{
;;;727    		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
0000c2  480f              LDR      r0,|L15.256|
0000c4  4284              CMP      r4,r0
0000c6  d103              BNE      |L15.208|
;;;728    		{
;;;729    			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
0000c8  6860              LDR      r0,[r4,#4]
0000ca  4330              ORRS     r0,r0,r6
0000cc  6060              STR      r0,[r4,#4]
0000ce  e013              B        |L15.248|
                  |L15.208|
;;;730    		}
;;;731    		else
;;;732    		{
;;;733    			UARTx->/*DLIER.*/IER |= tmp;
0000d0  6860              LDR      r0,[r4,#4]
0000d2  4330              ORRS     r0,r0,r6
0000d4  6060              STR      r0,[r4,#4]
0000d6  e00f              B        |L15.248|
                  |L15.216|
;;;734    		}
;;;735    	}
;;;736    	else
;;;737    	{
;;;738    		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
0000d8  4809              LDR      r0,|L15.256|
0000da  4284              CMP      r4,r0
0000dc  d106              BNE      |L15.236|
;;;739    		{
;;;740    			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
0000de  6860              LDR      r0,[r4,#4]
0000e0  f240318f          MOV      r1,#0x38f
0000e4  43b1              BICS     r1,r1,r6
0000e6  4008              ANDS     r0,r0,r1
0000e8  6060              STR      r0,[r4,#4]
0000ea  e005              B        |L15.248|
                  |L15.236|
;;;741    		}
;;;742    		else
;;;743    		{
;;;744    			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
0000ec  6860              LDR      r0,[r4,#4]
0000ee  f2403107          MOV      r1,#0x307
0000f2  43b1              BICS     r1,r1,r6
0000f4  4008              ANDS     r0,r0,r1
0000f6  6060              STR      r0,[r4,#4]
                  |L15.248|
;;;745    		}
;;;746    	}
;;;747    }
0000f8  e8bd81f0          POP      {r4-r8,pc}
;;;748    
                          ENDP

                  |L15.252|
                          DCD      0x4000c000
                  |L15.256|
                          DCD      0x40010000
                  |L15.260|
                          DCD      0x40098000
                  |L15.264|
                          DCD      0x4009c000
                  |L15.268|
00010c  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000110  44726976
000114  6572735c
000118  736f7572
00011c  63655c6c
000120  70633137
000124  78785f75
000128  6172742e
00012c  6300    
00012e  00                DCB      0
00012f  00                DCB      0

                          AREA ||i.UART_IrDACmd||, CODE, READONLY, ALIGN=2

                  UART_IrDACmd PROC
;;;1071    **********************************************************************/
;;;1072   void UART_IrDACmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;1073   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1074   	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
000006  4811              LDR      r0,|L16.76|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L16.14|
00000c  e004              B        |L16.24|
                  |L16.14|
00000e  f2404132          MOV      r1,#0x432
000012  a00f              ADR      r0,|L16.80|
000014  f7fffffe          BL       check_failed
                  |L16.24|
;;;1075   	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
000018  b10d              CBZ      r5,|L16.30|
00001a  2d01              CMP      r5,#1
00001c  d100              BNE      |L16.32|
                  |L16.30|
00001e  e004              B        |L16.42|
                  |L16.32|
000020  f2404133          MOV      r1,#0x433
000024  a00a              ADR      r0,|L16.80|
000026  f7fffffe          BL       check_failed
                  |L16.42|
;;;1076   
;;;1077   	if (NewState == ENABLE)
00002a  2d01              CMP      r5,#1
00002c  d106              BNE      |L16.60|
;;;1078   	{
;;;1079   		UARTx->ICR |= UART_ICR_IRDAEN;
00002e  f8940024          LDRB     r0,[r4,#0x24]
000032  f0400001          ORR      r0,r0,#1
000036  f8840024          STRB     r0,[r4,#0x24]
00003a  e005              B        |L16.72|
                  |L16.60|
;;;1080   	}
;;;1081   	else
;;;1082   	{
;;;1083   		UARTx->ICR &= (~UART_ICR_IRDAEN) & UART_ICR_BITMASK;
00003c  f8940024          LDRB     r0,[r4,#0x24]
000040  f000003e          AND      r0,r0,#0x3e
000044  f8840024          STRB     r0,[r4,#0x24]
                  |L16.72|
;;;1084   	}
;;;1085   }
000048  bd70              POP      {r4-r6,pc}
;;;1086   
                          ENDP

00004a  0000              DCW      0x0000
                  |L16.76|
                          DCD      0x4009c000
                  |L16.80|
000050  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000054  44726976
000058  6572735c
00005c  736f7572
000060  63655c6c
000064  70633137
000068  78785f75
00006c  6172742e
000070  6300    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.UART_IrDAInvtInputCmd||, CODE, READONLY, ALIGN=2

                  UART_IrDAInvtInputCmd PROC
;;;1047    **********************************************************************/
;;;1048   void UART_IrDAInvtInputCmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;1049   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1050   	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
000006  4811              LDR      r0,|L17.76|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L17.14|
00000c  e004              B        |L17.24|
                  |L17.14|
00000e  f240411a          MOV      r1,#0x41a
000012  a00f              ADR      r0,|L17.80|
000014  f7fffffe          BL       check_failed
                  |L17.24|
;;;1051   	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
000018  b10d              CBZ      r5,|L17.30|
00001a  2d01              CMP      r5,#1
00001c  d100              BNE      |L17.32|
                  |L17.30|
00001e  e004              B        |L17.42|
                  |L17.32|
000020  f240411b          MOV      r1,#0x41b
000024  a00a              ADR      r0,|L17.80|
000026  f7fffffe          BL       check_failed
                  |L17.42|
;;;1052   
;;;1053   	if (NewState == ENABLE)
00002a  2d01              CMP      r5,#1
00002c  d106              BNE      |L17.60|
;;;1054   	{
;;;1055   		UARTx->ICR |= UART_ICR_IRDAINV;
00002e  f8940024          LDRB     r0,[r4,#0x24]
000032  f0400002          ORR      r0,r0,#2
000036  f8840024          STRB     r0,[r4,#0x24]
00003a  e006              B        |L17.74|
                  |L17.60|
;;;1056   	}
;;;1057   	else if (NewState == DISABLE)
00003c  b92d              CBNZ     r5,|L17.74|
;;;1058   	{
;;;1059   		UARTx->ICR &= (~UART_ICR_IRDAINV) & UART_ICR_BITMASK;
00003e  f8940024          LDRB     r0,[r4,#0x24]
000042  f000003d          AND      r0,r0,#0x3d
000046  f8840024          STRB     r0,[r4,#0x24]
                  |L17.74|
;;;1060   	}
;;;1061   }
00004a  bd70              POP      {r4-r6,pc}
;;;1062   
                          ENDP

                  |L17.76|
                          DCD      0x4009c000
                  |L17.80|
000050  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000054  44726976
000058  6572735c
00005c  736f7572
000060  63655c6c
000064  70633137
000068  78785f75
00006c  6172742e
000070  6300    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.UART_IrDAPulseDivConfig||, CODE, READONLY, ALIGN=2

                  UART_IrDAPulseDivConfig PROC
;;;1103    **********************************************************************/
;;;1104   void UART_IrDAPulseDivConfig(LPC_UART_TypeDef *UARTx, UART_IrDA_PULSE_Type PulseDiv)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1105   {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;1106   	uint32_t tmp, tmp1;
;;;1107   	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
000008  4816              LDR      r0,|L18.100|
00000a  4285              CMP      r5,r0
00000c  d100              BNE      |L18.16|
00000e  e004              B        |L18.26|
                  |L18.16|
000010  f2404153          MOV      r1,#0x453
000014  a014              ADR      r0,|L18.104|
000016  f7fffffe          BL       check_failed
                  |L18.26|
;;;1108   	CHECK_PARAM(PARAM_UART_IrDA_PULSEDIV(PulseDiv));
00001a  b16c              CBZ      r4,|L18.56|
00001c  2c01              CMP      r4,#1
00001e  d00b              BEQ      |L18.56|
000020  2c02              CMP      r4,#2
000022  d009              BEQ      |L18.56|
000024  2c03              CMP      r4,#3
000026  d007              BEQ      |L18.56|
000028  2c04              CMP      r4,#4
00002a  d005              BEQ      |L18.56|
00002c  2c05              CMP      r4,#5
00002e  d003              BEQ      |L18.56|
000030  2c06              CMP      r4,#6
000032  d001              BEQ      |L18.56|
000034  2c07              CMP      r4,#7
000036  d100              BNE      |L18.58|
                  |L18.56|
000038  e004              B        |L18.68|
                  |L18.58|
00003a  f2404154          MOV      r1,#0x454
00003e  a00a              ADR      r0,|L18.104|
000040  f7fffffe          BL       check_failed
                  |L18.68|
;;;1109   
;;;1110   	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
000044  0760              LSLS     r0,r4,#29
000046  0e87              LSRS     r7,r0,#26
;;;1111   	tmp = UARTx->ICR & (~UART_ICR_PULSEDIV(7));
000048  f8950024          LDRB     r0,[r5,#0x24]
00004c  f0200638          BIC      r6,r0,#0x38
;;;1112   	tmp |= tmp1 | UART_ICR_FIXPULSE_EN;
000050  f0470004          ORR      r0,r7,#4
000054  4306              ORRS     r6,r6,r0
;;;1113   	UARTx->ICR = tmp & UART_ICR_BITMASK;
000056  f006003f          AND      r0,r6,#0x3f
00005a  f8850024          STRB     r0,[r5,#0x24]
;;;1114   }
00005e  e8bd81f0          POP      {r4-r8,pc}
;;;1115   
                          ENDP

000062  0000              DCW      0x0000
                  |L18.100|
                          DCD      0x4009c000
                  |L18.104|
000068  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
00006c  44726976
000070  6572735c
000074  736f7572
000078  63655c6c
00007c  70633137
000080  78785f75
000084  6172742e
000088  6300    
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.UART_RS485Config||, CODE, READONLY, ALIGN=2

                  UART_RS485Config PROC
;;;1237    **********************************************************************/
;;;1238   void UART_RS485Config(LPC_UART1_TypeDef *UARTx, UART1_RS485_CTRLCFG_Type *RS485ConfigStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;1239   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1240   	uint32_t tmp;
;;;1241   
;;;1242   	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
000006  4845              LDR      r0,|L19.284|
000008  4286              CMP      r6,r0
00000a  d100              BNE      |L19.14|
00000c  e004              B        |L19.24|
                  |L19.14|
00000e  f24041da          MOV      r1,#0x4da
000012  a043              ADR      r0,|L19.288|
000014  f7fffffe          BL       check_failed
                  |L19.24|
;;;1243   	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->AutoAddrDetect_State));
000018  78a0              LDRB     r0,[r4,#2]
00001a  b110              CBZ      r0,|L19.34|
00001c  78a0              LDRB     r0,[r4,#2]
00001e  2801              CMP      r0,#1
000020  d100              BNE      |L19.36|
                  |L19.34|
000022  e004              B        |L19.46|
                  |L19.36|
000024  f24041db          MOV      r1,#0x4db
000028  a03d              ADR      r0,|L19.288|
00002a  f7fffffe          BL       check_failed
                  |L19.46|
;;;1244   	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->AutoDirCtrl_State));
00002e  78e0              LDRB     r0,[r4,#3]
000030  b110              CBZ      r0,|L19.56|
000032  78e0              LDRB     r0,[r4,#3]
000034  2801              CMP      r0,#1
000036  d100              BNE      |L19.58|
                  |L19.56|
000038  e004              B        |L19.68|
                  |L19.58|
00003a  f24041dc          MOV      r1,#0x4dc
00003e  a038              ADR      r0,|L19.288|
000040  f7fffffe          BL       check_failed
                  |L19.68|
;;;1245   	CHECK_PARAM(PARAM_UART1_RS485_CFG_DELAYVALUE(RS485ConfigStruct->DelayValue));
000044  79e0              LDRB     r0,[r4,#7]
000046  28ff              CMP      r0,#0xff
000048  da00              BGE      |L19.76|
00004a  e004              B        |L19.86|
                  |L19.76|
00004c  f24041dd          MOV      r1,#0x4dd
000050  a033              ADR      r0,|L19.288|
000052  f7fffffe          BL       check_failed
                  |L19.86|
;;;1246   	CHECK_PARAM(PARAM_SETSTATE(RS485ConfigStruct->DirCtrlPol_Level));
000056  7960              LDRB     r0,[r4,#5]
000058  b110              CBZ      r0,|L19.96|
00005a  7960              LDRB     r0,[r4,#5]
00005c  2801              CMP      r0,#1
00005e  d100              BNE      |L19.98|
                  |L19.96|
000060  e004              B        |L19.108|
                  |L19.98|
000062  f24041de          MOV      r1,#0x4de
000066  a02e              ADR      r0,|L19.288|
000068  f7fffffe          BL       check_failed
                  |L19.108|
;;;1247   	CHECK_PARAM(PARAM_UART_RS485_DIRCTRL_PIN(RS485ConfigStruct->DirCtrlPin));
00006c  7920              LDRB     r0,[r4,#4]
00006e  b110              CBZ      r0,|L19.118|
000070  7920              LDRB     r0,[r4,#4]
000072  2801              CMP      r0,#1
000074  d100              BNE      |L19.120|
                  |L19.118|
000076  e004              B        |L19.130|
                  |L19.120|
000078  f24041df          MOV      r1,#0x4df
00007c  a028              ADR      r0,|L19.288|
00007e  f7fffffe          BL       check_failed
                  |L19.130|
;;;1248   	CHECK_PARAM(PARAM_UART1_RS485_CFG_MATCHADDRVALUE(RS485ConfigStruct->MatchAddrValue));
000082  79a0              LDRB     r0,[r4,#6]
000084  28ff              CMP      r0,#0xff
000086  da00              BGE      |L19.138|
000088  e004              B        |L19.148|
                  |L19.138|
00008a  f44f619c          MOV      r1,#0x4e0
00008e  a024              ADR      r0,|L19.288|
000090  f7fffffe          BL       check_failed
                  |L19.148|
;;;1249   	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->NormalMultiDropMode_State));
000094  7820              LDRB     r0,[r4,#0]
000096  b110              CBZ      r0,|L19.158|
000098  7820              LDRB     r0,[r4,#0]
00009a  2801              CMP      r0,#1
00009c  d100              BNE      |L19.160|
                  |L19.158|
00009e  e004              B        |L19.170|
                  |L19.160|
0000a0  f24041e1          MOV      r1,#0x4e1
0000a4  a01e              ADR      r0,|L19.288|
0000a6  f7fffffe          BL       check_failed
                  |L19.170|
;;;1250   	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->Rx_State));
0000aa  7860              LDRB     r0,[r4,#1]
0000ac  b110              CBZ      r0,|L19.180|
0000ae  7860              LDRB     r0,[r4,#1]
0000b0  2801              CMP      r0,#1
0000b2  d100              BNE      |L19.182|
                  |L19.180|
0000b4  e004              B        |L19.192|
                  |L19.182|
0000b6  f24041e2          MOV      r1,#0x4e2
0000ba  a019              ADR      r0,|L19.288|
0000bc  f7fffffe          BL       check_failed
                  |L19.192|
;;;1251   
;;;1252   	tmp = 0;
0000c0  2500              MOVS     r5,#0
;;;1253   	// If Auto Direction Control is enabled -  This function is used in Master mode
;;;1254   	if (RS485ConfigStruct->AutoDirCtrl_State == ENABLE)
0000c2  78e0              LDRB     r0,[r4,#3]
0000c4  2801              CMP      r0,#1
0000c6  d10e              BNE      |L19.230|
;;;1255   	{
;;;1256   		tmp |= UART1_RS485CTRL_DCTRL_EN;
0000c8  f0450510          ORR      r5,r5,#0x10
;;;1257   
;;;1258   		// Set polar
;;;1259   		if (RS485ConfigStruct->DirCtrlPol_Level == SET)
0000cc  7960              LDRB     r0,[r4,#5]
0000ce  2801              CMP      r0,#1
0000d0  d101              BNE      |L19.214|
;;;1260   		{
;;;1261   			tmp |= UART1_RS485CTRL_OINV_1;
0000d2  f0450520          ORR      r5,r5,#0x20
                  |L19.214|
;;;1262   		}
;;;1263   
;;;1264   		// Set pin according to
;;;1265   		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
0000d6  7920              LDRB     r0,[r4,#4]
0000d8  2801              CMP      r0,#1
0000da  d101              BNE      |L19.224|
;;;1266   		{
;;;1267   			tmp |= UART1_RS485CTRL_SEL_DTR;
0000dc  f0450508          ORR      r5,r5,#8
                  |L19.224|
;;;1268   		}
;;;1269   
;;;1270   		// Fill delay time
;;;1271   		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
0000e0  79e0              LDRB     r0,[r4,#7]
0000e2  f8860054          STRB     r0,[r6,#0x54]
                  |L19.230|
;;;1272   	}
;;;1273   
;;;1274   	// MultiDrop mode is enable
;;;1275   	if (RS485ConfigStruct->NormalMultiDropMode_State == ENABLE)
0000e6  7820              LDRB     r0,[r4,#0]
0000e8  2801              CMP      r0,#1
0000ea  d101              BNE      |L19.240|
;;;1276   	{
;;;1277   		tmp |= UART1_RS485CTRL_NMM_EN;
0000ec  f0450501          ORR      r5,r5,#1
                  |L19.240|
;;;1278   	}
;;;1279   
;;;1280   	// Auto Address Detect function
;;;1281   	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
0000f0  78a0              LDRB     r0,[r4,#2]
0000f2  2801              CMP      r0,#1
0000f4  d104              BNE      |L19.256|
;;;1282   	{
;;;1283   		tmp |= UART1_RS485CTRL_AADEN;
0000f6  f0450504          ORR      r5,r5,#4
;;;1284   		// Fill Match Address
;;;1285   		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
0000fa  79a0              LDRB     r0,[r4,#6]
0000fc  f8860050          STRB     r0,[r6,#0x50]
                  |L19.256|
;;;1286   	}
;;;1287   
;;;1288   
;;;1289   	// Receiver is disable
;;;1290   	if (RS485ConfigStruct->Rx_State == DISABLE)
000100  7860              LDRB     r0,[r4,#1]
000102  b908              CBNZ     r0,|L19.264|
;;;1291   	{
;;;1292   		tmp |= UART1_RS485CTRL_RX_DIS;
000104  f0450502          ORR      r5,r5,#2
                  |L19.264|
;;;1293   	}
;;;1294   
;;;1295   	// write back to RS485 control register
;;;1296   	UARTx->RS485CTRL = tmp & UART1_RS485CTRL_BITMASK;
000108  f005003f          AND      r0,r5,#0x3f
00010c  f886004c          STRB     r0,[r6,#0x4c]
;;;1297   
;;;1298   	// Enable Parity function and leave parity in stick '0' parity as default
;;;1299   	UARTx->LCR |= (UART_LCR_PARITY_F_0 | UART_LCR_PARITY_EN);
000110  7b30              LDRB     r0,[r6,#0xc]
000112  f0400038          ORR      r0,r0,#0x38
000116  7330              STRB     r0,[r6,#0xc]
;;;1300   }
000118  bd70              POP      {r4-r6,pc}
;;;1301   
                          ENDP

00011a  0000              DCW      0x0000
                  |L19.284|
                          DCD      0x40010000
                  |L19.288|
000120  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000124  44726976
000128  6572735c
00012c  736f7572
000130  63655c6c
000134  70633137
000138  78785f75
00013c  6172742e
000140  6300    
000142  00                DCB      0
000143  00                DCB      0

                          AREA ||i.UART_RS485ReceiverCmd||, CODE, READONLY, ALIGN=1

                  UART_RS485ReceiverCmd PROC
;;;1309    **********************************************************************/
;;;1310   void UART_RS485ReceiverCmd(LPC_UART1_TypeDef *UARTx, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;1311   {
;;;1312   	if (NewState == ENABLE){
000002  d106              BNE      |L20.18|
;;;1313   		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
000004  f890204c          LDRB     r2,[r0,#0x4c]
000008  f0220202          BIC      r2,r2,#2
00000c  f880204c          STRB     r2,[r0,#0x4c]
000010  e005              B        |L20.30|
                  |L20.18|
;;;1314   	} else {
;;;1315   		UARTx->RS485CTRL |= UART1_RS485CTRL_RX_DIS;
000012  f890204c          LDRB     r2,[r0,#0x4c]
000016  f0420202          ORR      r2,r2,#2
00001a  f880204c          STRB     r2,[r0,#0x4c]
                  |L20.30|
;;;1316   	}
;;;1317   }
00001e  4770              BX       lr
;;;1318   
                          ENDP


                          AREA ||i.UART_RS485Send||, CODE, READONLY, ALIGN=1

                  UART_RS485Send PROC
;;;1326    **********************************************************************/
;;;1327   uint32_t UART_RS485Send(LPC_UART1_TypeDef *UARTx, uint8_t *pDatFrm, \
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1328   					uint32_t size, uint8_t ParityStick)
;;;1329   {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
000008  4692              MOV      r10,r2
00000a  461f              MOV      r7,r3
;;;1330   	uint8_t tmp, save;
;;;1331   	uint32_t cnt;
;;;1332   
;;;1333   	if (ParityStick){
00000c  b1a7              CBZ      r7,|L21.56|
;;;1334   		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
00000e  7b25              LDRB     r5,[r4,#0xc]
000010  46a8              MOV      r8,r5
;;;1335   		tmp &= ~(UART_LCR_PARITY_EVEN);
000012  f0280810          BIC      r8,r8,#0x10
;;;1336   		UARTx->LCR = tmp;
000016  f884800c          STRB     r8,[r4,#0xc]
;;;1337   		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
00001a  2301              MOVS     r3,#1
00001c  4652              MOV      r2,r10
00001e  4649              MOV      r1,r9
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       UART_Send
000026  4606              MOV      r6,r0
;;;1338   		while (!(UARTx->LSR & UART_LSR_TEMT));
000028  bf00              NOP      
                  |L21.42|
00002a  7d20              LDRB     r0,[r4,#0x14]
00002c  f0000040          AND      r0,r0,#0x40
000030  2800              CMP      r0,#0
000032  d0fa              BEQ      |L21.42|
;;;1339   		UARTx->LCR = save;
000034  7325              STRB     r5,[r4,#0xc]
000036  e00c              B        |L21.82|
                  |L21.56|
;;;1340   	} else {
;;;1341   		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
000038  2301              MOVS     r3,#1
00003a  4652              MOV      r2,r10
00003c  4649              MOV      r1,r9
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       UART_Send
000044  4606              MOV      r6,r0
;;;1342   		while (!(UARTx->LSR & UART_LSR_TEMT));
000046  bf00              NOP      
                  |L21.72|
000048  7d20              LDRB     r0,[r4,#0x14]
00004a  f0000040          AND      r0,r0,#0x40
00004e  2800              CMP      r0,#0
000050  d0fa              BEQ      |L21.72|
                  |L21.82|
;;;1343   	}
;;;1344   	return cnt;
000052  4630              MOV      r0,r6
;;;1345   }
000054  e8bd87f0          POP      {r4-r10,pc}
;;;1346   
                          ENDP


                          AREA ||i.UART_RS485SendData||, CODE, READONLY, ALIGN=1

                  UART_RS485SendData PROC
;;;1364    **********************************************************************/
;;;1365   uint32_t UART_RS485SendData(LPC_UART1_TypeDef *UARTx, uint8_t *pData, uint32_t size)
000000  b570              PUSH     {r4-r6,lr}
;;;1366   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1367   	return (UART_RS485Send(UARTx, pData, size, 0));
000008  2300              MOVS     r3,#0
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_RS485Send
;;;1368   }
000014  bd70              POP      {r4-r6,pc}
;;;1369   
                          ENDP


                          AREA ||i.UART_RS485SendSlvAddr||, CODE, READONLY, ALIGN=1

                  UART_RS485SendSlvAddr PROC
;;;1352    **********************************************************************/
;;;1353   void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;1354   {
000002  4604              MOV      r4,r0
;;;1355   	UART_RS485Send(UARTx, &SlvAddr, 1, 1);
000004  2301              MOVS     r3,#1
000006  461a              MOV      r2,r3
000008  a901              ADD      r1,sp,#4
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       UART_RS485Send
;;;1356   }
000010  bd1c              POP      {r2-r4,pc}
;;;1357   
                          ENDP


                          AREA ||i.UART_Receive||, CODE, READONLY, ALIGN=1

                  UART_Receive PROC
;;;596     **********************************************************************/
;;;597    uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, \
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;598    		uint32_t buflen, TRANSFER_BLOCK_Type flag)
;;;599    {
000004  4607              MOV      r7,r0
000006  4689              MOV      r9,r1
000008  4692              MOV      r10,r2
00000a  469b              MOV      r11,r3
;;;600    	uint32_t bToRecv, bRecv, timeOut;
;;;601    	uint8_t *pChar = rxbuf;
00000c  464e              MOV      r6,r9
;;;602    
;;;603    	bToRecv = buflen;
00000e  4655              MOV      r5,r10
;;;604    
;;;605    	// Blocking mode
;;;606    	if (flag == BLOCKING) {
000010  f1bb0f01          CMP      r11,#1
000014  d11e              BNE      |L24.84|
;;;607    		bRecv = 0;
000016  2400              MOVS     r4,#0
;;;608    		while (bToRecv){
000018  e019              B        |L24.78|
                  |L24.26|
;;;609    			timeOut = UART_BLOCKING_TIMEOUT;
00001a  f04f38ff          MOV      r8,#0xffffffff
;;;610    			while (!(UARTx->LSR & UART_LSR_RDR)){
00001e  e005              B        |L24.44|
                  |L24.32|
;;;611    				if (timeOut == 0) break;
000020  f1b80f00          CMP      r8,#0
000024  d100              BNE      |L24.40|
000026  e006              B        |L24.54|
                  |L24.40|
;;;612    				timeOut--;
000028  f1a80801          SUB      r8,r8,#1
                  |L24.44|
00002c  7d38              LDRB     r0,[r7,#0x14]         ;610
00002e  f0000001          AND      r0,r0,#1              ;610
000032  2800              CMP      r0,#0                 ;610
000034  d0f4              BEQ      |L24.32|
                  |L24.54|
000036  bf00              NOP                            ;611
;;;613    			}
;;;614    			// Time out!
;;;615    			if(timeOut == 0) break;
000038  f1b80f00          CMP      r8,#0
00003c  d100              BNE      |L24.64|
00003e  e008              B        |L24.82|
                  |L24.64|
;;;616    			// Get data from the buffer
;;;617    			(*pChar++) = UART_ReceiveByte(UARTx);
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       UART_ReceiveByte
000046  f8060b01          STRB     r0,[r6],#1
;;;618    			bToRecv--;
00004a  1e6d              SUBS     r5,r5,#1
;;;619    			bRecv++;
00004c  1c64              ADDS     r4,r4,#1
                  |L24.78|
00004e  2d00              CMP      r5,#0                 ;608
000050  d1e3              BNE      |L24.26|
                  |L24.82|
000052  e010              B        |L24.118|
                  |L24.84|
;;;620    		}
;;;621    	}
;;;622    	// None blocking mode
;;;623    	else {
;;;624    		bRecv = 0;
000054  2400              MOVS     r4,#0
;;;625    		while (bToRecv) {
000056  e00b              B        |L24.112|
                  |L24.88|
;;;626    			if (!(UARTx->LSR & UART_LSR_RDR)) {
000058  7d38              LDRB     r0,[r7,#0x14]
00005a  f0000001          AND      r0,r0,#1
00005e  b900              CBNZ     r0,|L24.98|
;;;627    				break;
000060  e008              B        |L24.116|
                  |L24.98|
;;;628    			} else {
;;;629    				(*pChar++) = UART_ReceiveByte(UARTx);
000062  4638              MOV      r0,r7
000064  f7fffffe          BL       UART_ReceiveByte
000068  f8060b01          STRB     r0,[r6],#1
;;;630    				bRecv++;
00006c  1c64              ADDS     r4,r4,#1
;;;631    				bToRecv--;
00006e  1e6d              SUBS     r5,r5,#1
                  |L24.112|
000070  2d00              CMP      r5,#0                 ;625
000072  d1f1              BNE      |L24.88|
                  |L24.116|
000074  bf00              NOP                            ;627
                  |L24.118|
;;;632    			}
;;;633    		}
;;;634    	}
;;;635    	return bRecv;
000076  4620              MOV      r0,r4
;;;636    }
000078  e8bd9ff0          POP      {r4-r12,pc}
;;;637    
                          ENDP


                          AREA ||i.UART_ReceiveByte||, CODE, READONLY, ALIGN=2

                  UART_ReceiveByte PROC
;;;501     **********************************************************************/
;;;502    uint8_t UART_ReceiveByte(LPC_UART_TypeDef* UARTx)
000000  b510              PUSH     {r4,lr}
;;;503    {
000002  4604              MOV      r4,r0
;;;504    	CHECK_PARAM(PARAM_UARTx(UARTx));
000004  480c              LDR      r0,|L25.56|
000006  4284              CMP      r4,r0
000008  d008              BEQ      |L25.28|
00000a  480c              LDR      r0,|L25.60|
00000c  4284              CMP      r4,r0
00000e  d005              BEQ      |L25.28|
000010  480b              LDR      r0,|L25.64|
000012  4284              CMP      r4,r0
000014  d002              BEQ      |L25.28|
000016  480b              LDR      r0,|L25.68|
000018  4284              CMP      r4,r0
00001a  d100              BNE      |L25.30|
                  |L25.28|
00001c  e004              B        |L25.40|
                  |L25.30|
00001e  f44f71fc          MOV      r1,#0x1f8
000022  a009              ADR      r0,|L25.72|
000024  f7fffffe          BL       check_failed
                  |L25.40|
;;;505    
;;;506    	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
000028  4804              LDR      r0,|L25.60|
00002a  4284              CMP      r4,r0
00002c  d101              BNE      |L25.50|
;;;507    	{
;;;508    		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
00002e  7820              LDRB     r0,[r4,#0]
                  |L25.48|
;;;509    	}
;;;510    	else
;;;511    	{
;;;512    		return (UARTx->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
;;;513    	}
;;;514    }
000030  bd10              POP      {r4,pc}
                  |L25.50|
000032  7820              LDRB     r0,[r4,#0]            ;512
000034  e7fc              B        |L25.48|
;;;515    
                          ENDP

000036  0000              DCW      0x0000
                  |L25.56|
                          DCD      0x4000c000
                  |L25.60|
                          DCD      0x40010000
                  |L25.64|
                          DCD      0x40098000
                  |L25.68|
                          DCD      0x4009c000
                  |L25.72|
000048  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
00004c  44726976
000050  6572735c
000054  736f7572
000058  63655c6c
00005c  70633137
000060  78785f75
000064  6172742e
000068  6300    
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.UART_Send||, CODE, READONLY, ALIGN=1

                  UART_Send PROC
;;;531     **********************************************************************/
;;;532    uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;533    		uint32_t buflen, TRANSFER_BLOCK_Type flag)
;;;534    {
000004  4680              MOV      r8,r0
000006  468a              MOV      r10,r1
000008  4693              MOV      r11,r2
;;;535    	uint32_t bToSend, bSent, timeOut, fifo_cnt;
;;;536    	uint8_t *pChar = txbuf;
00000a  4657              MOV      r7,r10
;;;537    
;;;538    	bToSend = buflen;
00000c  465c              MOV      r4,r11
;;;539    
;;;540    	// blocking mode
;;;541    	if (flag == BLOCKING) {
00000e  9803              LDR      r0,[sp,#0xc]
000010  2801              CMP      r0,#1
000012  d125              BNE      |L26.96|
;;;542    		bSent = 0;
000014  2500              MOVS     r5,#0
;;;543    		while (bToSend){
000016  e020              B        |L26.90|
                  |L26.24|
;;;544    			timeOut = UART_BLOCKING_TIMEOUT;
000018  f04f39ff          MOV      r9,#0xffffffff
;;;545    			// Wait for THR empty with timeout
;;;546    			while (!(UARTx->LSR & UART_LSR_THRE)) {
00001c  e005              B        |L26.42|
                  |L26.30|
;;;547    				if (timeOut == 0) break;
00001e  f1b90f00          CMP      r9,#0
000022  d100              BNE      |L26.38|
000024  e007              B        |L26.54|
                  |L26.38|
;;;548    				timeOut--;
000026  f1a90901          SUB      r9,r9,#1
                  |L26.42|
00002a  f8980014          LDRB     r0,[r8,#0x14]         ;546
00002e  f0000020          AND      r0,r0,#0x20           ;546
000032  2800              CMP      r0,#0                 ;546
000034  d0f3              BEQ      |L26.30|
                  |L26.54|
000036  bf00              NOP                            ;547
;;;549    			}
;;;550    			// Time out!
;;;551    			if(timeOut == 0) break;
000038  f1b90f00          CMP      r9,#0
00003c  d100              BNE      |L26.64|
00003e  e00e              B        |L26.94|
                  |L26.64|
;;;552    			fifo_cnt = UART_TX_FIFO_SIZE;
000040  2610              MOVS     r6,#0x10
;;;553    			while (fifo_cnt && bToSend){
000042  e007              B        |L26.84|
                  |L26.68|
;;;554    				UART_SendByte(UARTx, (*pChar++));
000044  f8171b01          LDRB     r1,[r7],#1
000048  4640              MOV      r0,r8
00004a  f7fffffe          BL       UART_SendByte
;;;555    				fifo_cnt--;
00004e  1e76              SUBS     r6,r6,#1
;;;556    				bToSend--;
000050  1e64              SUBS     r4,r4,#1
;;;557    				bSent++;
000052  1c6d              ADDS     r5,r5,#1
                  |L26.84|
000054  b10e              CBZ      r6,|L26.90|
000056  2c00              CMP      r4,#0                 ;553
000058  d1f4              BNE      |L26.68|
                  |L26.90|
00005a  2c00              CMP      r4,#0                 ;543
00005c  d1dc              BNE      |L26.24|
                  |L26.94|
00005e  e017              B        |L26.144|
                  |L26.96|
;;;558    			}
;;;559    		}
;;;560    	}
;;;561    	// None blocking mode
;;;562    	else {
;;;563    		bSent = 0;
000060  2500              MOVS     r5,#0
;;;564    		while (bToSend) {
000062  e012              B        |L26.138|
                  |L26.100|
;;;565    			if (!(UARTx->LSR & UART_LSR_THRE)){
000064  f8980014          LDRB     r0,[r8,#0x14]
000068  f0000020          AND      r0,r0,#0x20
00006c  b900              CBNZ     r0,|L26.112|
;;;566    				break;
00006e  e00e              B        |L26.142|
                  |L26.112|
;;;567    			}
;;;568    			fifo_cnt = UART_TX_FIFO_SIZE;
000070  2610              MOVS     r6,#0x10
;;;569    			while (fifo_cnt && bToSend) {
000072  e007              B        |L26.132|
                  |L26.116|
;;;570    				UART_SendByte(UARTx, (*pChar++));
000074  f8171b01          LDRB     r1,[r7],#1
000078  4640              MOV      r0,r8
00007a  f7fffffe          BL       UART_SendByte
;;;571    				bToSend--;
00007e  1e64              SUBS     r4,r4,#1
;;;572    				fifo_cnt--;
000080  1e76              SUBS     r6,r6,#1
;;;573    				bSent++;
000082  1c6d              ADDS     r5,r5,#1
                  |L26.132|
000084  b10e              CBZ      r6,|L26.138|
000086  2c00              CMP      r4,#0                 ;569
000088  d1f4              BNE      |L26.116|
                  |L26.138|
00008a  2c00              CMP      r4,#0                 ;564
00008c  d1ea              BNE      |L26.100|
                  |L26.142|
00008e  bf00              NOP                            ;566
                  |L26.144|
;;;574    			}
;;;575    		}
;;;576    	}
;;;577    	return bSent;
000090  4628              MOV      r0,r5
;;;578    }
000092  b004              ADD      sp,sp,#0x10
000094  e8bd9ff0          POP      {r4-r12,pc}
;;;579    
                          ENDP


                          AREA ||i.UART_SendByte||, CODE, READONLY, ALIGN=2

                  UART_SendByte PROC
;;;476     **********************************************************************/
;;;477    void UART_SendByte(LPC_UART_TypeDef* UARTx, uint8_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;478    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;479    	CHECK_PARAM(PARAM_UARTx(UARTx));
000006  480c              LDR      r0,|L27.56|
000008  4284              CMP      r4,r0
00000a  d008              BEQ      |L27.30|
00000c  480b              LDR      r0,|L27.60|
00000e  4284              CMP      r4,r0
000010  d005              BEQ      |L27.30|
000012  480b              LDR      r0,|L27.64|
000014  4284              CMP      r4,r0
000016  d002              BEQ      |L27.30|
000018  480a              LDR      r0,|L27.68|
00001a  4284              CMP      r4,r0
00001c  d100              BNE      |L27.32|
                  |L27.30|
00001e  e004              B        |L27.42|
                  |L27.32|
000020  f24011df          MOV      r1,#0x1df
000024  a008              ADR      r0,|L27.72|
000026  f7fffffe          BL       check_failed
                  |L27.42|
;;;480    
;;;481    	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
00002a  4804              LDR      r0,|L27.60|
00002c  4284              CMP      r4,r0
00002e  d101              BNE      |L27.52|
;;;482    	{
;;;483    		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
000030  7025              STRB     r5,[r4,#0]
000032  e000              B        |L27.54|
                  |L27.52|
;;;484    	}
;;;485    	else
;;;486    	{
;;;487    		UARTx->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
000034  7025              STRB     r5,[r4,#0]
                  |L27.54|
;;;488    	}
;;;489    
;;;490    }
000036  bd70              POP      {r4-r6,pc}
;;;491    
                          ENDP

                  |L27.56|
                          DCD      0x4000c000
                  |L27.60|
                          DCD      0x40010000
                  |L27.64|
                          DCD      0x40098000
                  |L27.68|
                          DCD      0x4009c000
                  |L27.72|
000048  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
00004c  44726976
000050  6572735c
000054  736f7572
000058  63655c6c
00005c  70633137
000060  78785f75
000064  6172742e
000068  6300    
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.UART_TxCmd||, CODE, READONLY, ALIGN=2

                  UART_TxCmd PROC
;;;1005    **********************************************************************/
;;;1006   void UART_TxCmd(LPC_UART_TypeDef *UARTx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;1007   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1008   	CHECK_PARAM(PARAM_UARTx(UARTx));
000006  481e              LDR      r0,|L28.128|
000008  4284              CMP      r4,r0
00000a  d008              BEQ      |L28.30|
00000c  481d              LDR      r0,|L28.132|
00000e  4284              CMP      r4,r0
000010  d005              BEQ      |L28.30|
000012  481d              LDR      r0,|L28.136|
000014  4284              CMP      r4,r0
000016  d002              BEQ      |L28.30|
000018  481c              LDR      r0,|L28.140|
00001a  4284              CMP      r4,r0
00001c  d100              BNE      |L28.32|
                  |L28.30|
00001e  e004              B        |L28.42|
                  |L28.32|
000020  f44f717c          MOV      r1,#0x3f0
000024  a01a              ADR      r0,|L28.144|
000026  f7fffffe          BL       check_failed
                  |L28.42|
;;;1009   	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
00002a  b10d              CBZ      r5,|L28.48|
00002c  2d01              CMP      r5,#1
00002e  d100              BNE      |L28.50|
                  |L28.48|
000030  e004              B        |L28.60|
                  |L28.50|
000032  f24031f1          MOV      r1,#0x3f1
000036  a016              ADR      r0,|L28.144|
000038  f7fffffe          BL       check_failed
                  |L28.60|
;;;1010   
;;;1011   	if (NewState == ENABLE)
00003c  2d01              CMP      r5,#1
00003e  d110              BNE      |L28.98|
;;;1012   	{
;;;1013   		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
000040  4810              LDR      r0,|L28.132|
000042  4284              CMP      r4,r0
000044  d106              BNE      |L28.84|
;;;1014   		{
;;;1015   			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
000046  f8940030          LDRB     r0,[r4,#0x30]
00004a  f0400080          ORR      r0,r0,#0x80
00004e  f8840030          STRB     r0,[r4,#0x30]
000052  e014              B        |L28.126|
                  |L28.84|
;;;1016   		}
;;;1017   		else
;;;1018   		{
;;;1019   			UARTx->TER |= UART_TER_TXEN;
000054  f8940030          LDRB     r0,[r4,#0x30]
000058  f0400080          ORR      r0,r0,#0x80
00005c  f8840030          STRB     r0,[r4,#0x30]
000060  e00d              B        |L28.126|
                  |L28.98|
;;;1020   		}
;;;1021   	}
;;;1022   	else
;;;1023   	{
;;;1024   		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
000062  4808              LDR      r0,|L28.132|
000064  4284              CMP      r4,r0
000066  d105              BNE      |L28.116|
;;;1025   		{
;;;1026   			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
000068  f8940030          LDRB     r0,[r4,#0x30]
00006c  2000              MOVS     r0,#0
00006e  f8840030          STRB     r0,[r4,#0x30]
000072  e004              B        |L28.126|
                  |L28.116|
;;;1027   		}
;;;1028   		else
;;;1029   		{
;;;1030   			UARTx->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
000074  f8940030          LDRB     r0,[r4,#0x30]
000078  2000              MOVS     r0,#0
00007a  f8840030          STRB     r0,[r4,#0x30]
                  |L28.126|
;;;1031   		}
;;;1032   	}
;;;1033   }
00007e  bd70              POP      {r4-r6,pc}
;;;1034   
                          ENDP

                  |L28.128|
                          DCD      0x4000c000
                  |L28.132|
                          DCD      0x40010000
                  |L28.136|
                          DCD      0x40098000
                  |L28.140|
                          DCD      0x4009c000
                  |L28.144|
000090  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_uart.c",0
000094  44726976
000098  6572735c
00009c  736f7572
0000a0  63655c6c
0000a4  70633137
0000a8  78785f75
0000ac  6172742e
0000b0  6300    
0000b2  00                DCB      0
0000b3  00                DCB      0

                          AREA ||i.uart_set_divisors||, CODE, READONLY, ALIGN=2

                  uart_set_divisors PROC
;;;71      **********************************************************************/
;;;72     static Status uart_set_divisors(LPC_UART_TypeDef *UARTx, uint32_t baudrate)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;73     {
000004  b08b              SUB      sp,sp,#0x2c
000006  4604              MOV      r4,r0
000008  4689              MOV      r9,r1
;;;74     	Status errorStatus = ERROR;
00000a  2000              MOVS     r0,#0
00000c  9009              STR      r0,[sp,#0x24]
;;;75     
;;;76     	uint32_t uClk;
;;;77     	uint32_t d, m, bestd, bestm, tmp;
;;;78     	uint64_t best_divisor, divisor;
;;;79     	uint32_t current_error, best_error;
;;;80     	uint32_t recalcbaud;
;;;81     
;;;82     	/* get UART block clock */
;;;83     	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
00000e  4870              LDR      r0,|L29.464|
000010  4284              CMP      r4,r0
000012  d104              BNE      |L29.30|
;;;84     	{
;;;85     		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
000014  2006              MOVS     r0,#6
000016  f7fffffe          BL       CLKPWR_GetPCLK
00001a  4607              MOV      r7,r0
00001c  e016              B        |L29.76|
                  |L29.30|
;;;86     	}
;;;87     	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
00001e  486d              LDR      r0,|L29.468|
000020  4284              CMP      r4,r0
000022  d104              BNE      |L29.46|
;;;88     	{
;;;89     		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
000024  2008              MOVS     r0,#8
000026  f7fffffe          BL       CLKPWR_GetPCLK
00002a  4607              MOV      r7,r0
00002c  e00e              B        |L29.76|
                  |L29.46|
;;;90     	}
;;;91     	else if (UARTx == LPC_UART2)
00002e  486a              LDR      r0,|L29.472|
000030  4284              CMP      r4,r0
000032  d104              BNE      |L29.62|
;;;92     	{
;;;93     		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
000034  2030              MOVS     r0,#0x30
000036  f7fffffe          BL       CLKPWR_GetPCLK
00003a  4607              MOV      r7,r0
00003c  e006              B        |L29.76|
                  |L29.62|
;;;94     	}
;;;95     	else if (UARTx == LPC_UART3)
00003e  4867              LDR      r0,|L29.476|
000040  4284              CMP      r4,r0
000042  d103              BNE      |L29.76|
;;;96     	{
;;;97     		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
000044  2032              MOVS     r0,#0x32
000046  f7fffffe          BL       CLKPWR_GetPCLK
00004a  4607              MOV      r7,r0
                  |L29.76|
;;;98     	}
;;;99     
;;;100    
;;;101    	/* In the Uart IP block, baud rate is calculated using FDR and DLL-DLM registers
;;;102    	* The formula is :
;;;103    	* BaudRate= uClk * (mulFracDiv/(mulFracDiv+dividerAddFracDiv) / (16 * (DLL)
;;;104    	* It involves floating point calculations. That's the reason the formulae are adjusted with
;;;105    	* Multiply and divide method.*/
;;;106    	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
;;;107    	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
;;;108    	best_error = 0xFFFFFFFF; /* Worst case */
00004c  f04f3bff          MOV      r11,#0xffffffff
;;;109    	bestd = 0;
000050  2000              MOVS     r0,#0
000052  9007              STR      r0,[sp,#0x1c]
;;;110    	bestm = 0;
000054  9006              STR      r0,[sp,#0x18]
;;;111    	best_divisor = 0;
000056  2500              MOVS     r5,#0
000058  462e              MOV      r6,r5
;;;112    	for (m = 1 ; m <= 15 ;m++)
00005a  f04f0801          MOV      r8,#1
00005e  e04d              B        |L29.252|
                  |L29.96|
;;;113    	{
;;;114    		for (d = 0 ; d < m ; d++)
000060  2000              MOVS     r0,#0
000062  9008              STR      r0,[sp,#0x20]
000064  e040              B        |L29.232|
                  |L29.102|
;;;115    		{
;;;116    		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
000066  9808              LDR      r0,[sp,#0x20]
000068  4440              ADD      r0,r0,r8
00006a  fb00fc09          MUL      r12,r0,r9
00006e  2000              MOVS     r0,#0
000070  0701              LSLS     r1,r0,#28
000072  ea411117          ORR      r1,r1,r7,LSR #4
000076  0738              LSLS     r0,r7,#28
000078  2200              MOVS     r2,#0
00007a  fba03e08          UMULL    r3,lr,r0,r8
00007e  fb01e108          MLA      r1,r1,r8,lr
000082  fb001002          MLA      r0,r0,r2,r1
000086  4662              MOV      r2,r12
000088  e9cd3000          STRD     r3,r0,[sp,#0]
00008c  2300              MOVS     r3,#0
00008e  e9dd0100          LDRD     r0,r1,[sp,#0]
000092  f7fffffe          BL       __aeabi_uldivmod
000096  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;117    		  current_error = divisor & 0xFFFFFFFF;
00009a  9804              LDR      r0,[sp,#0x10]
00009c  9003              STR      r0,[sp,#0xc]
;;;118    
;;;119    		  tmp = divisor>>32;
00009e  f8dda014          LDR      r10,[sp,#0x14]
;;;120    
;;;121    		  /* Adjust error */
;;;122    		  if(current_error > ((uint32_t)1<<31)){
0000a2  9803              LDR      r0,[sp,#0xc]
0000a4  f1b04f00          CMP      r0,#0x80000000
0000a8  d904              BLS      |L29.180|
;;;123    			current_error = -current_error;
0000aa  9803              LDR      r0,[sp,#0xc]
0000ac  4240              RSBS     r0,r0,#0
0000ae  9003              STR      r0,[sp,#0xc]
;;;124    			tmp++;
0000b0  f10a0a01          ADD      r10,r10,#1
                  |L29.180|
;;;125    			}
;;;126    
;;;127    		  if(tmp<1 || tmp>65536) /* Out of range */
0000b4  f1ba0f00          CMP      r10,#0
0000b8  d002              BEQ      |L29.192|
0000ba  f5ba3f80          CMP      r10,#0x10000
0000be  d900              BLS      |L29.194|
                  |L29.192|
;;;128    		  continue;
0000c0  e00f              B        |L29.226|
                  |L29.194|
;;;129    
;;;130    		  if( current_error < best_error){
0000c2  9803              LDR      r0,[sp,#0xc]
0000c4  4558              CMP      r0,r11
0000c6  d20b              BCS      |L29.224|
;;;131    			best_error = current_error;
0000c8  f8ddb00c          LDR      r11,[sp,#0xc]
;;;132    			best_divisor = tmp;
0000cc  2600              MOVS     r6,#0
0000ce  4655              MOV      r5,r10
;;;133    			bestd = d;
0000d0  9808              LDR      r0,[sp,#0x20]
0000d2  9007              STR      r0,[sp,#0x1c]
;;;134    			bestm = m;
0000d4  f8cd8018          STR      r8,[sp,#0x18]
;;;135    			if(best_error == 0) break;
0000d8  f1bb0f00          CMP      r11,#0
0000dc  d100              BNE      |L29.224|
0000de  e006              B        |L29.238|
                  |L29.224|
0000e0  bf00              NOP                            ;128
                  |L29.226|
0000e2  9808              LDR      r0,[sp,#0x20]         ;114
0000e4  1c40              ADDS     r0,r0,#1              ;114
0000e6  9008              STR      r0,[sp,#0x20]         ;114
                  |L29.232|
0000e8  9808              LDR      r0,[sp,#0x20]         ;114
0000ea  4540              CMP      r0,r8                 ;114
0000ec  d3bb              BCC      |L29.102|
                  |L29.238|
0000ee  bf00              NOP      
;;;136    			}
;;;137    		} /* end of inner for loop */
;;;138    
;;;139    		if (best_error == 0)
0000f0  f1bb0f00          CMP      r11,#0
0000f4  d100              BNE      |L29.248|
;;;140    		  break;
0000f6  e004              B        |L29.258|
                  |L29.248|
0000f8  f1080801          ADD      r8,r8,#1              ;112
                  |L29.252|
0000fc  f1b80f0f          CMP      r8,#0xf               ;112
000100  d9ae              BLS      |L29.96|
                  |L29.258|
000102  bf00              NOP      
;;;141    	} /* end of outer for loop  */
;;;142    
;;;143    	if(best_divisor == 0) return ERROR; /* can not find best match */
000104  2100              MOVS     r1,#0
000106  ea850001          EOR      r0,r5,r1
00010a  4071              EORS     r1,r1,r6
00010c  4308              ORRS     r0,r0,r1
00010e  d102              BNE      |L29.278|
                  |L29.272|
;;;144    
;;;145    	recalcbaud = (uClk>>4) * bestm/(best_divisor * (bestm + bestd));
;;;146    
;;;147    	/* reuse best_error to evaluate baud error*/
;;;148    	if(baudrate>recalcbaud) best_error = baudrate - recalcbaud;
;;;149    	else best_error = recalcbaud -baudrate;
;;;150    
;;;151    	best_error = best_error * 100 / baudrate;
;;;152    
;;;153    	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
;;;154    		{
;;;155    			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
;;;156    			{
;;;157    				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
;;;158    				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
;;;159    				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
;;;160    				/* Then reset DLAB bit */
;;;161    				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
;;;162    				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
;;;163    						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
;;;164    			}
;;;165    			else
;;;166    			{
;;;167    				UARTx->LCR |= UART_LCR_DLAB_EN;
;;;168    				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
;;;169    				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
;;;170    				/* Then reset DLAB bit */
;;;171    				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
;;;172    				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
;;;173    						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
;;;174    			}
;;;175    			errorStatus = SUCCESS;
;;;176    		}
;;;177    
;;;178    		return errorStatus;
;;;179    }
000110  b00b              ADD      sp,sp,#0x2c
000112  e8bd8ff0          POP      {r4-r11,pc}
                  |L29.278|
000116  0938              LSRS     r0,r7,#4              ;145
000118  9906              LDR      r1,[sp,#0x18]         ;145
00011a  fb00fc01          MUL      r12,r0,r1             ;145
00011e  4608              MOV      r0,r1                 ;145
000120  9907              LDR      r1,[sp,#0x1c]         ;145
000122  4408              ADD      r0,r0,r1              ;145
000124  2100              MOVS     r1,#0                 ;145
000126  fba02305          UMULL    r2,r3,r0,r5           ;145
00012a  fb013105          MLA      r1,r1,r5,r3           ;145
00012e  fb001006          MLA      r0,r0,r6,r1           ;145
000132  4603              MOV      r3,r0                 ;145
000134  e9cd2000          STRD     r2,r0,[sp,#0]         ;145
000138  4660              MOV      r0,r12                ;145
00013a  2100              MOVS     r1,#0                 ;145
00013c  f7fffffe          BL       __aeabi_uldivmod
000140  9002              STR      r0,[sp,#8]            ;145
000142  9802              LDR      r0,[sp,#8]            ;148
000144  4581              CMP      r9,r0                 ;148
000146  d903              BLS      |L29.336|
000148  9802              LDR      r0,[sp,#8]            ;148
00014a  eba90b00          SUB      r11,r9,r0             ;148
00014e  e002              B        |L29.342|
                  |L29.336|
000150  9802              LDR      r0,[sp,#8]            ;149
000152  eba00b09          SUB      r11,r0,r9             ;149
                  |L29.342|
000156  2064              MOVS     r0,#0x64              ;151
000158  fb0bf000          MUL      r0,r11,r0             ;151
00015c  fbb0fbf9          UDIV     r11,r0,r9             ;151
000160  f1bb0f03          CMP      r11,#3                ;153
000164  d232              BCS      |L29.460|
000166  481b              LDR      r0,|L29.468|
000168  4284              CMP      r4,r0                 ;155
00016a  d116              BNE      |L29.410|
00016c  7b20              LDRB     r0,[r4,#0xc]          ;157
00016e  f0400080          ORR      r0,r0,#0x80           ;157
000172  7320              STRB     r0,[r4,#0xc]          ;157
000174  0a28              LSRS     r0,r5,#8              ;158
000176  ea406006          ORR      r0,r0,r6,LSL #24      ;158
00017a  7120              STRB     r0,[r4,#4]            ;158
00017c  7025              STRB     r5,[r4,#0]            ;159
00017e  7b20              LDRB     r0,[r4,#0xc]          ;161
000180  f000007f          AND      r0,r0,#0x7f           ;161
000184  7320              STRB     r0,[r4,#0xc]          ;161
000186  21f0              MOVS     r1,#0xf0              ;162
000188  9806              LDR      r0,[sp,#0x18]         ;162
00018a  ea011000          AND      r0,r1,r0,LSL #4       ;162
00018e  9907              LDR      r1,[sp,#0x1c]         ;162
000190  f001010f          AND      r1,r1,#0xf            ;162
000194  4308              ORRS     r0,r0,r1              ;162
000196  62a0              STR      r0,[r4,#0x28]         ;162
000198  e016              B        |L29.456|
                  |L29.410|
00019a  7b20              LDRB     r0,[r4,#0xc]          ;167
00019c  f0400080          ORR      r0,r0,#0x80           ;167
0001a0  7320              STRB     r0,[r4,#0xc]          ;167
0001a2  0a28              LSRS     r0,r5,#8              ;168
0001a4  ea406006          ORR      r0,r0,r6,LSL #24      ;168
0001a8  7120              STRB     r0,[r4,#4]            ;168
0001aa  7025              STRB     r5,[r4,#0]            ;169
0001ac  7b20              LDRB     r0,[r4,#0xc]          ;171
0001ae  f000007f          AND      r0,r0,#0x7f           ;171
0001b2  7320              STRB     r0,[r4,#0xc]          ;171
0001b4  21f0              MOVS     r1,#0xf0              ;172
0001b6  9806              LDR      r0,[sp,#0x18]         ;172
0001b8  ea011000          AND      r0,r1,r0,LSL #4       ;172
0001bc  9907              LDR      r1,[sp,#0x1c]         ;172
0001be  f001010f          AND      r1,r1,#0xf            ;172
0001c2  4308              ORRS     r0,r0,r1              ;172
0001c4  f8840028          STRB     r0,[r4,#0x28]         ;172
                  |L29.456|
0001c8  2001              MOVS     r0,#1                 ;175
0001ca  9009              STR      r0,[sp,#0x24]         ;175
                  |L29.460|
0001cc  9809              LDR      r0,[sp,#0x24]         ;178
0001ce  e79f              B        |L29.272|
;;;180    
                          ENDP

                  |L29.464|
                          DCD      0x4000c000
                  |L29.468|
                          DCD      0x40010000
                  |L29.472|
                          DCD      0x40098000
                  |L29.476|
                          DCD      0x4009c000

;*** Start embedded assembler ***

#line 1 "Lib\\Drivers\\source\\lpc17xx_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_lpc17xx_uart_c_e5efacd7____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_lpc17xx_uart_c_e5efacd7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_lpc17xx_uart_c_e5efacd7____REVSH|
#line 144
|__asm___14_lpc17xx_uart_c_e5efacd7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
