; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\pulse.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\pulse.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\pulse.crf Lib\CLib__1_0_0_4\src\Pulse.c]
                          THUMB

                          AREA ||i.Pulse_Fsm||, CODE, READONLY, ALIGN=1

                  Pulse_Fsm PROC
;;;34     *******************************************************************************/
;;;35     void 		Pulse_Fsm(Pulse* p, PULSE_EVT event)
000000  b570              PUSH     {r4-r6,lr}
;;;36     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;37     	switch(p->state)
000006  6820              LDR      r0,[r4,#0]
000008  b120              CBZ      r0,|L1.20|
00000a  2801              CMP      r0,#1
00000c  d027              BEQ      |L1.94|
00000e  2802              CMP      r0,#2
000010  d156              BNE      |L1.192|
000012  e030              B        |L1.118|
                  |L1.20|
;;;38     	{
;;;39     		case Pulse_State_Pulse  :
;;;40     			
;;;41     				Bool_Toggle(&p->nivel);
000014  f1040018          ADD      r0,r4,#0x18
000018  f7fffffe          BL       Bool_Toggle
;;;42     			
;;;43     				if (p->nivel)
00001c  7e20              LDRB     r0,[r4,#0x18]
00001e  b138              CBZ      r0,|L1.48|
;;;44     				{
;;;45     						Timer_Init(&p->timer, 100);
000020  2164              MOVS     r1,#0x64
000022  1d20              ADDS     r0,r4,#4
000024  f7fffffe          BL       Timer_Init
;;;46     						Timer_Start(&p->timer);					
000028  1d20              ADDS     r0,r4,#4
00002a  f7fffffe          BL       Timer_Start
00002e  e007              B        |L1.64|
                  |L1.48|
;;;47     				}
;;;48     				else
;;;49     				{
;;;50     						Timer_Init(&p->timer, 300);
000030  f44f7196          MOV      r1,#0x12c
000034  1d20              ADDS     r0,r4,#4
000036  f7fffffe          BL       Timer_Init
;;;51     						Timer_Start(&p->timer);					
00003a  1d20              ADDS     r0,r4,#4
00003c  f7fffffe          BL       Timer_Start
                  |L1.64|
;;;52     				}
;;;53     			
;;;54     				if (p->setpoint)
000040  6920              LDR      r0,[r4,#0x10]
000042  b158              CBZ      r0,|L1.92|
;;;55     				{
;;;56     						p->state = Pulse_State_Break;
000044  2001              MOVS     r0,#1
000046  6020              STR      r0,[r4,#0]
;;;57     					
;;;58     						Timer_Init(&p->timer, PULSE_BREAK_TIME);
000048  f64011c4          MOV      r1,#0x9c4
00004c  1d20              ADDS     r0,r4,#4
00004e  f7fffffe          BL       Timer_Init
;;;59     						Timer_Start(&p->timer);					
000052  1d20              ADDS     r0,r4,#4
000054  f7fffffe          BL       Timer_Start
;;;60     						p->nivel = 0;
000058  2000              MOVS     r0,#0
00005a  7620              STRB     r0,[r4,#0x18]
                  |L1.92|
;;;61     				}
;;;62     		break; 
00005c  e031              B        |L1.194|
                  |L1.94|
;;;63     					
;;;64     			
;;;65     		case Pulse_State_Break  :
;;;66     			
;;;67     				p->state = Pulse_State_Count;
00005e  2002              MOVS     r0,#2
000060  6020              STR      r0,[r4,#0]
;;;68     		
;;;69     				p->count = p->setpoint;
000062  6920              LDR      r0,[r4,#0x10]
000064  6160              STR      r0,[r4,#0x14]
;;;70     				Timer_Init(&p->timer, 100);
000066  2164              MOVS     r1,#0x64
000068  1d20              ADDS     r0,r4,#4
00006a  f7fffffe          BL       Timer_Init
;;;71     				Timer_Start(&p->timer);		
00006e  1d20              ADDS     r0,r4,#4
000070  f7fffffe          BL       Timer_Start
;;;72     		
;;;73     		break; 
000074  e025              B        |L1.194|
                  |L1.118|
;;;74     				
;;;75     		
;;;76     		case Pulse_State_Count  :
;;;77     
;;;78     				Bool_Toggle(&p->nivel);
000076  f1040018          ADD      r0,r4,#0x18
00007a  f7fffffe          BL       Bool_Toggle
;;;79     
;;;80     				Timer_Init(&p->timer, 100);
00007e  2164              MOVS     r1,#0x64
000080  1d20              ADDS     r0,r4,#4
000082  f7fffffe          BL       Timer_Init
;;;81     				Timer_Start(&p->timer);		
000086  1d20              ADDS     r0,r4,#4
000088  f7fffffe          BL       Timer_Start
;;;82     
;;;83     				if (p->nivel)
00008c  7e20              LDRB     r0,[r4,#0x18]
00008e  b9b0              CBNZ     r0,|L1.190|
;;;84     				{
;;;85     
;;;86     				}	
;;;87     				else
;;;88     				{
;;;89     					if( p->setpoint == 0 )
000090  6920              LDR      r0,[r4,#0x10]
000092  b918              CBNZ     r0,|L1.156|
;;;90     					{
;;;91     						p->state = Pulse_State_Pulse ;
000094  2000              MOVS     r0,#0
000096  6020              STR      r0,[r4,#0]
;;;92     						
;;;93     						p->count = 0;
000098  6160              STR      r0,[r4,#0x14]
;;;94     						break;
00009a  e012              B        |L1.194|
                  |L1.156|
;;;95     					}
;;;96     					
;;;97     					
;;;98     					p->count--;
00009c  6960              LDR      r0,[r4,#0x14]
00009e  1e40              SUBS     r0,r0,#1
0000a0  6160              STR      r0,[r4,#0x14]
;;;99     					
;;;100    					if (!p->count)
0000a2  6960              LDR      r0,[r4,#0x14]
0000a4  b958              CBNZ     r0,|L1.190|
;;;101    					{
;;;102    						p->state = Pulse_State_Break;
0000a6  2001              MOVS     r0,#1
0000a8  6020              STR      r0,[r4,#0]
;;;103    						
;;;104    						Timer_Init(&p->timer, PULSE_BREAK_TIME);
0000aa  f64011c4          MOV      r1,#0x9c4
0000ae  1d20              ADDS     r0,r4,#4
0000b0  f7fffffe          BL       Timer_Init
;;;105    						Timer_Start(&p->timer);											
0000b4  1d20              ADDS     r0,r4,#4
0000b6  f7fffffe          BL       Timer_Start
;;;106    						p->nivel = 0;												
0000ba  2000              MOVS     r0,#0
0000bc  7620              STRB     r0,[r4,#0x18]
                  |L1.190|
;;;107    					}
;;;108    				}
;;;109    		break; 	
0000be  e000              B        |L1.194|
                  |L1.192|
;;;110    
;;;111    		default : 
;;;112    		break;
0000c0  bf00              NOP      
                  |L1.194|
0000c2  bf00              NOP                            ;62
;;;113    	}
;;;114    }
0000c4  bd70              POP      {r4-r6,pc}
;;;115    
                          ENDP


                          AREA ||i.Pulse_Get_Nivel||, CODE, READONLY, ALIGN=2

                  Pulse_Get_Nivel PROC
;;;148    *******************************************************************************/
;;;149    uint8_t Pulse_Get_Nivel(Pulse* p)
000000  b510              PUSH     {r4,lr}
;;;150    {
000002  4604              MOV      r4,r0
;;;151    	
;;;152    		Pulse_Sync();
000004  f7fffffe          BL       Pulse_Sync
;;;153    	
;;;154    		if (  Timer_Elapsed( &p->timer )  )				
000008  1d20              ADDS     r0,r4,#4
00000a  f7fffffe          BL       Timer_Elapsed
00000e  b118              CBZ      r0,|L2.24|
;;;155    						Pulse_Fsm(p, Pulse_Event_Clock);
000010  2100              MOVS     r1,#0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       Pulse_Fsm
                  |L2.24|
;;;156    	
;;;157    	
;;;158    		if (p->state == Pulse_State_Pulse)
000018  6820              LDR      r0,[r4,#0]
00001a  b910              CBNZ     r0,|L2.34|
;;;159    				return pulse_sync_Nivel;
00001c  4802              LDR      r0,|L2.40|
00001e  7800              LDRB     r0,[r0,#0]  ; pulse_sync_Nivel
                  |L2.32|
;;;160    		else
;;;161    				return p->nivel;
;;;162    }
000020  bd10              POP      {r4,pc}
                  |L2.34|
000022  7e20              LDRB     r0,[r4,#0x18]         ;161
000024  e7fc              B        |L2.32|
;;;163    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      pulse_sync_Nivel

                          AREA ||i.Pulse_Init||, CODE, READONLY, ALIGN=2

                  Pulse_Init PROC
;;;170    *******************************************************************************/
;;;171    void 		Pulse_Init(Pulse* p)
000000  b510              PUSH     {r4,lr}
;;;172    {
000002  4604              MOV      r4,r0
;;;173    		p->setpoint = 0;
000004  2000              MOVS     r0,#0
000006  6120              STR      r0,[r4,#0x10]
;;;174    		p->count = 0;
000008  6160              STR      r0,[r4,#0x14]
;;;175    		p->state = Pulse_State_Pulse;
00000a  6020              STR      r0,[r4,#0]
;;;176    	
;;;177    		Timer_Init(&p->timer, 100);
00000c  2164              MOVS     r1,#0x64
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       Timer_Init
;;;178    		Timer_Start(&p->timer);
000014  1d20              ADDS     r0,r4,#4
000016  f7fffffe          BL       Timer_Start
;;;179    	
;;;180    		Timer_Init(&pulse_syncronous_Timer, 300);
00001a  f44f7196          MOV      r1,#0x12c
00001e  4803              LDR      r0,|L3.44|
000020  f7fffffe          BL       Timer_Init
;;;181    		Timer_Start(&pulse_syncronous_Timer);	
000024  4801              LDR      r0,|L3.44|
000026  f7fffffe          BL       Timer_Start
;;;182    }
00002a  bd10              POP      {r4,pc}
;;;183    
                          ENDP

                  |L3.44|
                          DCD      pulse_syncronous_Timer

                          AREA ||i.Pulse_Set_Setpoint||, CODE, READONLY, ALIGN=1

                  Pulse_Set_Setpoint PROC
;;;21     *******************************************************************************/
;;;22     void 		Pulse_Set_Setpoint(Pulse* p, uint32_t setpoint)
000000  6101              STR      r1,[r0,#0x10]
;;;23     {
;;;24     		 p->setpoint = setpoint;
;;;25     }
000002  4770              BX       lr
;;;26     
                          ENDP


                          AREA ||i.Pulse_Sync||, CODE, READONLY, ALIGN=2

                  Pulse_Sync PROC
;;;122    *******************************************************************************/
;;;123    void 		Pulse_Sync(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125    		if( Timer_Elapsed( &pulse_syncronous_Timer ) )
000002  480b              LDR      r0,|L5.48|
000004  f7fffffe          BL       Timer_Elapsed
000008  b188              CBZ      r0,|L5.46|
;;;126    		{
;;;127    					Bool_Toggle(&pulse_sync_Nivel);
00000a  480a              LDR      r0,|L5.52|
00000c  f7fffffe          BL       Bool_Toggle
;;;128    				
;;;129    					if (pulse_sync_Nivel)
000010  4808              LDR      r0,|L5.52|
000012  7800              LDRB     r0,[r0,#0]  ; pulse_sync_Nivel
000014  b120              CBZ      r0,|L5.32|
;;;130    					{
;;;131    								Timer_Init(&pulse_syncronous_Timer, 50);
000016  2132              MOVS     r1,#0x32
000018  4805              LDR      r0,|L5.48|
00001a  f7fffffe          BL       Timer_Init
00001e  e003              B        |L5.40|
                  |L5.32|
;;;132    					}
;;;133    					else
;;;134    					{
;;;135    								Timer_Init(&pulse_syncronous_Timer, 200);
000020  21c8              MOVS     r1,#0xc8
000022  4803              LDR      r0,|L5.48|
000024  f7fffffe          BL       Timer_Init
                  |L5.40|
;;;136    					}
;;;137    					
;;;138    					Timer_Start(&pulse_syncronous_Timer);					
000028  4801              LDR      r0,|L5.48|
00002a  f7fffffe          BL       Timer_Start
                  |L5.46|
;;;139    		}
;;;140    }
00002e  bd10              POP      {r4,pc}
;;;141    
                          ENDP

                  |L5.48|
                          DCD      pulse_syncronous_Timer
                  |L5.52|
                          DCD      pulse_sync_Nivel

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pulse_syncronous_Timer
                          %        12

                          AREA ||.data||, DATA, ALIGN=0

                  pulse_sync_Nivel
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "Lib\\CLib__1_0_0_4\\src\\Pulse.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_Pulse_c_92214dcb____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_Pulse_c_92214dcb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_Pulse_c_92214dcb____REVSH|
#line 144
|__asm___7_Pulse_c_92214dcb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
