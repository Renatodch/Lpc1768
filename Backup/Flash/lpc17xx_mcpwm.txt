; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\lpc17xx_mcpwm.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_mcpwm.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\lpc17xx_mcpwm.crf Lib\Drivers\source\lpc17xx_mcpwm.c]
                          THUMB

                          AREA ||i.MCPWM_ACMode||, CODE, READONLY, ALIGN=1

                  MCPWM_ACMode PROC
;;;342     **********************************************************************/
;;;343    void MCPWM_ACMode(LPC_MCPWM_TypeDef *MCPWMx, uint32_t acMode)
000000  b119              CBZ      r1,|L1.10|
;;;344    {
;;;345    	if (acMode){
;;;346    		MCPWMx->MCCON_SET = MCPWM_CON_ACMODE;
000002  f04f4280          MOV      r2,#0x40000000
000006  6042              STR      r2,[r0,#4]
000008  e002              B        |L1.16|
                  |L1.10|
;;;347    	} else {
;;;348    		MCPWMx->MCCON_CLR = MCPWM_CON_ACMODE;
00000a  f04f4280          MOV      r2,#0x40000000
00000e  6082              STR      r2,[r0,#8]
                  |L1.16|
;;;349    	}
;;;350    }
000010  4770              BX       lr
;;;351    
                          ENDP


                          AREA ||i.MCPWM_ClearCapture||, CODE, READONLY, ALIGN=1

                  MCPWM_ClearCapture PROC
;;;222     **********************************************************************/
;;;223    void MCPWM_ClearCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t captureChannel)
000000  2902              CMP      r1,#2
;;;224    {
;;;225    	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(captureChannel);
000002  d802              BHI      |L2.10|
000004  2201              MOVS     r2,#1
000006  408a              LSLS     r2,r2,r1
000008  e000              B        |L2.12|
                  |L2.10|
00000a  2200              MOVS     r2,#0
                  |L2.12|
00000c  6742              STR      r2,[r0,#0x74]
;;;226    }
00000e  4770              BX       lr
;;;227    
                          ENDP


                          AREA ||i.MCPWM_ConfigCapture||, CODE, READONLY, ALIGN=1

                  MCPWM_ConfigCapture PROC
;;;183     **********************************************************************/
;;;184    void MCPWM_ConfigCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
000000  b510              PUSH     {r4,lr}
;;;185    						MCPWM_CAPTURE_CFG_Type *captureConfig)
;;;186    {
;;;187    	if (channelNum <= 2) {
000002  2902              CMP      r1,#2
000004  d87b              BHI      |L3.254|
;;;188    
;;;189    		if (captureConfig->captureFalling /* == ENABLE */) {
000006  6893              LDR      r3,[r2,#8]
000008  b193              CBZ      r3,|L3.48|
;;;190    			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_CAPMCI_FE(captureConfig->captureChannel, channelNum);
00000a  6813              LDR      r3,[r2,#0]
00000c  2b02              CMP      r3,#2
00000e  d80c              BHI      |L3.42|
000010  2902              CMP      r1,#2
000012  d80a              BHI      |L3.42|
000014  7813              LDRB     r3,[r2,#0]
000016  eb030343          ADD      r3,r3,r3,LSL #1
00001a  005b              LSLS     r3,r3,#1
00001c  eb030341          ADD      r3,r3,r1,LSL #1
000020  1c5b              ADDS     r3,r3,#1
000022  2401              MOVS     r4,#1
000024  fa04f303          LSL      r3,r4,r3
000028  e000              B        |L3.44|
                  |L3.42|
00002a  2300              MOVS     r3,#0
                  |L3.44|
00002c  6103              STR      r3,[r0,#0x10]
00002e  e011              B        |L3.84|
                  |L3.48|
;;;191    		} else {
;;;192    			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_CAPMCI_FE(captureConfig->captureChannel, channelNum);
000030  6813              LDR      r3,[r2,#0]
000032  2b02              CMP      r3,#2
000034  d80c              BHI      |L3.80|
000036  2902              CMP      r1,#2
000038  d80a              BHI      |L3.80|
00003a  7813              LDRB     r3,[r2,#0]
00003c  eb030343          ADD      r3,r3,r3,LSL #1
000040  005b              LSLS     r3,r3,#1
000042  eb030341          ADD      r3,r3,r1,LSL #1
000046  1c5b              ADDS     r3,r3,#1
000048  2401              MOVS     r4,#1
00004a  fa04f303          LSL      r3,r4,r3
00004e  e000              B        |L3.82|
                  |L3.80|
000050  2300              MOVS     r3,#0
                  |L3.82|
000052  6143              STR      r3,[r0,#0x14]
                  |L3.84|
;;;193    		}
;;;194    
;;;195    		if (captureConfig->captureRising /* == ENABLE */) {
000054  6853              LDR      r3,[r2,#4]
000056  b18b              CBZ      r3,|L3.124|
;;;196    			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_CAPMCI_RE(captureConfig->captureChannel, channelNum);
000058  6813              LDR      r3,[r2,#0]
00005a  2b02              CMP      r3,#2
00005c  d80b              BHI      |L3.118|
00005e  2902              CMP      r1,#2
000060  d809              BHI      |L3.118|
000062  7813              LDRB     r3,[r2,#0]
000064  eb030343          ADD      r3,r3,r3,LSL #1
000068  005b              LSLS     r3,r3,#1
00006a  eb030341          ADD      r3,r3,r1,LSL #1
00006e  2401              MOVS     r4,#1
000070  fa04f303          LSL      r3,r4,r3
000074  e000              B        |L3.120|
                  |L3.118|
000076  2300              MOVS     r3,#0
                  |L3.120|
000078  6103              STR      r3,[r0,#0x10]
00007a  e010              B        |L3.158|
                  |L3.124|
;;;197    		} else {
;;;198    			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_CAPMCI_RE(captureConfig->captureChannel, channelNum);
00007c  6813              LDR      r3,[r2,#0]
00007e  2b02              CMP      r3,#2
000080  d80b              BHI      |L3.154|
000082  2902              CMP      r1,#2
000084  d809              BHI      |L3.154|
000086  7813              LDRB     r3,[r2,#0]
000088  eb030343          ADD      r3,r3,r3,LSL #1
00008c  005b              LSLS     r3,r3,#1
00008e  eb030341          ADD      r3,r3,r1,LSL #1
000092  2401              MOVS     r4,#1
000094  fa04f303          LSL      r3,r4,r3
000098  e000              B        |L3.156|
                  |L3.154|
00009a  2300              MOVS     r3,#0
                  |L3.156|
00009c  6143              STR      r3,[r0,#0x14]
                  |L3.158|
;;;199    		}
;;;200    
;;;201    		if (captureConfig->timerReset /* == ENABLE */){
00009e  68d3              LDR      r3,[r2,#0xc]
0000a0  b15b              CBZ      r3,|L3.186|
;;;202    			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_RT(captureConfig->captureChannel);
0000a2  6813              LDR      r3,[r2,#0]
0000a4  2b02              CMP      r3,#2
0000a6  d805              BHI      |L3.180|
0000a8  7813              LDRB     r3,[r2,#0]
0000aa  3312              ADDS     r3,r3,#0x12
0000ac  2401              MOVS     r4,#1
0000ae  fa04f303          LSL      r3,r4,r3
0000b2  e000              B        |L3.182|
                  |L3.180|
0000b4  2300              MOVS     r3,#0
                  |L3.182|
0000b6  6103              STR      r3,[r0,#0x10]
0000b8  e00a              B        |L3.208|
                  |L3.186|
;;;203    		} else {
;;;204    			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_RT(captureConfig->captureChannel);
0000ba  6813              LDR      r3,[r2,#0]
0000bc  2b02              CMP      r3,#2
0000be  d805              BHI      |L3.204|
0000c0  7813              LDRB     r3,[r2,#0]
0000c2  3312              ADDS     r3,r3,#0x12
0000c4  2401              MOVS     r4,#1
0000c6  fa04f303          LSL      r3,r4,r3
0000ca  e000              B        |L3.206|
                  |L3.204|
0000cc  2300              MOVS     r3,#0
                  |L3.206|
0000ce  6143              STR      r3,[r0,#0x14]
                  |L3.208|
;;;205    		}
;;;206    
;;;207    		if (captureConfig->hnfEnable /* == ENABLE */){
0000d0  6913              LDR      r3,[r2,#0x10]
0000d2  b153              CBZ      r3,|L3.234|
;;;208    			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_HNFCAP(channelNum);
0000d4  2902              CMP      r1,#2
0000d6  d805              BHI      |L3.228|
0000d8  f1010315          ADD      r3,r1,#0x15
0000dc  2401              MOVS     r4,#1
0000de  fa04f303          LSL      r3,r4,r3
0000e2  e000              B        |L3.230|
                  |L3.228|
0000e4  2300              MOVS     r3,#0
                  |L3.230|
0000e6  6103              STR      r3,[r0,#0x10]
0000e8  e009              B        |L3.254|
                  |L3.234|
;;;209    		} else {
;;;210    			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_HNFCAP(channelNum);
0000ea  2902              CMP      r1,#2
0000ec  d805              BHI      |L3.250|
0000ee  f1010315          ADD      r3,r1,#0x15
0000f2  2401              MOVS     r4,#1
0000f4  fa04f303          LSL      r3,r4,r3
0000f8  e000              B        |L3.252|
                  |L3.250|
0000fa  2300              MOVS     r3,#0
                  |L3.252|
0000fc  6143              STR      r3,[r0,#0x14]
                  |L3.254|
;;;211    		}
;;;212    	}
;;;213    }
0000fe  bd10              POP      {r4,pc}
;;;214    
                          ENDP


                          AREA ||i.MCPWM_ConfigChannel||, CODE, READONLY, ALIGN=1

                  MCPWM_ConfigChannel PROC
;;;95      **********************************************************************/
;;;96     void MCPWM_ConfigChannel(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
000000  b530              PUSH     {r4,r5,lr}
;;;97     						MCPWM_CHANNEL_CFG_Type * channelSetup)
;;;98     {
;;;99     	if (channelNum <= 2) {
000002  2902              CMP      r1,#2
000004  d876              BHI      |L4.244|
;;;100    		if (channelNum == 0) {
000006  b931              CBNZ     r1,|L4.22|
;;;101    			MCPWMx->MCTIM0 = channelSetup->channelTimercounterValue;
000008  6953              LDR      r3,[r2,#0x14]
00000a  6183              STR      r3,[r0,#0x18]
;;;102    			MCPWMx->MCPER0 = channelSetup->channelPeriodValue;
00000c  6993              LDR      r3,[r2,#0x18]
00000e  6243              STR      r3,[r0,#0x24]
;;;103    			MCPWMx->MCPW0 = channelSetup->channelPulsewidthValue;
000010  69d3              LDR      r3,[r2,#0x1c]
000012  6303              STR      r3,[r0,#0x30]
000014  e012              B        |L4.60|
                  |L4.22|
;;;104    		} else if (channelNum == 1) {
000016  2901              CMP      r1,#1
000018  d106              BNE      |L4.40|
;;;105    			MCPWMx->MCTIM1 = channelSetup->channelTimercounterValue;
00001a  6953              LDR      r3,[r2,#0x14]
00001c  61c3              STR      r3,[r0,#0x1c]
;;;106    			MCPWMx->MCPER1 = channelSetup->channelPeriodValue;
00001e  6993              LDR      r3,[r2,#0x18]
000020  6283              STR      r3,[r0,#0x28]
;;;107    			MCPWMx->MCPW1 = channelSetup->channelPulsewidthValue;
000022  69d3              LDR      r3,[r2,#0x1c]
000024  6343              STR      r3,[r0,#0x34]
000026  e009              B        |L4.60|
                  |L4.40|
;;;108    		} else if (channelNum == 2) {
000028  2902              CMP      r1,#2
00002a  d106              BNE      |L4.58|
;;;109    			MCPWMx->MCTIM2 = channelSetup->channelTimercounterValue;
00002c  6953              LDR      r3,[r2,#0x14]
00002e  6203              STR      r3,[r0,#0x20]
;;;110    			MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
000030  6993              LDR      r3,[r2,#0x18]
000032  62c3              STR      r3,[r0,#0x2c]
;;;111    			MCPWMx->MCPW2 = channelSetup->channelPulsewidthValue;
000034  69d3              LDR      r3,[r2,#0x1c]
000036  6383              STR      r3,[r0,#0x38]
000038  e000              B        |L4.60|
                  |L4.58|
;;;112    		} else {
;;;113    			return;
;;;114    		}
;;;115    
;;;116    		if (channelSetup->channelType /* == MCPWM_CHANNEL_CENTER_MODE */){
;;;117    			MCPWMx->MCCON_SET = MCPWM_CON_CENTER(channelNum);
;;;118    		} else {
;;;119    			MCPWMx->MCCON_CLR = MCPWM_CON_CENTER(channelNum);
;;;120    		}
;;;121    
;;;122    		if (channelSetup->channelPolarity /* == MCPWM_CHANNEL_PASSIVE_HI */){
;;;123    			MCPWMx->MCCON_SET = MCPWM_CON_POLAR(channelNum);
;;;124    		} else {
;;;125    			MCPWMx->MCCON_CLR = MCPWM_CON_POLAR(channelNum);
;;;126    		}
;;;127    
;;;128    		if (channelSetup->channelDeadtimeEnable /* == ENABLE */){
;;;129    			MCPWMx->MCCON_SET = MCPWM_CON_DTE(channelNum);
;;;130    			MCPWMx->MCDEADTIME &= ~(MCPWM_DT(channelNum, 0x3FF));
;;;131    			MCPWMx->MCDEADTIME |= MCPWM_DT(channelNum, channelSetup->channelDeadtimeValue);
;;;132    		} else {
;;;133    			MCPWMx->MCCON_CLR = MCPWM_CON_DTE(channelNum);
;;;134    		}
;;;135    
;;;136    		if (channelSetup->channelUpdateEnable /* == ENABLE */){
;;;137    			MCPWMx->MCCON_CLR = MCPWM_CON_DISUP(channelNum);
;;;138    		} else {
;;;139    			MCPWMx->MCCON_SET = MCPWM_CON_DISUP(channelNum);
;;;140    		}
;;;141    	}
;;;142    }
00003a  bd30              POP      {r4,r5,pc}
                  |L4.60|
00003c  6813              LDR      r3,[r2,#0]            ;116
00003e  b14b              CBZ      r3,|L4.84|
000040  2902              CMP      r1,#2                 ;117
000042  d804              BHI      |L4.78|
000044  2301              MOVS     r3,#1                 ;117
000046  eb0304c1          ADD      r4,r3,r1,LSL #3       ;117
00004a  40a3              LSLS     r3,r3,r4              ;117
00004c  e000              B        |L4.80|
                  |L4.78|
00004e  2300              MOVS     r3,#0                 ;117
                  |L4.80|
000050  6043              STR      r3,[r0,#4]            ;117
000052  e008              B        |L4.102|
                  |L4.84|
000054  2902              CMP      r1,#2                 ;119
000056  d804              BHI      |L4.98|
000058  2301              MOVS     r3,#1                 ;119
00005a  eb0304c1          ADD      r4,r3,r1,LSL #3       ;119
00005e  40a3              LSLS     r3,r3,r4              ;119
000060  e000              B        |L4.100|
                  |L4.98|
000062  2300              MOVS     r3,#0                 ;119
                  |L4.100|
000064  6083              STR      r3,[r0,#8]            ;119
                  |L4.102|
000066  6853              LDR      r3,[r2,#4]            ;122
000068  b153              CBZ      r3,|L4.128|
00006a  2902              CMP      r1,#2                 ;123
00006c  d805              BHI      |L4.122|
00006e  2302              MOVS     r3,#2                 ;123
000070  eb0304c1          ADD      r4,r3,r1,LSL #3       ;123
000074  2301              MOVS     r3,#1                 ;123
000076  40a3              LSLS     r3,r3,r4              ;123
000078  e000              B        |L4.124|
                  |L4.122|
00007a  2300              MOVS     r3,#0                 ;123
                  |L4.124|
00007c  6043              STR      r3,[r0,#4]            ;123
00007e  e009              B        |L4.148|
                  |L4.128|
000080  2902              CMP      r1,#2                 ;125
000082  d805              BHI      |L4.144|
000084  2302              MOVS     r3,#2                 ;125
000086  eb0304c1          ADD      r4,r3,r1,LSL #3       ;125
00008a  2301              MOVS     r3,#1                 ;125
00008c  40a3              LSLS     r3,r3,r4              ;125
00008e  e000              B        |L4.146|
                  |L4.144|
000090  2300              MOVS     r3,#0                 ;125
                  |L4.146|
000092  6083              STR      r3,[r0,#8]            ;125
                  |L4.148|
000094  6893              LDR      r3,[r2,#8]            ;128
000096  b32b              CBZ      r3,|L4.228|
000098  2902              CMP      r1,#2                 ;129
00009a  d805              BHI      |L4.168|
00009c  2303              MOVS     r3,#3                 ;129
00009e  eb0304c1          ADD      r4,r3,r1,LSL #3       ;129
0000a2  2301              MOVS     r3,#1                 ;129
0000a4  40a3              LSLS     r3,r3,r4              ;129
0000a6  e000              B        |L4.170|
                  |L4.168|
0000a8  2300              MOVS     r3,#0                 ;129
                  |L4.170|
0000aa  6043              STR      r3,[r0,#4]            ;129
0000ac  6bc4              LDR      r4,[r0,#0x3c]         ;130
0000ae  2902              CMP      r1,#2                 ;130
0000b0  d806              BHI      |L4.192|
0000b2  eb010381          ADD      r3,r1,r1,LSL #2       ;130
0000b6  005d              LSLS     r5,r3,#1              ;130
0000b8  f24033ff          MOV      r3,#0x3ff             ;130
0000bc  40ab              LSLS     r3,r3,r5              ;130
0000be  e000              B        |L4.194|
                  |L4.192|
0000c0  2300              MOVS     r3,#0                 ;130
                  |L4.194|
0000c2  439c              BICS     r4,r4,r3              ;130
0000c4  63c4              STR      r4,[r0,#0x3c]         ;130
0000c6  2902              CMP      r1,#2                 ;131
0000c8  d807              BHI      |L4.218|
0000ca  8993              LDRH     r3,[r2,#0xc]          ;131
0000cc  f3c30309          UBFX     r3,r3,#0,#10          ;131
0000d0  eb010481          ADD      r4,r1,r1,LSL #2       ;131
0000d4  0064              LSLS     r4,r4,#1              ;131
0000d6  40a3              LSLS     r3,r3,r4              ;131
0000d8  e000              B        |L4.220|
                  |L4.218|
0000da  2300              MOVS     r3,#0                 ;131
                  |L4.220|
0000dc  6bc4              LDR      r4,[r0,#0x3c]         ;131
0000de  4323              ORRS     r3,r3,r4              ;131
0000e0  63c3              STR      r3,[r0,#0x3c]         ;131
0000e2  e00a              B        |L4.250|
                  |L4.228|
0000e4  2902              CMP      r1,#2                 ;133
0000e6  d806              BHI      |L4.246|
0000e8  2303              MOVS     r3,#3                 ;133
0000ea  eb0304c1          ADD      r4,r3,r1,LSL #3       ;133
0000ee  2301              MOVS     r3,#1                 ;133
0000f0  40a3              LSLS     r3,r3,r4              ;133
0000f2  e001              B        |L4.248|
                  |L4.244|
0000f4  e018              B        |L4.296|
                  |L4.246|
0000f6  2300              MOVS     r3,#0                 ;133
                  |L4.248|
0000f8  6083              STR      r3,[r0,#8]            ;133
                  |L4.250|
0000fa  6913              LDR      r3,[r2,#0x10]         ;136
0000fc  b153              CBZ      r3,|L4.276|
0000fe  2902              CMP      r1,#2                 ;137
000100  d805              BHI      |L4.270|
000102  2304              MOVS     r3,#4                 ;137
000104  eb0304c1          ADD      r4,r3,r1,LSL #3       ;137
000108  2301              MOVS     r3,#1                 ;137
00010a  40a3              LSLS     r3,r3,r4              ;137
00010c  e000              B        |L4.272|
                  |L4.270|
00010e  2300              MOVS     r3,#0                 ;137
                  |L4.272|
000110  6083              STR      r3,[r0,#8]            ;137
000112  e009              B        |L4.296|
                  |L4.276|
000114  2902              CMP      r1,#2                 ;139
000116  d805              BHI      |L4.292|
000118  2304              MOVS     r3,#4                 ;139
00011a  eb0304c1          ADD      r4,r3,r1,LSL #3       ;139
00011e  2301              MOVS     r3,#1                 ;139
000120  40a3              LSLS     r3,r3,r4              ;139
000122  e000              B        |L4.294|
                  |L4.292|
000124  2300              MOVS     r3,#0                 ;139
                  |L4.294|
000126  6043              STR      r3,[r0,#4]            ;139
                  |L4.296|
000128  bf00              NOP      
00012a  e786              B        |L4.58|
;;;143    
                          ENDP


                          AREA ||i.MCPWM_CountConfig||, CODE, READONLY, ALIGN=1

                  MCPWM_CountConfig PROC
;;;260     **********************************************************************/
;;;261    void MCPWM_CountConfig(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
000000  b530              PUSH     {r4,r5,lr}
;;;262    					uint32_t countMode, MCPWM_COUNT_CFG_Type *countConfig)
;;;263    {
;;;264    	if (channelNum <= 2) {
000002  2902              CMP      r1,#2
000004  d866              BHI      |L5.212|
;;;265    		if (countMode /* == ENABLE */){
000006  2a00              CMP      r2,#0
000008  d05a              BEQ      |L5.192|
;;;266    			MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_CNTR(channelNum);
00000a  2902              CMP      r1,#2
00000c  d805              BHI      |L5.26|
00000e  f101041d          ADD      r4,r1,#0x1d
000012  2501              MOVS     r5,#1
000014  fa05f404          LSL      r4,r5,r4
000018  e000              B        |L5.28|
                  |L5.26|
00001a  2400              MOVS     r4,#0
                  |L5.28|
00001c  6604              STR      r4,[r0,#0x60]
;;;267    			if (countConfig->countFalling /* == ENABLE */) {
00001e  689c              LDR      r4,[r3,#8]
000020  b19c              CBZ      r4,|L5.74|
;;;268    				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
000022  681c              LDR      r4,[r3,#0]
000024  2c02              CMP      r4,#2
000026  d80d              BHI      |L5.68|
000028  2902              CMP      r1,#2
00002a  d80b              BHI      |L5.68|
00002c  681c              LDR      r4,[r3,#0]
00002e  eb040444          ADD      r4,r4,r4,LSL #1
000032  0064              LSLS     r4,r4,#1
000034  2502              MOVS     r5,#2
000036  fb054401          MLA      r4,r5,r1,r4
00003a  1c64              ADDS     r4,r4,#1
00003c  2501              MOVS     r5,#1
00003e  fa05f404          LSL      r4,r5,r4
000042  e000              B        |L5.70|
                  |L5.68|
000044  2400              MOVS     r4,#0
                  |L5.70|
000046  6604              STR      r4,[r0,#0x60]
000048  e012              B        |L5.112|
                  |L5.74|
;;;269    			} else {
;;;270    				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
00004a  681c              LDR      r4,[r3,#0]
00004c  2c02              CMP      r4,#2
00004e  d80d              BHI      |L5.108|
000050  2902              CMP      r1,#2
000052  d80b              BHI      |L5.108|
000054  681c              LDR      r4,[r3,#0]
000056  eb040444          ADD      r4,r4,r4,LSL #1
00005a  0064              LSLS     r4,r4,#1
00005c  2502              MOVS     r5,#2
00005e  fb054401          MLA      r4,r5,r1,r4
000062  1c64              ADDS     r4,r4,#1
000064  2501              MOVS     r5,#1
000066  fa05f404          LSL      r4,r5,r4
00006a  e000              B        |L5.110|
                  |L5.108|
00006c  2400              MOVS     r4,#0
                  |L5.110|
00006e  6644              STR      r4,[r0,#0x64]
                  |L5.112|
;;;271    			}
;;;272    			if (countConfig->countRising /* == ENABLE */) {
000070  685c              LDR      r4,[r3,#4]
000072  b194              CBZ      r4,|L5.154|
;;;273    				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
000074  681c              LDR      r4,[r3,#0]
000076  2c02              CMP      r4,#2
000078  d80c              BHI      |L5.148|
00007a  2902              CMP      r1,#2
00007c  d80a              BHI      |L5.148|
00007e  681c              LDR      r4,[r3,#0]
000080  eb040444          ADD      r4,r4,r4,LSL #1
000084  0064              LSLS     r4,r4,#1
000086  2502              MOVS     r5,#2
000088  fb054401          MLA      r4,r5,r1,r4
00008c  2501              MOVS     r5,#1
00008e  fa05f404          LSL      r4,r5,r4
000092  e000              B        |L5.150|
                  |L5.148|
000094  2400              MOVS     r4,#0
                  |L5.150|
000096  6604              STR      r4,[r0,#0x60]
000098  e01c              B        |L5.212|
                  |L5.154|
;;;274    			} else {
;;;275    				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
00009a  681c              LDR      r4,[r3,#0]
00009c  2c02              CMP      r4,#2
00009e  d80c              BHI      |L5.186|
0000a0  2902              CMP      r1,#2
0000a2  d80a              BHI      |L5.186|
0000a4  681c              LDR      r4,[r3,#0]
0000a6  eb040444          ADD      r4,r4,r4,LSL #1
0000aa  0064              LSLS     r4,r4,#1
0000ac  2502              MOVS     r5,#2
0000ae  fb054401          MLA      r4,r5,r1,r4
0000b2  2501              MOVS     r5,#1
0000b4  fa05f404          LSL      r4,r5,r4
0000b8  e000              B        |L5.188|
                  |L5.186|
0000ba  2400              MOVS     r4,#0
                  |L5.188|
0000bc  6644              STR      r4,[r0,#0x64]
0000be  e009              B        |L5.212|
                  |L5.192|
;;;276    			}
;;;277    		} else {
;;;278    			MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_CNTR(channelNum);
0000c0  2902              CMP      r1,#2
0000c2  d805              BHI      |L5.208|
0000c4  f101041d          ADD      r4,r1,#0x1d
0000c8  2501              MOVS     r5,#1
0000ca  fa05f404          LSL      r4,r5,r4
0000ce  e000              B        |L5.210|
                  |L5.208|
0000d0  2400              MOVS     r4,#0
                  |L5.210|
0000d2  6644              STR      r4,[r0,#0x64]
                  |L5.212|
;;;279    		}
;;;280    	}
;;;281    }
0000d4  bd30              POP      {r4,r5,pc}
;;;282    
                          ENDP


                          AREA ||i.MCPWM_DCMode||, CODE, READONLY, ALIGN=1

                  MCPWM_DCMode PROC
;;;377     **********************************************************************/
;;;378    void MCPWM_DCMode(LPC_MCPWM_TypeDef *MCPWMx, uint32_t dcMode,
000000  b510              PUSH     {r4,lr}
;;;379    					uint32_t outputInvered, uint32_t outputPattern)
;;;380    {
;;;381    	if (dcMode){
000002  b119              CBZ      r1,|L6.12|
;;;382    		MCPWMx->MCCON_SET = MCPWM_CON_DCMODE;
000004  f04f4400          MOV      r4,#0x80000000
000008  6044              STR      r4,[r0,#4]
00000a  e002              B        |L6.18|
                  |L6.12|
;;;383    	} else {
;;;384    		MCPWMx->MCCON_CLR = MCPWM_CON_DCMODE;
00000c  f04f4400          MOV      r4,#0x80000000
000010  6084              STR      r4,[r0,#8]
                  |L6.18|
;;;385    	}
;;;386    
;;;387    	if (outputInvered) {
000012  b11a              CBZ      r2,|L6.28|
;;;388    		MCPWMx->MCCON_SET = MCPWM_CON_INVBDC;
000014  f04f5400          MOV      r4,#0x20000000
000018  6044              STR      r4,[r0,#4]
00001a  e002              B        |L6.34|
                  |L6.28|
;;;389    	} else {
;;;390    		MCPWMx->MCCON_CLR = MCPWM_CON_INVBDC;
00001c  f04f5400          MOV      r4,#0x20000000
000020  6084              STR      r4,[r0,#8]
                  |L6.34|
;;;391    	}
;;;392    
;;;393    	MCPWMx->MCCCP = outputPattern;
000022  6403              STR      r3,[r0,#0x40]
;;;394    }
000024  bd10              POP      {r4,pc}
;;;395    
                          ENDP


                          AREA ||i.MCPWM_GetCapture||, CODE, READONLY, ALIGN=1

                  MCPWM_GetCapture PROC
;;;234     **********************************************************************/
;;;235    uint32_t MCPWM_GetCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t captureChannel)
000000  4602              MOV      r2,r0
;;;236    {
;;;237    	if (captureChannel == 0){
000002  b909              CBNZ     r1,|L7.8|
;;;238    		return (MCPWMx->MCCR0);
000004  6c50              LDR      r0,[r2,#0x44]
                  |L7.6|
;;;239    	} else if (captureChannel == 1) {
;;;240    		return (MCPWMx->MCCR1);
;;;241    	} else if (captureChannel == 2) {
;;;242    		return (MCPWMx->MCCR2);
;;;243    	}
;;;244    	return (0);
;;;245    }
000006  4770              BX       lr
                  |L7.8|
000008  2901              CMP      r1,#1                 ;239
00000a  d101              BNE      |L7.16|
00000c  6c90              LDR      r0,[r2,#0x48]         ;240
00000e  e7fa              B        |L7.6|
                  |L7.16|
000010  2902              CMP      r1,#2                 ;241
000012  d101              BNE      |L7.24|
000014  6cd0              LDR      r0,[r2,#0x4c]         ;242
000016  e7f6              B        |L7.6|
                  |L7.24|
000018  2000              MOVS     r0,#0                 ;244
00001a  e7f4              B        |L7.6|
;;;246    
                          ENDP


                          AREA ||i.MCPWM_GetIntStatus||, CODE, READONLY, ALIGN=1

                  MCPWM_GetIntStatus PROC
;;;493     **********************************************************************/
;;;494    FlagStatus MCPWM_GetIntStatus(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
000000  4602              MOV      r2,r0
;;;495    {
;;;496    	return ((MCPWMx->MCINTFLAG & ulIntType) ? SET : RESET);
000002  6e90              LDR      r0,[r2,#0x68]
000004  4008              ANDS     r0,r0,r1
000006  b108              CBZ      r0,|L8.12|
000008  2001              MOVS     r0,#1
                  |L8.10|
;;;497    }
00000a  4770              BX       lr
                  |L8.12|
00000c  2000              MOVS     r0,#0                 ;496
00000e  e7fc              B        |L8.10|
;;;498    
                          ENDP


                          AREA ||i.MCPWM_Init||, CODE, READONLY, ALIGN=1

                  MCPWM_Init PROC
;;;65      **********************************************************************/
;;;66     void MCPWM_Init(LPC_MCPWM_TypeDef *MCPWMx)
000000  b510              PUSH     {r4,lr}
;;;67     {
000002  4604              MOV      r4,r0
;;;68     
;;;69     	/* Turn On MCPWM PCLK */
;;;70     	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCMC, ENABLE);
000004  2101              MOVS     r1,#1
000006  0448              LSLS     r0,r1,#17
000008  f7fffffe          BL       CLKPWR_ConfigPPWR
;;;71     	/* As default, peripheral clock for MCPWM module
;;;72     	 * is set to FCCLK / 2 */
;;;73     	// CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_MC, CLKPWR_PCLKSEL_CCLK_DIV_2);
;;;74     
;;;75     	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(0) | MCPWM_CAPCLR_CAP(1) | MCPWM_CAPCLR_CAP(2);
00000c  2007              MOVS     r0,#7
00000e  6760              STR      r0,[r4,#0x74]
;;;76     	MCPWMx->MCINTFLAG_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) \
000010  f2407077          MOV      r0,#0x777
000014  6720              STR      r0,[r4,#0x70]
;;;77     							| MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) \
;;;78     							| MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
;;;79     	MCPWMx->MCINTEN_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) \
000016  65a0              STR      r0,[r4,#0x58]
;;;80     							| MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) \
;;;81     							| MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
;;;82     }
000018  bd10              POP      {r4,pc}
;;;83     
                          ENDP


                          AREA ||i.MCPWM_IntClear||, CODE, READONLY, ALIGN=1

                  MCPWM_IntClear PROC
;;;470     **********************************************************************/
;;;471    void MCPWM_IntClear(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
000000  6701              STR      r1,[r0,#0x70]
;;;472    {
;;;473    	MCPWMx->MCINTFLAG_CLR = ulIntType;
;;;474    }
000002  4770              BX       lr
;;;475    
                          ENDP


                          AREA ||i.MCPWM_IntConfig||, CODE, READONLY, ALIGN=1

                  MCPWM_IntConfig PROC
;;;418     **********************************************************************/
;;;419    void MCPWM_IntConfig(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType, FunctionalState NewState)
000000  b10a              CBZ      r2,|L11.6|
;;;420    {
;;;421    	if (NewState) {
;;;422    		MCPWMx->MCINTEN_SET = ulIntType;
000002  6541              STR      r1,[r0,#0x54]
000004  e000              B        |L11.8|
                  |L11.6|
;;;423    	} else {
;;;424    		MCPWMx->MCINTEN_CLR = ulIntType;
000006  6581              STR      r1,[r0,#0x58]
                  |L11.8|
;;;425    	}
;;;426    }
000008  4770              BX       lr
;;;427    
                          ENDP


                          AREA ||i.MCPWM_IntSet||, CODE, READONLY, ALIGN=1

                  MCPWM_IntSet PROC
;;;446     **********************************************************************/
;;;447    void MCPWM_IntSet(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
000000  66c1              STR      r1,[r0,#0x6c]
;;;448    {
;;;449    	MCPWMx->MCINTFLAG_SET = ulIntType;
;;;450    }
000002  4770              BX       lr
;;;451    
                          ENDP


                          AREA ||i.MCPWM_Start||, CODE, READONLY, ALIGN=1

                  MCPWM_Start PROC
;;;298     **********************************************************************/
;;;299    void MCPWM_Start(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
000000  b570              PUSH     {r4-r6,lr}
;;;300    					uint32_t channel1, uint32_t channel2)
;;;301    {
;;;302    	uint32_t regVal = 0;
000002  2400              MOVS     r4,#0
;;;303    	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
000004  b109              CBZ      r1,|L13.10|
000006  2501              MOVS     r5,#1
000008  e000              B        |L13.12|
                  |L13.10|
00000a  2500              MOVS     r5,#0
                  |L13.12|
00000c  b112              CBZ      r2,|L13.20|
00000e  f44f7680          MOV      r6,#0x100
000012  e000              B        |L13.22|
                  |L13.20|
000014  2600              MOVS     r6,#0
                  |L13.22|
000016  4335              ORRS     r5,r5,r6
000018  b113              CBZ      r3,|L13.32|
;;;304    				| (channel2 ? MCPWM_CON_RUN(2) : 0);
00001a  f44f3680          MOV      r6,#0x10000
00001e  e000              B        |L13.34|
                  |L13.32|
000020  2600              MOVS     r6,#0
                  |L13.34|
000022  ea450406          ORR      r4,r5,r6
;;;305    	MCPWMx->MCCON_SET = regVal;
000026  6044              STR      r4,[r0,#4]
;;;306    }
000028  bd70              POP      {r4-r6,pc}
;;;307    
                          ENDP


                          AREA ||i.MCPWM_Stop||, CODE, READONLY, ALIGN=1

                  MCPWM_Stop PROC
;;;323     **********************************************************************/
;;;324    void MCPWM_Stop(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
000000  b570              PUSH     {r4-r6,lr}
;;;325    		uint32_t channel1, uint32_t channel2)
;;;326    {
;;;327    	uint32_t regVal = 0;
000002  2400              MOVS     r4,#0
;;;328    	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
000004  b109              CBZ      r1,|L14.10|
000006  2501              MOVS     r5,#1
000008  e000              B        |L14.12|
                  |L14.10|
00000a  2500              MOVS     r5,#0
                  |L14.12|
00000c  b112              CBZ      r2,|L14.20|
00000e  f44f7680          MOV      r6,#0x100
000012  e000              B        |L14.22|
                  |L14.20|
000014  2600              MOVS     r6,#0
                  |L14.22|
000016  4335              ORRS     r5,r5,r6
000018  b113              CBZ      r3,|L14.32|
;;;329    				| (channel2 ? MCPWM_CON_RUN(2) : 0);
00001a  f44f3680          MOV      r6,#0x10000
00001e  e000              B        |L14.34|
                  |L14.32|
000020  2600              MOVS     r6,#0
                  |L14.34|
000022  ea450406          ORR      r4,r5,r6
;;;330    	MCPWMx->MCCON_CLR = regVal;
000026  6084              STR      r4,[r0,#8]
;;;331    }
000028  bd70              POP      {r4-r6,pc}
;;;332    
                          ENDP


                          AREA ||i.MCPWM_WriteToShadow||, CODE, READONLY, ALIGN=1

                  MCPWM_WriteToShadow PROC
;;;155     **********************************************************************/
;;;156    void MCPWM_WriteToShadow(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
000000  b921              CBNZ     r1,|L15.12|
;;;157    								MCPWM_CHANNEL_CFG_Type *channelSetup)
;;;158    {
;;;159    	if (channelNum == 0){
;;;160    		MCPWMx->MCPER0 = channelSetup->channelPeriodValue;
000002  6993              LDR      r3,[r2,#0x18]
000004  6243              STR      r3,[r0,#0x24]
;;;161    		MCPWMx->MCPW0 = channelSetup->channelPulsewidthValue;
000006  69d3              LDR      r3,[r2,#0x1c]
000008  6303              STR      r3,[r0,#0x30]
00000a  e00c              B        |L15.38|
                  |L15.12|
;;;162    	} else if (channelNum == 1) {
00000c  2901              CMP      r1,#1
00000e  d104              BNE      |L15.26|
;;;163    		MCPWMx->MCPER1 = channelSetup->channelPeriodValue;
000010  6993              LDR      r3,[r2,#0x18]
000012  6283              STR      r3,[r0,#0x28]
;;;164    		MCPWMx->MCPW1 = channelSetup->channelPulsewidthValue;
000014  69d3              LDR      r3,[r2,#0x1c]
000016  6343              STR      r3,[r0,#0x34]
000018  e005              B        |L15.38|
                  |L15.26|
;;;165    	} else if (channelNum == 2) {
00001a  2902              CMP      r1,#2
00001c  d103              BNE      |L15.38|
;;;166    		MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
00001e  6993              LDR      r3,[r2,#0x18]
000020  62c3              STR      r3,[r0,#0x2c]
;;;167    		MCPWMx->MCPW2 = channelSetup->channelPulsewidthValue;
000022  69d3              LDR      r3,[r2,#0x1c]
000024  6383              STR      r3,[r0,#0x38]
                  |L15.38|
;;;168    	}
;;;169    }
000026  4770              BX       lr
;;;170    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Lib\\Drivers\\source\\lpc17xx_mcpwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_lpc17xx_mcpwm_c_92022aa5____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_lpc17xx_mcpwm_c_92022aa5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_lpc17xx_mcpwm_c_92022aa5____REVSH|
#line 144
|__asm___15_lpc17xx_mcpwm_c_92022aa5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
