; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\lpc17xx_spi.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_spi.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\lpc17xx_spi.crf Lib\Drivers\source\lpc17xx_spi.c]
                          THUMB

                          AREA ||i.SPI_CheckStatus||, CODE, READONLY, ALIGN=2

                  SPI_CheckStatus PROC
;;;424     *********************************************************************/
;;;425    FlagStatus SPI_CheckStatus (uint32_t inputSPIStatus,  uint8_t SPIStatus)
000000  b570              PUSH     {r4-r6,lr}
;;;426    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;427    	CHECK_PARAM(PARAM_SPI_STAT(SPIStatus));
000006  2c08              CMP      r4,#8
000008  d007              BEQ      |L1.26|
00000a  2c10              CMP      r4,#0x10
00000c  d005              BEQ      |L1.26|
00000e  2c20              CMP      r4,#0x20
000010  d003              BEQ      |L1.26|
000012  2c40              CMP      r4,#0x40
000014  d001              BEQ      |L1.26|
000016  2c80              CMP      r4,#0x80
000018  d100              BNE      |L1.28|
                  |L1.26|
00001a  e004              B        |L1.38|
                  |L1.28|
00001c  f24011ab          MOV      r1,#0x1ab
000020  a004              ADR      r0,|L1.52|
000022  f7fffffe          BL       check_failed
                  |L1.38|
;;;428    
;;;429    	return ((inputSPIStatus & SPIStatus) ? SET : RESET);
000026  ea050004          AND      r0,r5,r4
00002a  b108              CBZ      r0,|L1.48|
00002c  2001              MOVS     r0,#1
                  |L1.46|
;;;430    }
00002e  bd70              POP      {r4-r6,pc}
                  |L1.48|
000030  2000              MOVS     r0,#0                 ;429
000032  e7fc              B        |L1.46|
;;;431    
                          ENDP

                  |L1.52|
000034  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_spi.c",0
000038  44726976
00003c  6572735c
000040  736f7572
000044  63655c6c
000048  70633137
00004c  78785f73
000050  70692e63
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.SPI_ClearIntPending||, CODE, READONLY, ALIGN=2

                  SPI_ClearIntPending PROC
;;;384     *********************************************************************/
;;;385    void SPI_ClearIntPending(LPC_SPI_TypeDef *SPIx)
000000  b510              PUSH     {r4,lr}
;;;386    {
000002  4604              MOV      r4,r0
;;;387    	CHECK_PARAM(PARAM_SPIx(SPIx));
000004  4805              LDR      r0,|L2.28|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L2.12|
00000a  e004              B        |L2.22|
                  |L2.12|
00000c  f2401183          MOV      r1,#0x183
000010  a003              ADR      r0,|L2.32|
000012  f7fffffe          BL       check_failed
                  |L2.22|
;;;388    
;;;389    	SPIx->SPINT = SPI_SPINT_INTFLAG;
000016  2001              MOVS     r0,#1
000018  61e0              STR      r0,[r4,#0x1c]
;;;390    }
00001a  bd10              POP      {r4,pc}
;;;391    
                          ENDP

                  |L2.28|
                          DCD      0x40020000
                  |L2.32|
000020  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_spi.c",0
000024  44726976
000028  6572735c
00002c  736f7572
000030  63655c6c
000034  70633137
000038  78785f73
00003c  70692e63
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.SPI_ConfigStructInit||, CODE, READONLY, ALIGN=2

                  SPI_ConfigStructInit PROC
;;;174    *******************************************************************************/
;;;175    void SPI_ConfigStructInit(SPI_CFG_Type *SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;176    {
;;;177    	SPI_InitStruct->CPHA = SPI_CPHA_FIRST;
000002  6041              STR      r1,[r0,#4]
;;;178    	SPI_InitStruct->CPOL = SPI_CPOL_HI;
000004  6081              STR      r1,[r0,#8]
;;;179    	SPI_InitStruct->ClockRate = 1000000;
000006  4905              LDR      r1,|L3.28|
000008  6141              STR      r1,[r0,#0x14]
;;;180    	SPI_InitStruct->DataOrder = SPI_DATA_MSB_FIRST;
00000a  2100              MOVS     r1,#0
00000c  6101              STR      r1,[r0,#0x10]
;;;181    	SPI_InitStruct->Databit = SPI_DATABIT_8;
00000e  f44f6100          MOV      r1,#0x800
000012  6001              STR      r1,[r0,#0]
;;;182    	SPI_InitStruct->Mode = SPI_MASTER_MODE;
000014  2120              MOVS     r1,#0x20
000016  60c1              STR      r1,[r0,#0xc]
;;;183    }
000018  4770              BX       lr
;;;184    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x000f4240

                          AREA ||i.SPI_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_DeInit PROC
;;;101     **********************************************************************/
;;;102    void SPI_DeInit(LPC_SPI_TypeDef *SPIx)
000000  b510              PUSH     {r4,lr}
;;;103    {
000002  4604              MOV      r4,r0
;;;104    	CHECK_PARAM(PARAM_SPIx(SPIx));
000004  4807              LDR      r0,|L4.36|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L4.12|
00000a  e003              B        |L4.20|
                  |L4.12|
00000c  2168              MOVS     r1,#0x68
00000e  a006              ADR      r0,|L4.40|
000010  f7fffffe          BL       check_failed
                  |L4.20|
;;;105    
;;;106    	if (SPIx == LPC_SPI){
000014  4803              LDR      r0,|L4.36|
000016  4284              CMP      r4,r0
000018  d103              BNE      |L4.34|
;;;107    		/* Set up clock and power for SPI module */
;;;108    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSPI, DISABLE);
00001a  2100              MOVS     r1,#0
00001c  1580              ASRS     r0,r0,#22
00001e  f7fffffe          BL       CLKPWR_ConfigPPWR
                  |L4.34|
;;;109    	}
;;;110    }
000022  bd10              POP      {r4,pc}
;;;111    
                          ENDP

                  |L4.36|
                          DCD      0x40020000
                  |L4.40|
000028  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_spi.c",0
00002c  44726976
000030  6572735c
000034  736f7572
000038  63655c6c
00003c  70633137
000040  78785f73
000044  70692e63
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.SPI_GetDataSize||, CODE, READONLY, ALIGN=2

                  SPI_GetDataSize PROC
;;;116     **********************************************************************/
;;;117    uint8_t SPI_GetDataSize (LPC_SPI_TypeDef *SPIx)
000000  b510              PUSH     {r4,lr}
;;;118    {
000002  4604              MOV      r4,r0
;;;119    	CHECK_PARAM(PARAM_SPIx(SPIx));
000004  4805              LDR      r0,|L5.28|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L5.12|
00000a  e003              B        |L5.20|
                  |L5.12|
00000c  2177              MOVS     r1,#0x77
00000e  a004              ADR      r0,|L5.32|
000010  f7fffffe          BL       check_failed
                  |L5.20|
;;;120    	return ((SPIx->SPCR)>>8 & 0xF);
000014  6820              LDR      r0,[r4,#0]
000016  f3c02003          UBFX     r0,r0,#8,#4
;;;121    }
00001a  bd10              POP      {r4,pc}
;;;122    
                          ENDP

                  |L5.28|
                          DCD      0x40020000
                  |L5.32|
000020  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_spi.c",0
000024  44726976
000028  6572735c
00002c  736f7572
000030  63655c6c
000034  70633137
000038  78785f73
00003c  70692e63
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.SPI_GetIntStatus||, CODE, READONLY, ALIGN=2

                  SPI_GetIntStatus PROC
;;;372     *********************************************************************/
;;;373    IntStatus SPI_GetIntStatus (LPC_SPI_TypeDef *SPIx)
000000  b510              PUSH     {r4,lr}
;;;374    {
000002  4604              MOV      r4,r0
;;;375    	CHECK_PARAM(PARAM_SPIx(SPIx));
000004  4806              LDR      r0,|L6.32|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L6.12|
00000a  e004              B        |L6.22|
                  |L6.12|
00000c  f2401177          MOV      r1,#0x177
000010  a004              ADR      r0,|L6.36|
000012  f7fffffe          BL       check_failed
                  |L6.22|
;;;376    
;;;377    	return ((SPIx->SPINT & SPI_SPINT_INTFLAG) ? SET : RESET);
000016  69e0              LDR      r0,[r4,#0x1c]
000018  f0000001          AND      r0,r0,#1
;;;378    }
00001c  bd10              POP      {r4,pc}
;;;379    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      0x40020000
                  |L6.36|
000024  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_spi.c",0
000028  44726976
00002c  6572735c
000030  736f7572
000034  63655c6c
000038  70633137
00003c  78785f73
000040  70692e63
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.SPI_GetStatus||, CODE, READONLY, ALIGN=2

                  SPI_GetStatus PROC
;;;403     *********************************************************************/
;;;404    uint32_t SPI_GetStatus(LPC_SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;405    {
000002  4604              MOV      r4,r0
;;;406    	CHECK_PARAM(PARAM_SPIx(SPIx));
000004  4806              LDR      r0,|L7.32|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L7.12|
00000a  e004              B        |L7.22|
                  |L7.12|
00000c  f44f71cb          MOV      r1,#0x196
000010  a004              ADR      r0,|L7.36|
000012  f7fffffe          BL       check_failed
                  |L7.22|
;;;407    
;;;408    	return (SPIx->SPSR & SPI_SPSR_BITMASK);
000016  6860              LDR      r0,[r4,#4]
000018  f00000f8          AND      r0,r0,#0xf8
;;;409    }
00001c  bd10              POP      {r4,pc}
;;;410    
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      0x40020000
                  |L7.36|
000024  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_spi.c",0
000028  44726976
00002c  6572735c
000030  736f7572
000034  63655c6c
000038  70633137
00003c  78785f73
000040  70692e63
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=2

                  SPI_Init PROC
;;;131     *********************************************************************/
;;;132    void SPI_Init(LPC_SPI_TypeDef *SPIx, SPI_CFG_Type *SPI_ConfigStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;133    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;134    	uint32_t tmp;
;;;135    
;;;136    	CHECK_PARAM(PARAM_SPIx(SPIx));
000006  4816              LDR      r0,|L8.96|
000008  4285              CMP      r5,r0
00000a  d100              BNE      |L8.14|
00000c  e003              B        |L8.22|
                  |L8.14|
00000e  2188              MOVS     r1,#0x88
000010  a014              ADR      r0,|L8.100|
000012  f7fffffe          BL       check_failed
                  |L8.22|
;;;137    
;;;138    	if(SPIx == LPC_SPI){
000016  4812              LDR      r0,|L8.96|
000018  4285              CMP      r5,r0
00001a  d104              BNE      |L8.38|
;;;139    		/* Set up clock and power for UART module */
;;;140    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSPI, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  1580              ASRS     r0,r0,#22
000020  f7fffffe          BL       CLKPWR_ConfigPPWR
000024  e000              B        |L8.40|
                  |L8.38|
;;;141    	} else {
;;;142    		return;
;;;143    	}
;;;144    
;;;145    	// Configure SPI, interrupt is disable as default
;;;146    	tmp = ((SPI_ConfigStruct->CPHA) | (SPI_ConfigStruct->CPOL) \
;;;147    		| (SPI_ConfigStruct->DataOrder) | (SPI_ConfigStruct->Databit) \
;;;148    		| (SPI_ConfigStruct->Mode) | SPI_SPCR_BIT_EN) & SPI_SPCR_BITMASK;
;;;149    	// write back to SPI control register
;;;150    	SPIx->SPCR = tmp;
;;;151    
;;;152    	// Set clock rate for SPI peripheral
;;;153    	SPI_SetClock(SPIx, SPI_ConfigStruct->ClockRate);
;;;154    
;;;155    	// If interrupt flag is set, Write '1' to Clear interrupt flag
;;;156    	if (SPIx->SPINT & SPI_SPINT_INTFLAG){
;;;157    		SPIx->SPINT = SPI_SPINT_INTFLAG;
;;;158    	}
;;;159    }
000026  bd70              POP      {r4-r6,pc}
                  |L8.40|
000028  e9d40101          LDRD     r0,r1,[r4,#4]         ;146
00002c  4308              ORRS     r0,r0,r1              ;146
00002e  6921              LDR      r1,[r4,#0x10]         ;146
000030  4308              ORRS     r0,r0,r1              ;146
000032  6821              LDR      r1,[r4,#0]            ;146
000034  4308              ORRS     r0,r0,r1              ;146
000036  68e1              LDR      r1,[r4,#0xc]          ;146
000038  4308              ORRS     r0,r0,r1              ;146
00003a  f0400004          ORR      r0,r0,#4              ;146
00003e  f64071fc          MOV      r1,#0xffc             ;146
000042  ea000601          AND      r6,r0,r1              ;146
000046  602e              STR      r6,[r5,#0]            ;150
000048  4628              MOV      r0,r5                 ;153
00004a  6961              LDR      r1,[r4,#0x14]         ;153
00004c  f7fffffe          BL       SPI_SetClock
000050  69e8              LDR      r0,[r5,#0x1c]         ;156
000052  f0000001          AND      r0,r0,#1              ;156
000056  b108              CBZ      r0,|L8.92|
000058  2001              MOVS     r0,#1                 ;157
00005a  61e8              STR      r0,[r5,#0x1c]         ;157
                  |L8.92|
00005c  bf00              NOP      
00005e  e7e2              B        |L8.38|
;;;160    
                          ENDP

                  |L8.96|
                          DCD      0x40020000
                  |L8.100|
000064  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_spi.c",0
000068  44726976
00006c  6572735c
000070  736f7572
000074  63655c6c
000078  70633137
00007c  78785f73
000080  70692e63
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.SPI_IntCmd||, CODE, READONLY, ALIGN=2

                  SPI_IntCmd PROC
;;;351     *********************************************************************/
;;;352    void SPI_IntCmd(LPC_SPI_TypeDef *SPIx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;353    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;354    	CHECK_PARAM(PARAM_SPIx(SPIx));
000006  480f              LDR      r0,|L9.68|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L9.14|
00000c  e004              B        |L9.24|
                  |L9.14|
00000e  f44f71b1          MOV      r1,#0x162
000012  a00d              ADR      r0,|L9.72|
000014  f7fffffe          BL       check_failed
                  |L9.24|
;;;355    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
000018  b10d              CBZ      r5,|L9.30|
00001a  2d01              CMP      r5,#1
00001c  d100              BNE      |L9.32|
                  |L9.30|
00001e  e004              B        |L9.42|
                  |L9.32|
000020  f2401163          MOV      r1,#0x163
000024  a008              ADR      r0,|L9.72|
000026  f7fffffe          BL       check_failed
                  |L9.42|
;;;356    
;;;357    	if (NewState == ENABLE)
00002a  2d01              CMP      r5,#1
00002c  d104              BNE      |L9.56|
;;;358    	{
;;;359    		SPIx->SPCR |= SPI_SPCR_SPIE;
00002e  6820              LDR      r0,[r4,#0]
000030  f0400080          ORR      r0,r0,#0x80
000034  6020              STR      r0,[r4,#0]
000036  e004              B        |L9.66|
                  |L9.56|
;;;360    	}
;;;361    	else
;;;362    	{
;;;363    		SPIx->SPCR &= (~SPI_SPCR_SPIE) & SPI_SPCR_BITMASK;
000038  6820              LDR      r0,[r4,#0]
00003a  f640717c          MOV      r1,#0xf7c
00003e  4008              ANDS     r0,r0,r1
000040  6020              STR      r0,[r4,#0]
                  |L9.66|
;;;364    	}
;;;365    }
000042  bd70              POP      {r4-r6,pc}
;;;366    
                          ENDP

                  |L9.68|
                          DCD      0x40020000
                  |L9.72|
000048  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_spi.c",0
00004c  44726976
000050  6572735c
000054  736f7572
000058  63655c6c
00005c  70633137
000060  78785f73
000064  70692e63
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.SPI_ReadWrite||, CODE, READONLY, ALIGN=1

                  SPI_ReadWrite PROC
;;;226     ***********************************************************************/
;;;227    int32_t SPI_ReadWrite (LPC_SPI_TypeDef *SPIx, SPI_DATA_SETUP_Type *dataCfg, \
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;228    						SPI_TRANSFER_Type xfType)
;;;229    {
000004  b082              SUB      sp,sp,#8
000006  4606              MOV      r6,r0
000008  460c              MOV      r4,r1
;;;230    	uint8_t *rdata8;
;;;231        uint8_t *wdata8;
;;;232    	uint16_t *rdata16;
;;;233        uint16_t *wdata16;
;;;234        uint32_t stat;
;;;235        uint32_t temp;
;;;236        uint8_t dataword;
;;;237    
;;;238    	//read for empty buffer
;;;239    	temp = SPIx->SPDR;
00000a  68b0              LDR      r0,[r6,#8]
00000c  9001              STR      r0,[sp,#4]
;;;240    	//dummy to clear status
;;;241    	temp = SPIx->SPSR;
00000e  6870              LDR      r0,[r6,#4]
000010  9001              STR      r0,[sp,#4]
;;;242    	dataCfg->counter = 0;
000012  2000              MOVS     r0,#0
000014  60e0              STR      r0,[r4,#0xc]
;;;243    	dataCfg->status = 0;
000016  6120              STR      r0,[r4,#0x10]
;;;244    
;;;245    	if(SPI_GetDataSize (SPIx) == 8)
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       SPI_GetDataSize
00001e  2808              CMP      r0,#8
000020  d101              BNE      |L10.38|
;;;246    		dataword = 0;
000022  2500              MOVS     r5,#0
000024  e000              B        |L10.40|
                  |L10.38|
;;;247    	else dataword = 1;
000026  2501              MOVS     r5,#1
                  |L10.40|
;;;248    	if (xfType == SPI_TRANSFER_POLLING){
000028  9804              LDR      r0,[sp,#0x10]
00002a  2800              CMP      r0,#0
00002c  d15b              BNE      |L10.230|
;;;249    
;;;250    		if (dataword == 0){
00002e  b925              CBNZ     r5,|L10.58|
;;;251    			rdata8 = (uint8_t *)dataCfg->rx_data;
000030  f8d48004          LDR      r8,[r4,#4]
;;;252    			wdata8 = (uint8_t *)dataCfg->tx_data;
000034  f8d49000          LDR      r9,[r4,#0]
000038  e003              B        |L10.66|
                  |L10.58|
;;;253    		} else {
;;;254    			rdata16 = (uint16_t *)dataCfg->rx_data;
00003a  f8d4a004          LDR      r10,[r4,#4]
;;;255    			wdata16 = (uint16_t *)dataCfg->tx_data;
00003e  f8d4b000          LDR      r11,[r4,#0]
                  |L10.66|
;;;256    		}
;;;257    
;;;258    		while(dataCfg->counter < dataCfg->length)
000042  e047              B        |L10.212|
                  |L10.68|
;;;259    		{
;;;260    			// Write data to buffer
;;;261    			if(dataCfg->tx_data == NULL){
000044  6820              LDR      r0,[r4,#0]
000046  b958              CBNZ     r0,|L10.96|
;;;262    				if (dataword == 0){
000048  b925              CBNZ     r5,|L10.84|
;;;263    					SPI_SendData(SPIx, 0xFF);
00004a  21ff              MOVS     r1,#0xff
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       SPI_SendData
000052  e015              B        |L10.128|
                  |L10.84|
;;;264    				} else {
;;;265    					SPI_SendData(SPIx, 0xFFFF);
000054  f64f71ff          MOV      r1,#0xffff
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       SPI_SendData
00005e  e00f              B        |L10.128|
                  |L10.96|
;;;266    				}
;;;267    			} else {
;;;268    				if (dataword == 0){
000060  b93d              CBNZ     r5,|L10.114|
;;;269    					SPI_SendData(SPIx, *wdata8);
000062  f8991000          LDRB     r1,[r9,#0]
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       SPI_SendData
;;;270    					wdata8++;
00006c  f1090901          ADD      r9,r9,#1
000070  e006              B        |L10.128|
                  |L10.114|
;;;271    				} else {
;;;272    					SPI_SendData(SPIx, *wdata16);
000072  f8bb1000          LDRH     r1,[r11,#0]
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       SPI_SendData
;;;273    					wdata16++;
00007c  f10b0b02          ADD      r11,r11,#2
                  |L10.128|
;;;274    				}
;;;275    			}
;;;276    			// Wait for transfer complete
;;;277    			while (!((stat = SPIx->SPSR) & SPI_SPSR_SPIF));
000080  bf00              NOP      
                  |L10.130|
000082  6877              LDR      r7,[r6,#4]
000084  f0070080          AND      r0,r7,#0x80
000088  2800              CMP      r0,#0
00008a  d0fa              BEQ      |L10.130|
;;;278    			// Check for error
;;;279    			if (stat & (SPI_SPSR_ABRT | SPI_SPSR_MODF | SPI_SPSR_ROVR | SPI_SPSR_WCOL)){
00008c  f0070078          AND      r0,r7,#0x78
000090  b130              CBZ      r0,|L10.160|
;;;280    				// save status
;;;281    				dataCfg->status = stat | SPI_STAT_ERROR;
000092  f4477000          ORR      r0,r7,#0x200
000096  6120              STR      r0,[r4,#0x10]
;;;282    				return (dataCfg->counter);
000098  68e0              LDR      r0,[r4,#0xc]
                  |L10.154|
;;;283    			}
;;;284    			// Read data from SPI dat
;;;285    			temp = (uint32_t) SPI_ReceiveData(SPIx);
;;;286    
;;;287    			// Store data to destination
;;;288    			if (dataCfg->rx_data != NULL)
;;;289    			{
;;;290    				if (dataword == 0){
;;;291    					*(rdata8) = (uint8_t) temp;
;;;292    					rdata8++;
;;;293    				} else {
;;;294    					*(rdata16) = (uint16_t) temp;
;;;295    					rdata16++;
;;;296    				}
;;;297    			}
;;;298    			// Increase counter
;;;299    			if (dataword == 0){
;;;300    				dataCfg->counter++;
;;;301    			} else {
;;;302    				dataCfg->counter += 2;
;;;303    			}
;;;304    		}
;;;305    
;;;306    		// Return length of actual data transferred
;;;307    		// save status
;;;308    		dataCfg->status = stat | SPI_STAT_DONE;
;;;309    		return (dataCfg->counter);
;;;310    	}
;;;311    	// Interrupt mode
;;;312    	else {
;;;313    
;;;314    		// Check if interrupt flag is already set
;;;315    		if(SPIx->SPINT & SPI_SPINT_INTFLAG){
;;;316    			SPIx->SPINT = SPI_SPINT_INTFLAG;
;;;317    		}
;;;318    		if (dataCfg->counter < dataCfg->length){
;;;319    			// Write data to buffer
;;;320    			if(dataCfg->tx_data == NULL){
;;;321    				if (dataword == 0){
;;;322    					SPI_SendData(SPIx, 0xFF);
;;;323    				} else {
;;;324    					SPI_SendData(SPIx, 0xFFFF);
;;;325    				}
;;;326    			} else {
;;;327    				if (dataword == 0){
;;;328    					SPI_SendData(SPIx, (*(uint8_t *)dataCfg->tx_data));
;;;329    				} else {
;;;330    					SPI_SendData(SPIx, (*(uint16_t *)dataCfg->tx_data));
;;;331    				}
;;;332    			}
;;;333    			SPI_IntCmd(SPIx, ENABLE);
;;;334    		} else {
;;;335    			// Save status
;;;336    			dataCfg->status = SPI_STAT_DONE;
;;;337    		}
;;;338    		return (0);
;;;339    	}
;;;340    }
00009a  b005              ADD      sp,sp,#0x14
00009c  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.160|
0000a0  4630              MOV      r0,r6                 ;285
0000a2  f7fffffe          BL       SPI_ReceiveData
0000a6  9001              STR      r0,[sp,#4]            ;285
0000a8  6860              LDR      r0,[r4,#4]            ;288
0000aa  b158              CBZ      r0,|L10.196|
0000ac  b92d              CBNZ     r5,|L10.186|
0000ae  9801              LDR      r0,[sp,#4]            ;291
0000b0  f8880000          STRB     r0,[r8,#0]            ;291
0000b4  f1080801          ADD      r8,r8,#1              ;292
0000b8  e004              B        |L10.196|
                  |L10.186|
0000ba  9801              LDR      r0,[sp,#4]            ;294
0000bc  f8aa0000          STRH     r0,[r10,#0]           ;294
0000c0  f10a0a02          ADD      r10,r10,#2            ;295
                  |L10.196|
0000c4  b91d              CBNZ     r5,|L10.206|
0000c6  68e0              LDR      r0,[r4,#0xc]          ;300
0000c8  1c40              ADDS     r0,r0,#1              ;300
0000ca  60e0              STR      r0,[r4,#0xc]          ;300
0000cc  e002              B        |L10.212|
                  |L10.206|
0000ce  68e0              LDR      r0,[r4,#0xc]          ;302
0000d0  1c80              ADDS     r0,r0,#2              ;302
0000d2  60e0              STR      r0,[r4,#0xc]          ;302
                  |L10.212|
0000d4  e9d41002          LDRD     r1,r0,[r4,#8]         ;258
0000d8  4288              CMP      r0,r1                 ;258
0000da  d3b3              BCC      |L10.68|
0000dc  f4477080          ORR      r0,r7,#0x100          ;308
0000e0  6120              STR      r0,[r4,#0x10]         ;308
0000e2  68e0              LDR      r0,[r4,#0xc]          ;309
0000e4  e7d9              B        |L10.154|
                  |L10.230|
0000e6  69f0              LDR      r0,[r6,#0x1c]         ;315
0000e8  f0000001          AND      r0,r0,#1              ;315
0000ec  b108              CBZ      r0,|L10.242|
0000ee  2001              MOVS     r0,#1                 ;316
0000f0  61f0              STR      r0,[r6,#0x1c]         ;316
                  |L10.242|
0000f2  e9d41002          LDRD     r1,r0,[r4,#8]         ;318
0000f6  4288              CMP      r0,r1                 ;318
0000f8  d21e              BCS      |L10.312|
0000fa  6820              LDR      r0,[r4,#0]            ;320
0000fc  b958              CBNZ     r0,|L10.278|
0000fe  b925              CBNZ     r5,|L10.266|
000100  21ff              MOVS     r1,#0xff              ;322
000102  4630              MOV      r0,r6                 ;322
000104  f7fffffe          BL       SPI_SendData
000108  e011              B        |L10.302|
                  |L10.266|
00010a  f64f71ff          MOV      r1,#0xffff            ;324
00010e  4630              MOV      r0,r6                 ;324
000110  f7fffffe          BL       SPI_SendData
000114  e00b              B        |L10.302|
                  |L10.278|
000116  b92d              CBNZ     r5,|L10.292|
000118  6820              LDR      r0,[r4,#0]            ;328
00011a  7801              LDRB     r1,[r0,#0]            ;328
00011c  4630              MOV      r0,r6                 ;328
00011e  f7fffffe          BL       SPI_SendData
000122  e004              B        |L10.302|
                  |L10.292|
000124  6820              LDR      r0,[r4,#0]            ;330
000126  8801              LDRH     r1,[r0,#0]            ;330
000128  4630              MOV      r0,r6                 ;330
00012a  f7fffffe          BL       SPI_SendData
                  |L10.302|
00012e  2101              MOVS     r1,#1                 ;333
000130  4630              MOV      r0,r6                 ;333
000132  f7fffffe          BL       SPI_IntCmd
000136  e002              B        |L10.318|
                  |L10.312|
000138  f44f7080          MOV      r0,#0x100             ;336
00013c  6120              STR      r0,[r4,#0x10]         ;336
                  |L10.318|
00013e  2000              MOVS     r0,#0                 ;338
000140  e7ab              B        |L10.154|
;;;341    
                          ENDP


                          AREA ||i.SPI_ReceiveData||, CODE, READONLY, ALIGN=2

                  SPI_ReceiveData PROC
;;;205     **********************************************************************/
;;;206    uint16_t SPI_ReceiveData(LPC_SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;207    {
000002  4604              MOV      r4,r0
;;;208    	CHECK_PARAM(PARAM_SPIx(SPIx));
000004  4805              LDR      r0,|L11.28|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L11.12|
00000a  e003              B        |L11.20|
                  |L11.12|
00000c  21d0              MOVS     r1,#0xd0
00000e  a004              ADR      r0,|L11.32|
000010  f7fffffe          BL       check_failed
                  |L11.20|
;;;209    
;;;210    	return ((uint16_t) (SPIx->SPDR & SPI_SPDR_BITMASK));
000014  68a0              LDR      r0,[r4,#8]
000016  b280              UXTH     r0,r0
;;;211    }
000018  bd10              POP      {r4,pc}
;;;212    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0x40020000
                  |L11.32|
000020  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_spi.c",0
000024  44726976
000028  6572735c
00002c  736f7572
000030  63655c6c
000034  70633137
000038  78785f73
00003c  70692e63
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.SPI_SendData||, CODE, READONLY, ALIGN=2

                  SPI_SendData PROC
;;;191     **********************************************************************/
;;;192    void SPI_SendData(LPC_SPI_TypeDef* SPIx, uint16_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;193    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;194    	CHECK_PARAM(PARAM_SPIx(SPIx));
000006  4805              LDR      r0,|L12.28|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L12.14|
00000c  e003              B        |L12.22|
                  |L12.14|
00000e  21c2              MOVS     r1,#0xc2
000010  a003              ADR      r0,|L12.32|
000012  f7fffffe          BL       check_failed
                  |L12.22|
;;;195    
;;;196    	SPIx->SPDR = Data & SPI_SPDR_BITMASK;
000016  b2a8              UXTH     r0,r5
000018  60a0              STR      r0,[r4,#8]
;;;197    }
00001a  bd70              POP      {r4-r6,pc}
;;;198    
                          ENDP

                  |L12.28|
                          DCD      0x40020000
                  |L12.32|
000020  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_spi.c",0
000024  44726976
000028  6572735c
00002c  736f7572
000030  63655c6c
000034  70633137
000038  78785f73
00003c  70692e63
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.SPI_SetClock||, CODE, READONLY, ALIGN=2

                  SPI_SetClock PROC
;;;64      ***********************************************************************/
;;;65     void SPI_SetClock (LPC_SPI_TypeDef *SPIx, uint32_t target_clock)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;66     {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;67     	uint32_t spi_pclk;
;;;68     	uint32_t prescale, temp;
;;;69     
;;;70     	CHECK_PARAM(PARAM_SPIx(SPIx));
000008  4811              LDR      r0,|L13.80|
00000a  4285              CMP      r5,r0
00000c  d100              BNE      |L13.16|
00000e  e003              B        |L13.24|
                  |L13.16|
000010  2146              MOVS     r1,#0x46
000012  a010              ADR      r0,|L13.84|
000014  f7fffffe          BL       check_failed
                  |L13.24|
;;;71     
;;;72     	if (SPIx == LPC_SPI){
000018  480d              LDR      r0,|L13.80|
00001a  4285              CMP      r5,r0
00001c  d104              BNE      |L13.40|
;;;73     		spi_pclk =  CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SPI);
00001e  2010              MOVS     r0,#0x10
000020  f7fffffe          BL       CLKPWR_GetPCLK
000024  4606              MOV      r6,r0
000026  e001              B        |L13.44|
                  |L13.40|
;;;74     	} else {
;;;75     		return;
;;;76     	}
;;;77     
;;;78     	prescale = 8;
;;;79     	// Find closest clock to target clock
;;;80     	while (1){
;;;81     		temp = target_clock * prescale;
;;;82     		if (temp >= spi_pclk){
;;;83     			break;
;;;84     		}
;;;85     		prescale += 2;
;;;86     		if(prescale >= 254){
;;;87     			break;
;;;88     		}
;;;89     	}
;;;90     
;;;91     	// Write to register
;;;92     	SPIx->SPCCR = SPI_SPCCR_COUNTER(prescale);
;;;93     }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L13.44|
00002c  2408              MOVS     r4,#8                 ;78
00002e  e008              B        |L13.66|
                  |L13.48|
000030  fb07f804          MUL      r8,r7,r4              ;81
000034  45b0              CMP      r8,r6                 ;82
000036  d300              BCC      |L13.58|
000038  e004              B        |L13.68|
                  |L13.58|
00003a  1ca4              ADDS     r4,r4,#2              ;85
00003c  2cfe              CMP      r4,#0xfe              ;86
00003e  d300              BCC      |L13.66|
000040  e000              B        |L13.68|
                  |L13.66|
000042  e7f5              B        |L13.48|
                  |L13.68|
000044  bf00              NOP                            ;83
000046  b2e0              UXTB     r0,r4                 ;92
000048  60e8              STR      r0,[r5,#0xc]          ;92
00004a  bf00              NOP      
00004c  e7ec              B        |L13.40|
;;;94     
                          ENDP

00004e  0000              DCW      0x0000
                  |L13.80|
                          DCD      0x40020000
                  |L13.84|
000054  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_spi.c",0
000058  44726976
00005c  6572735c
000060  736f7572
000064  63655c6c
000068  70633137
00006c  78785f73
000070  70692e63
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0

;*** Start embedded assembler ***

#line 1 "Lib\\Drivers\\source\\lpc17xx_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc17xx_spi_c_acc68f41____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_lpc17xx_spi_c_acc68f41____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc17xx_spi_c_acc68f41____REVSH|
#line 144
|__asm___13_lpc17xx_spi_c_acc68f41____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
