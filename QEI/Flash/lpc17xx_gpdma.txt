; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\lpc17xx_gpdma.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_gpdma.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\lpc17xx_gpdma.crf Lib\Drivers\source\lpc17xx_gpdma.c]
                          THUMB

                          AREA ||i.GPDMA_ChannelCmd||, CODE, READONLY, ALIGN=2

                  GPDMA_ChannelCmd PROC
;;;369     **********************************************************************/
;;;370    void GPDMA_ChannelCmd(uint8_t channelNum, FunctionalState NewState)
000000  4602              MOV      r2,r0
;;;371    {
;;;372    	LPC_GPDMACH_TypeDef *pDMAch;
;;;373    
;;;374    	// Get Channel pointer
;;;375    	pDMAch = (LPC_GPDMACH_TypeDef *) pGPDMACh[channelNum];
000002  4b07              LDR      r3,|L1.32|
000004  f8530022          LDR      r0,[r3,r2,LSL #2]
;;;376    
;;;377    	if (NewState == ENABLE) {
000008  2901              CMP      r1,#1
00000a  d104              BNE      |L1.22|
;;;378    		pDMAch->DMACCConfig |= GPDMA_DMACCxConfig_E;
00000c  6903              LDR      r3,[r0,#0x10]
00000e  f0430301          ORR      r3,r3,#1
000012  6103              STR      r3,[r0,#0x10]
000014  e003              B        |L1.30|
                  |L1.22|
;;;379    	} else {
;;;380    		pDMAch->DMACCConfig &= ~GPDMA_DMACCxConfig_E;
000016  6903              LDR      r3,[r0,#0x10]
000018  f0230301          BIC      r3,r3,#1
00001c  6103              STR      r3,[r0,#0x10]
                  |L1.30|
;;;381    	}
;;;382    }
00001e  4770              BX       lr
;;;383    /*********************************************************************//**
                          ENDP

                  |L1.32|
                          DCD      pGPDMACh

                          AREA ||i.GPDMA_ClearIntPending||, CODE, READONLY, ALIGN=2

                  GPDMA_ClearIntPending PROC
;;;440     **********************************************************************/
;;;441    void GPDMA_ClearIntPending(GPDMA_StateClear_Type type, uint8_t channel)
000000  b570              PUSH     {r4-r6,lr}
;;;442    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;443    	CHECK_PARAM(PARAM_GPDMA_STATCLR(type));
000006  b10c              CBZ      r4,|L2.12|
000008  2c01              CMP      r4,#1
00000a  d100              BNE      |L2.14|
                  |L2.12|
00000c  e004              B        |L2.24|
                  |L2.14|
00000e  f24011bb          MOV      r1,#0x1bb
000012  a00c              ADR      r0,|L2.68|
000014  f7fffffe          BL       check_failed
                  |L2.24|
;;;444    	CHECK_PARAM(PARAM_GPDMA_CHANNEL(channel));
000018  2d07              CMP      r5,#7
00001a  dc00              BGT      |L2.30|
00001c  e004              B        |L2.40|
                  |L2.30|
00001e  f44f71de          MOV      r1,#0x1bc
000022  a008              ADR      r0,|L2.68|
000024  f7fffffe          BL       check_failed
                  |L2.40|
;;;445    
;;;446    	if (type == GPDMA_STATCLR_INTTC) // clears the terminal count interrupt request on DMA channel
000028  b92c              CBNZ     r4,|L2.54|
;;;447    		LPC_GPDMA->DMACIntTCClear = GPDMA_DMACIntTCClear_Ch(channel);
00002a  2001              MOVS     r0,#1
00002c  40a8              LSLS     r0,r0,r5
00002e  b2c0              UXTB     r0,r0
000030  490d              LDR      r1,|L2.104|
000032  6088              STR      r0,[r1,#8]
000034  e004              B        |L2.64|
                  |L2.54|
;;;448    	else // clear the error interrupt request
;;;449    		LPC_GPDMA->DMACIntErrClr = GPDMA_DMACIntErrClr_Ch(channel);
000036  2001              MOVS     r0,#1
000038  40a8              LSLS     r0,r0,r5
00003a  b2c0              UXTB     r0,r0
00003c  490a              LDR      r1,|L2.104|
00003e  6108              STR      r0,[r1,#0x10]
                  |L2.64|
;;;450    }
000040  bd70              POP      {r4-r6,pc}
;;;451    
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
000044  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_gpdma.c",0
000048  44726976
00004c  6572735c
000050  736f7572
000054  63655c6c
000058  70633137
00005c  78785f67
000060  70646d61
000064  2e6300  
000067  00                DCB      0
                  |L2.104|
                          DCD      0x50004000

                          AREA ||i.GPDMA_Init||, CODE, READONLY, ALIGN=2

                  GPDMA_Init PROC
;;;205     *********************************************************************/
;;;206    void GPDMA_Init(void)
000000  b510              PUSH     {r4,lr}
;;;207    {
;;;208    	/* Enable GPDMA clock */
;;;209    	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCGPDMA, ENABLE);
000002  2101              MOVS     r1,#1
000004  0748              LSLS     r0,r1,#29
000006  f7fffffe          BL       CLKPWR_ConfigPPWR
;;;210    
;;;211    	// Reset all channel configuration register
;;;212    	LPC_GPDMACH0->DMACCConfig = 0;
00000a  2000              MOVS     r0,#0
00000c  490d              LDR      r1,|L3.68|
00000e  6008              STR      r0,[r1,#0]
;;;213    	LPC_GPDMACH1->DMACCConfig = 0;
000010  490d              LDR      r1,|L3.72|
000012  f8c10130          STR      r0,[r1,#0x130]
;;;214    	LPC_GPDMACH2->DMACCConfig = 0;
000016  490b              LDR      r1,|L3.68|
000018  3140              ADDS     r1,r1,#0x40
00001a  6008              STR      r0,[r1,#0]
;;;215    	LPC_GPDMACH3->DMACCConfig = 0;
00001c  4909              LDR      r1,|L3.68|
00001e  3160              ADDS     r1,r1,#0x60
000020  6008              STR      r0,[r1,#0]
;;;216    	LPC_GPDMACH4->DMACCConfig = 0;
000022  4908              LDR      r1,|L3.68|
000024  3180              ADDS     r1,r1,#0x80
000026  6008              STR      r0,[r1,#0]
;;;217    	LPC_GPDMACH5->DMACCConfig = 0;
000028  4906              LDR      r1,|L3.68|
00002a  31a0              ADDS     r1,r1,#0xa0
00002c  6008              STR      r0,[r1,#0]
;;;218    	LPC_GPDMACH6->DMACCConfig = 0;
00002e  4905              LDR      r1,|L3.68|
000030  31c0              ADDS     r1,r1,#0xc0
000032  6008              STR      r0,[r1,#0]
;;;219    	LPC_GPDMACH7->DMACCConfig = 0;
000034  4903              LDR      r1,|L3.68|
000036  31e0              ADDS     r1,r1,#0xe0
000038  6008              STR      r0,[r1,#0]
;;;220    
;;;221    	/* Clear all DMA interrupt and error flag */
;;;222    	LPC_GPDMA->DMACIntTCClear = 0xFF;
00003a  20ff              MOVS     r0,#0xff
00003c  4902              LDR      r1,|L3.72|
00003e  6088              STR      r0,[r1,#8]
;;;223    	LPC_GPDMA->DMACIntErrClr = 0xFF;
000040  6108              STR      r0,[r1,#0x10]
;;;224    }
000042  bd10              POP      {r4,pc}
;;;225    
                          ENDP

                  |L3.68|
                          DCD      0x50004110
                  |L3.72|
                          DCD      0x50004000

                          AREA ||i.GPDMA_IntGetStatus||, CODE, READONLY, ALIGN=2

                  GPDMA_IntGetStatus PROC
;;;398     **********************************************************************/
;;;399    IntStatus GPDMA_IntGetStatus(GPDMA_Status_Type type, uint8_t channel)
000000  b570              PUSH     {r4-r6,lr}
;;;400    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;401    	CHECK_PARAM(PARAM_GPDMA_STAT(type));
000006  b14c              CBZ      r4,|L4.28|
000008  2c01              CMP      r4,#1
00000a  d007              BEQ      |L4.28|
00000c  2c02              CMP      r4,#2
00000e  d005              BEQ      |L4.28|
000010  2c03              CMP      r4,#3
000012  d003              BEQ      |L4.28|
000014  2c04              CMP      r4,#4
000016  d001              BEQ      |L4.28|
000018  2c05              CMP      r4,#5
00001a  d100              BNE      |L4.30|
                  |L4.28|
00001c  e004              B        |L4.40|
                  |L4.30|
00001e  f2401191          MOV      r1,#0x191
000022  a02a              ADR      r0,|L4.204|
000024  f7fffffe          BL       check_failed
                  |L4.40|
;;;402    	CHECK_PARAM(PARAM_GPDMA_CHANNEL(channel));
000028  2d07              CMP      r5,#7
00002a  dc00              BGT      |L4.46|
00002c  e004              B        |L4.56|
                  |L4.46|
00002e  f44f71c9          MOV      r1,#0x192
000032  a026              ADR      r0,|L4.204|
000034  f7fffffe          BL       check_failed
                  |L4.56|
;;;403    
;;;404    	switch (type)
000038  2c05              CMP      r4,#5
00003a  d23b              BCS      |L4.180|
00003c  e8dff004          TBB      [pc,r4]
000040  030e1924          DCB      0x03,0x0e,0x19,0x24
000044  2f00              DCB      0x2f,0x00
;;;405    	{
;;;406    	case GPDMA_STAT_INT: //check status of DMA channel interrupts
;;;407    		if (LPC_GPDMA->DMACIntStat & (GPDMA_DMACIntStat_Ch(channel)))
000046  482a              LDR      r0,|L4.240|
000048  6800              LDR      r0,[r0,#0]
00004a  2101              MOVS     r1,#1
00004c  40a9              LSLS     r1,r1,r5
00004e  b2c9              UXTB     r1,r1
000050  4008              ANDS     r0,r0,r1
000052  b108              CBZ      r0,|L4.88|
;;;408    			return SET;
000054  2001              MOVS     r0,#1
                  |L4.86|
;;;409    		return RESET;
;;;410    	case GPDMA_STAT_INTTC: // check terminal count interrupt request status for DMA
;;;411    		if (LPC_GPDMA->DMACIntTCStat & GPDMA_DMACIntTCStat_Ch(channel))
;;;412    			return SET;
;;;413    		return RESET;
;;;414    	case GPDMA_STAT_INTERR: //check interrupt status for DMA channels
;;;415    		if (LPC_GPDMA->DMACIntErrStat & GPDMA_DMACIntTCClear_Ch(channel))
;;;416    			return SET;
;;;417    		return RESET;
;;;418    	case GPDMA_STAT_RAWINTTC: //check status of the terminal count interrupt for DMA channels
;;;419    		if (LPC_GPDMA->DMACRawIntErrStat & GPDMA_DMACRawIntTCStat_Ch(channel))
;;;420    			return SET;
;;;421    		return RESET;
;;;422    	case GPDMA_STAT_RAWINTERR: //check status of the error interrupt for DMA channels
;;;423    		if (LPC_GPDMA->DMACRawIntTCStat & GPDMA_DMACRawIntErrStat_Ch(channel))
;;;424    			return SET;
;;;425    		return RESET;
;;;426    	default: //check enable status for DMA channels
;;;427    		if (LPC_GPDMA->DMACEnbldChns & GPDMA_DMACEnbldChns_Ch(channel))
;;;428    			return SET;
;;;429    		return RESET;
;;;430    	}
;;;431    }
000056  bd70              POP      {r4-r6,pc}
                  |L4.88|
000058  2000              MOVS     r0,#0                 ;409
00005a  e7fc              B        |L4.86|
00005c  4824              LDR      r0,|L4.240|
00005e  6840              LDR      r0,[r0,#4]            ;411
000060  2101              MOVS     r1,#1                 ;411
000062  40a9              LSLS     r1,r1,r5              ;411
000064  b2c9              UXTB     r1,r1                 ;411
000066  4008              ANDS     r0,r0,r1              ;411
000068  b108              CBZ      r0,|L4.110|
00006a  2001              MOVS     r0,#1                 ;412
00006c  e7f3              B        |L4.86|
                  |L4.110|
00006e  2000              MOVS     r0,#0                 ;413
000070  e7f1              B        |L4.86|
000072  481f              LDR      r0,|L4.240|
000074  68c0              LDR      r0,[r0,#0xc]          ;415
000076  2101              MOVS     r1,#1                 ;415
000078  40a9              LSLS     r1,r1,r5              ;415
00007a  b2c9              UXTB     r1,r1                 ;415
00007c  4008              ANDS     r0,r0,r1              ;415
00007e  b108              CBZ      r0,|L4.132|
000080  2001              MOVS     r0,#1                 ;416
000082  e7e8              B        |L4.86|
                  |L4.132|
000084  2000              MOVS     r0,#0                 ;417
000086  e7e6              B        |L4.86|
000088  4819              LDR      r0,|L4.240|
00008a  6980              LDR      r0,[r0,#0x18]         ;419
00008c  2101              MOVS     r1,#1                 ;419
00008e  40a9              LSLS     r1,r1,r5              ;419
000090  b2c9              UXTB     r1,r1                 ;419
000092  4008              ANDS     r0,r0,r1              ;419
000094  b108              CBZ      r0,|L4.154|
000096  2001              MOVS     r0,#1                 ;420
000098  e7dd              B        |L4.86|
                  |L4.154|
00009a  2000              MOVS     r0,#0                 ;421
00009c  e7db              B        |L4.86|
00009e  4814              LDR      r0,|L4.240|
0000a0  6941              LDR      r1,[r0,#0x14]         ;423
0000a2  2001              MOVS     r0,#1                 ;423
0000a4  40a8              LSLS     r0,r0,r5              ;423
0000a6  b2c0              UXTB     r0,r0                 ;423
0000a8  4001              ANDS     r1,r1,r0              ;423
0000aa  b109              CBZ      r1,|L4.176|
0000ac  2001              MOVS     r0,#1                 ;424
0000ae  e7d2              B        |L4.86|
                  |L4.176|
0000b0  2000              MOVS     r0,#0                 ;425
0000b2  e7d0              B        |L4.86|
                  |L4.180|
0000b4  480e              LDR      r0,|L4.240|
0000b6  69c0              LDR      r0,[r0,#0x1c]         ;427
0000b8  2101              MOVS     r1,#1                 ;427
0000ba  40a9              LSLS     r1,r1,r5              ;427
0000bc  b2c9              UXTB     r1,r1                 ;427
0000be  4008              ANDS     r0,r0,r1              ;427
0000c0  b108              CBZ      r0,|L4.198|
0000c2  2001              MOVS     r0,#1                 ;428
0000c4  e7c7              B        |L4.86|
                  |L4.198|
0000c6  2000              MOVS     r0,#0                 ;429
0000c8  e7c5              B        |L4.86|
;;;432    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L4.204|
0000cc  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_gpdma.c",0
0000d0  44726976
0000d4  6572735c
0000d8  736f7572
0000dc  63655c6c
0000e0  70633137
0000e4  78785f67
0000e8  70646d61
0000ec  2e6300  
0000ef  00                DCB      0
                  |L4.240|
                          DCD      0x50004000

                          AREA ||i.GPDMA_Setup||, CODE, READONLY, ALIGN=2

                  GPDMA_Setup PROC
;;;234     *********************************************************************/
;;;235    Status GPDMA_Setup(GPDMA_Channel_CFG_Type *GPDMAChannelConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;236    {
000002  4601              MOV      r1,r0
;;;237    	LPC_GPDMACH_TypeDef *pDMAch;
;;;238    	uint32_t tmp1, tmp2;
;;;239    
;;;240    	if (LPC_GPDMA->DMACEnbldChns & (GPDMA_DMACEnbldChns_Ch(GPDMAChannelConfig->ChannelNum))) {
000004  488d              LDR      r0,|L5.572|
000006  69c0              LDR      r0,[r0,#0x1c]
000008  780e              LDRB     r6,[r1,#0]
00000a  2501              MOVS     r5,#1
00000c  40b5              LSLS     r5,r5,r6
00000e  b2ed              UXTB     r5,r5
000010  4028              ANDS     r0,r0,r5
000012  b108              CBZ      r0,|L5.24|
;;;241    		// This channel is enabled, return ERROR, need to release this channel first
;;;242    		return ERROR;
000014  2000              MOVS     r0,#0
                  |L5.22|
;;;243    	}
;;;244    
;;;245    	// Get Channel pointer
;;;246    	pDMAch = (LPC_GPDMACH_TypeDef *) pGPDMACh[GPDMAChannelConfig->ChannelNum];
;;;247    
;;;248    	// Reset the Interrupt status
;;;249    	LPC_GPDMA->DMACIntTCClear = GPDMA_DMACIntTCClear_Ch(GPDMAChannelConfig->ChannelNum);
;;;250    	LPC_GPDMA->DMACIntErrClr = GPDMA_DMACIntErrClr_Ch(GPDMAChannelConfig->ChannelNum);
;;;251    
;;;252    	// Clear DMA configure
;;;253    	pDMAch->DMACCControl = 0x00;
;;;254    	pDMAch->DMACCConfig = 0x00;
;;;255    
;;;256    	/* Assign Linker List Item value */
;;;257    	pDMAch->DMACCLLI = GPDMAChannelConfig->DMALLI;
;;;258    
;;;259    	/* Set value to Channel Control Registers */
;;;260    	switch (GPDMAChannelConfig->TransferType)
;;;261    	{
;;;262    	// Memory to memory
;;;263    	case GPDMA_TRANSFERTYPE_M2M:
;;;264    		// Assign physical source and destination address
;;;265    		pDMAch->DMACCSrcAddr = GPDMAChannelConfig->SrcMemAddr;
;;;266    		pDMAch->DMACCDestAddr = GPDMAChannelConfig->DstMemAddr;
;;;267    		pDMAch->DMACCControl
;;;268    				= GPDMA_DMACCxControl_TransferSize(GPDMAChannelConfig->TransferSize) \
;;;269    						| GPDMA_DMACCxControl_SBSize(GPDMA_BSIZE_32) \
;;;270    						| GPDMA_DMACCxControl_DBSize(GPDMA_BSIZE_32) \
;;;271    						| GPDMA_DMACCxControl_SWidth(GPDMAChannelConfig->TransferWidth) \
;;;272    						| GPDMA_DMACCxControl_DWidth(GPDMAChannelConfig->TransferWidth) \
;;;273    						| GPDMA_DMACCxControl_SI \
;;;274    						| GPDMA_DMACCxControl_DI \
;;;275    						| GPDMA_DMACCxControl_I;
;;;276    		break;
;;;277    	// Memory to peripheral
;;;278    	case GPDMA_TRANSFERTYPE_M2P:
;;;279    		// Assign physical source
;;;280    		pDMAch->DMACCSrcAddr = GPDMAChannelConfig->SrcMemAddr;
;;;281    		// Assign peripheral destination address
;;;282    		pDMAch->DMACCDestAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->DstConn];
;;;283    		pDMAch->DMACCControl
;;;284    				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
;;;285    						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
;;;286    						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
;;;287    						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
;;;288    						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
;;;289    						| GPDMA_DMACCxControl_SI \
;;;290    						| GPDMA_DMACCxControl_I;
;;;291    		break;
;;;292    	// Peripheral to memory
;;;293    	case GPDMA_TRANSFERTYPE_P2M:
;;;294    		// Assign peripheral source address
;;;295    		pDMAch->DMACCSrcAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->SrcConn];
;;;296    		// Assign memory destination address
;;;297    		pDMAch->DMACCDestAddr = GPDMAChannelConfig->DstMemAddr;
;;;298    		pDMAch->DMACCControl
;;;299    				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
;;;300    						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
;;;301    						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
;;;302    						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
;;;303    						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
;;;304    						| GPDMA_DMACCxControl_DI \
;;;305    						| GPDMA_DMACCxControl_I;
;;;306    		break;
;;;307    	// Peripheral to peripheral
;;;308    	case GPDMA_TRANSFERTYPE_P2P:
;;;309    		// Assign peripheral source address
;;;310    		pDMAch->DMACCSrcAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->SrcConn];
;;;311    		// Assign peripheral destination address
;;;312    		pDMAch->DMACCDestAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->DstConn];
;;;313    		pDMAch->DMACCControl
;;;314    				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
;;;315    						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
;;;316    						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
;;;317    						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
;;;318    						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
;;;319    						| GPDMA_DMACCxControl_I;
;;;320    		break;
;;;321    	// Do not support any more transfer type, return ERROR
;;;322    	default:
;;;323    		return ERROR;
;;;324    	}
;;;325    
;;;326    	/* Re-Configure DMA Request Select for source peripheral */
;;;327    	if (GPDMAChannelConfig->SrcConn > 15)
;;;328    	{
;;;329    		LPC_SC->DMAREQSEL |= (1<<(GPDMAChannelConfig->SrcConn - 16));
;;;330    	} else {
;;;331    		LPC_SC->DMAREQSEL &= ~(1<<(GPDMAChannelConfig->SrcConn - 8));
;;;332    	}
;;;333    
;;;334    	/* Re-Configure DMA Request Select for Destination peripheral */
;;;335    	if (GPDMAChannelConfig->DstConn > 15)
;;;336    	{
;;;337    		LPC_SC->DMAREQSEL |= (1<<(GPDMAChannelConfig->DstConn - 16));
;;;338    	} else {
;;;339    		LPC_SC->DMAREQSEL &= ~(1<<(GPDMAChannelConfig->DstConn - 8));
;;;340    	}
;;;341    
;;;342    	/* Enable DMA channels, little endian */
;;;343    	LPC_GPDMA->DMACConfig = GPDMA_DMACConfig_E;
;;;344    	while (!(LPC_GPDMA->DMACConfig & GPDMA_DMACConfig_E));
;;;345    
;;;346    	// Calculate absolute value for Connection number
;;;347    	tmp1 = GPDMAChannelConfig->SrcConn;
;;;348    	tmp1 = ((tmp1 > 15) ? (tmp1 - 8) : tmp1);
;;;349    	tmp2 = GPDMAChannelConfig->DstConn;
;;;350    	tmp2 = ((tmp2 > 15) ? (tmp2 - 8) : tmp2);
;;;351    
;;;352    	// Configure DMA Channel, enable Error Counter and Terminate counter
;;;353    	pDMAch->DMACCConfig = GPDMA_DMACCxConfig_IE | GPDMA_DMACCxConfig_ITC /*| GPDMA_DMACCxConfig_E*/ \
;;;354    		| GPDMA_DMACCxConfig_TransferType((uint32_t)GPDMAChannelConfig->TransferType) \
;;;355    		| GPDMA_DMACCxConfig_SrcPeripheral(tmp1) \
;;;356    		| GPDMA_DMACCxConfig_DestPeripheral(tmp2);
;;;357    
;;;358    	return SUCCESS;
;;;359    }
000016  bd70              POP      {r4-r6,pc}
                  |L5.24|
000018  4d89              LDR      r5,|L5.576|
00001a  6808              LDR      r0,[r1,#0]            ;246
00001c  f8552020          LDR      r2,[r5,r0,LSL #2]     ;246
000020  780d              LDRB     r5,[r1,#0]            ;249
000022  2001              MOVS     r0,#1                 ;249
000024  40a8              LSLS     r0,r0,r5              ;249
000026  b2c0              UXTB     r0,r0                 ;249
000028  4d84              LDR      r5,|L5.572|
00002a  60a8              STR      r0,[r5,#8]            ;249
00002c  780d              LDRB     r5,[r1,#0]            ;250
00002e  2001              MOVS     r0,#1                 ;250
000030  40a8              LSLS     r0,r0,r5              ;250
000032  b2c0              UXTB     r0,r0                 ;250
000034  4d81              LDR      r5,|L5.572|
000036  6128              STR      r0,[r5,#0x10]         ;250
000038  2000              MOVS     r0,#0                 ;253
00003a  60d0              STR      r0,[r2,#0xc]          ;253
00003c  6110              STR      r0,[r2,#0x10]         ;254
00003e  6a08              LDR      r0,[r1,#0x20]         ;257
000040  6090              STR      r0,[r2,#8]            ;257
000042  6948              LDR      r0,[r1,#0x14]         ;260
000044  b130              CBZ      r0,|L5.84|
000046  2801              CMP      r0,#1                 ;260
000048  d01b              BEQ      |L5.130|
00004a  2802              CMP      r0,#2                 ;260
00004c  d040              BEQ      |L5.208|
00004e  2803              CMP      r0,#3                 ;260
000050  d17e              BNE      |L5.336|
000052  e064              B        |L5.286|
                  |L5.84|
000054  68c8              LDR      r0,[r1,#0xc]          ;265
000056  6010              STR      r0,[r2,#0]            ;265
000058  6908              LDR      r0,[r1,#0x10]         ;266
00005a  6050              STR      r0,[r2,#4]            ;266
00005c  8888              LDRH     r0,[r1,#4]            ;267
00005e  f3c0000b          UBFX     r0,r0,#0,#12          ;267
000062  f4403010          ORR      r0,r0,#0x24000        ;267
000066  7a0d              LDRB     r5,[r1,#8]            ;267
000068  f0050507          AND      r5,r5,#7              ;267
00006c  ea404085          ORR      r0,r0,r5,LSL #18      ;267
000070  7a0d              LDRB     r5,[r1,#8]            ;267
000072  f0050507          AND      r5,r5,#7              ;267
000076  ea405045          ORR      r0,r0,r5,LSL #21      ;267
00007a  f040400c          ORR      r0,r0,#0x8c000000     ;267
00007e  60d0              STR      r0,[r2,#0xc]          ;267
000080  e07a              B        |L5.376|
                  |L5.130|
000082  68c8              LDR      r0,[r1,#0xc]          ;280
000084  6010              STR      r0,[r2,#0]            ;280
000086  4d6f              LDR      r5,|L5.580|
000088  69c8              LDR      r0,[r1,#0x1c]         ;282
00008a  f8550020          LDR      r0,[r5,r0,LSL #2]     ;282
00008e  6050              STR      r0,[r2,#4]            ;282
000090  4d6d              LDR      r5,|L5.584|
000092  69c8              LDR      r0,[r1,#0x1c]         ;283
000094  5c28              LDRB     r0,[r5,r0]            ;283
000096  f0000507          AND      r5,r0,#7              ;283
00009a  6848              LDR      r0,[r1,#4]            ;283
00009c  f365301f          BFI      r0,r5,#12,#20         ;283
0000a0  4e69              LDR      r6,|L5.584|
0000a2  69cd              LDR      r5,[r1,#0x1c]         ;283
0000a4  5d75              LDRB     r5,[r6,r5]            ;283
0000a6  f0050507          AND      r5,r5,#7              ;283
0000aa  ea4030c5          ORR      r0,r0,r5,LSL #15      ;283
0000ae  4e67              LDR      r6,|L5.588|
0000b0  69cd              LDR      r5,[r1,#0x1c]         ;283
0000b2  5d75              LDRB     r5,[r6,r5]            ;283
0000b4  f0050507          AND      r5,r5,#7              ;283
0000b8  ea404085          ORR      r0,r0,r5,LSL #18      ;283
0000bc  69cd              LDR      r5,[r1,#0x1c]         ;283
0000be  5d75              LDRB     r5,[r6,r5]            ;283
0000c0  f0050507          AND      r5,r5,#7              ;283
0000c4  ea405045          ORR      r0,r0,r5,LSL #21      ;283
0000c8  f0404004          ORR      r0,r0,#0x84000000     ;283
0000cc  60d0              STR      r0,[r2,#0xc]          ;283
0000ce  e053              B        |L5.376|
                  |L5.208|
0000d0  4d5c              LDR      r5,|L5.580|
0000d2  6988              LDR      r0,[r1,#0x18]         ;295
0000d4  f8550020          LDR      r0,[r5,r0,LSL #2]     ;295
0000d8  6010              STR      r0,[r2,#0]            ;295
0000da  6908              LDR      r0,[r1,#0x10]         ;297
0000dc  6050              STR      r0,[r2,#4]            ;297
0000de  4d5a              LDR      r5,|L5.584|
0000e0  6988              LDR      r0,[r1,#0x18]         ;298
0000e2  5c28              LDRB     r0,[r5,r0]            ;298
0000e4  f0000507          AND      r5,r0,#7              ;298
0000e8  6848              LDR      r0,[r1,#4]            ;298
0000ea  f365301f          BFI      r0,r5,#12,#20         ;298
0000ee  4e56              LDR      r6,|L5.584|
0000f0  698d              LDR      r5,[r1,#0x18]         ;298
0000f2  5d75              LDRB     r5,[r6,r5]            ;298
0000f4  f0050507          AND      r5,r5,#7              ;298
0000f8  ea4030c5          ORR      r0,r0,r5,LSL #15      ;298
0000fc  4e53              LDR      r6,|L5.588|
0000fe  698d              LDR      r5,[r1,#0x18]         ;298
000100  5d75              LDRB     r5,[r6,r5]            ;298
000102  f0050507          AND      r5,r5,#7              ;298
000106  ea404085          ORR      r0,r0,r5,LSL #18      ;298
00010a  698d              LDR      r5,[r1,#0x18]         ;298
00010c  5d75              LDRB     r5,[r6,r5]            ;298
00010e  f0050507          AND      r5,r5,#7              ;298
000112  ea405045          ORR      r0,r0,r5,LSL #21      ;298
000116  f0404008          ORR      r0,r0,#0x88000000     ;298
00011a  60d0              STR      r0,[r2,#0xc]          ;298
00011c  e02c              B        |L5.376|
                  |L5.286|
00011e  4d49              LDR      r5,|L5.580|
000120  6988              LDR      r0,[r1,#0x18]         ;310
000122  f8550020          LDR      r0,[r5,r0,LSL #2]     ;310
000126  6010              STR      r0,[r2,#0]            ;310
000128  69c8              LDR      r0,[r1,#0x1c]         ;312
00012a  f8550020          LDR      r0,[r5,r0,LSL #2]     ;312
00012e  6050              STR      r0,[r2,#4]            ;312
000130  4d45              LDR      r5,|L5.584|
000132  6988              LDR      r0,[r1,#0x18]         ;313
000134  5c28              LDRB     r0,[r5,r0]            ;313
000136  f0000507          AND      r5,r0,#7              ;313
00013a  6848              LDR      r0,[r1,#4]            ;313
00013c  f365301f          BFI      r0,r5,#12,#20         ;313
000140  4e41              LDR      r6,|L5.584|
000142  69cd              LDR      r5,[r1,#0x1c]         ;313
000144  5d75              LDRB     r5,[r6,r5]            ;313
000146  f0050507          AND      r5,r5,#7              ;313
00014a  ea4030c5          ORR      r0,r0,r5,LSL #15      ;313
00014e  e000              B        |L5.338|
                  |L5.336|
000150  e010              B        |L5.372|
                  |L5.338|
000152  4e3e              LDR      r6,|L5.588|
000154  698d              LDR      r5,[r1,#0x18]         ;313
000156  5d75              LDRB     r5,[r6,r5]            ;313
000158  f0050507          AND      r5,r5,#7              ;313
00015c  ea404085          ORR      r0,r0,r5,LSL #18      ;313
000160  69cd              LDR      r5,[r1,#0x1c]         ;313
000162  5d75              LDRB     r5,[r6,r5]            ;313
000164  f0050507          AND      r5,r5,#7              ;313
000168  ea405045          ORR      r0,r0,r5,LSL #21      ;313
00016c  f0404000          ORR      r0,r0,#0x80000000     ;313
000170  60d0              STR      r0,[r2,#0xc]          ;313
000172  e001              B        |L5.376|
                  |L5.372|
000174  2000              MOVS     r0,#0                 ;323
000176  e74e              B        |L5.22|
                  |L5.376|
000178  bf00              NOP                            ;276
00017a  6988              LDR      r0,[r1,#0x18]         ;327
00017c  280f              CMP      r0,#0xf               ;327
00017e  d90b              BLS      |L5.408|
000180  4833              LDR      r0,|L5.592|
000182  f8d001c4          LDR      r0,[r0,#0x1c4]        ;329
000186  7e0d              LDRB     r5,[r1,#0x18]         ;329
000188  3d10              SUBS     r5,r5,#0x10           ;329
00018a  2601              MOVS     r6,#1                 ;329
00018c  40ae              LSLS     r6,r6,r5              ;329
00018e  4330              ORRS     r0,r0,r6              ;329
000190  4d2f              LDR      r5,|L5.592|
000192  f8c501c4          STR      r0,[r5,#0x1c4]        ;329
000196  e00a              B        |L5.430|
                  |L5.408|
000198  482d              LDR      r0,|L5.592|
00019a  f8d001c4          LDR      r0,[r0,#0x1c4]        ;331
00019e  7e0d              LDRB     r5,[r1,#0x18]         ;331
0001a0  3d08              SUBS     r5,r5,#8              ;331
0001a2  2601              MOVS     r6,#1                 ;331
0001a4  40ae              LSLS     r6,r6,r5              ;331
0001a6  43b0              BICS     r0,r0,r6              ;331
0001a8  4d29              LDR      r5,|L5.592|
0001aa  f8c501c4          STR      r0,[r5,#0x1c4]        ;331
                  |L5.430|
0001ae  69c8              LDR      r0,[r1,#0x1c]         ;335
0001b0  280f              CMP      r0,#0xf               ;335
0001b2  d90b              BLS      |L5.460|
0001b4  4826              LDR      r0,|L5.592|
0001b6  f8d001c4          LDR      r0,[r0,#0x1c4]        ;337
0001ba  7f0d              LDRB     r5,[r1,#0x1c]         ;337
0001bc  3d10              SUBS     r5,r5,#0x10           ;337
0001be  2601              MOVS     r6,#1                 ;337
0001c0  40ae              LSLS     r6,r6,r5              ;337
0001c2  4330              ORRS     r0,r0,r6              ;337
0001c4  4d22              LDR      r5,|L5.592|
0001c6  f8c501c4          STR      r0,[r5,#0x1c4]        ;337
0001ca  e00a              B        |L5.482|
                  |L5.460|
0001cc  4820              LDR      r0,|L5.592|
0001ce  f8d001c4          LDR      r0,[r0,#0x1c4]        ;339
0001d2  7f0d              LDRB     r5,[r1,#0x1c]         ;339
0001d4  3d08              SUBS     r5,r5,#8              ;339
0001d6  2601              MOVS     r6,#1                 ;339
0001d8  40ae              LSLS     r6,r6,r5              ;339
0001da  43b0              BICS     r0,r0,r6              ;339
0001dc  4d1c              LDR      r5,|L5.592|
0001de  f8c501c4          STR      r0,[r5,#0x1c4]        ;339
                  |L5.482|
0001e2  2001              MOVS     r0,#1                 ;343
0001e4  4d15              LDR      r5,|L5.572|
0001e6  6328              STR      r0,[r5,#0x30]         ;343
0001e8  bf00              NOP                            ;344
                  |L5.490|
0001ea  4814              LDR      r0,|L5.572|
0001ec  6b00              LDR      r0,[r0,#0x30]         ;344
0001ee  f0000001          AND      r0,r0,#1              ;344
0001f2  2800              CMP      r0,#0                 ;344
0001f4  d0f9              BEQ      |L5.490|
0001f6  698b              LDR      r3,[r1,#0x18]         ;347
0001f8  2b0f              CMP      r3,#0xf               ;348
0001fa  d902              BLS      |L5.514|
0001fc  f1a30008          SUB      r0,r3,#8              ;348
000200  e000              B        |L5.516|
                  |L5.514|
000202  4618              MOV      r0,r3                 ;348
                  |L5.516|
000204  4603              MOV      r3,r0                 ;348
000206  69cc              LDR      r4,[r1,#0x1c]         ;349
000208  2c0f              CMP      r4,#0xf               ;350
00020a  d902              BLS      |L5.530|
00020c  f1a40008          SUB      r0,r4,#8              ;350
000210  e000              B        |L5.532|
                  |L5.530|
000212  4620              MOV      r0,r4                 ;350
                  |L5.532|
000214  4604              MOV      r4,r0                 ;350
000216  7d08              LDRB     r0,[r1,#0x14]         ;353
000218  f0000007          AND      r0,r0,#7              ;353
00021c  f44f4540          MOV      r5,#0xc000            ;353
000220  ea4520c0          ORR      r0,r5,r0,LSL #11      ;353
000224  f003051f          AND      r5,r3,#0x1f           ;353
000228  ea400045          ORR      r0,r0,r5,LSL #1       ;353
00022c  f004051f          AND      r5,r4,#0x1f           ;353
000230  ea401085          ORR      r0,r0,r5,LSL #6       ;353
000234  6110              STR      r0,[r2,#0x10]         ;353
000236  2001              MOVS     r0,#1                 ;358
000238  e6ed              B        |L5.22|
;;;360    
                          ENDP

00023a  0000              DCW      0x0000
                  |L5.572|
                          DCD      0x50004000
                  |L5.576|
                          DCD      pGPDMACh
                  |L5.580|
                          DCD      GPDMA_LUTPerAddr
                  |L5.584|
                          DCD      GPDMA_LUTPerBurst
                  |L5.588|
                          DCD      GPDMA_LUTPerWid
                  |L5.592|
                          DCD      0x400fc000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  GPDMA_LUTPerBurst
000000  01010101          DCB      0x01,0x01,0x01,0x01
000004  00040400          DCB      0x00,0x04,0x04,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
000014  00000000          DCB      0x00,0x00,0x00,0x00
                  GPDMA_LUTPerWid
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  02020200          DCB      0x02,0x02,0x02,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  02020202          DCB      0x02,0x02,0x02,0x02
00002c  02020202          DCB      0x02,0x02,0x02,0x02

                          AREA ||.data||, DATA, ALIGN=2

                  GPDMA_LUTPerAddr
                          DCD      0x40088008
                          DCD      0x40088008
                          DCD      0x40030008
                          DCD      0x40030008
                          DCD      0x40034004
                          DCD      0x400a8008
                          DCD      0x400a800c
                          DCD      0x4008c000
                          DCD      0x4000c000
                          DCD      0x4000c000
                          DCD      0x40010000
                          DCD      0x40010000
                          DCD      0x40098000
                          DCD      0x40098000
                          DCD      0x4009c000
                          DCD      0x4009c000
                          DCD      0x40004018
                          DCD      0x4000401c
                          DCD      0x40008018
                          DCD      0x4000801c
                          DCD      0x40090018
                          DCD      0x4009001c
                          DCD      0x40094018
                          DCD      0x4009401c
                  pGPDMACh
                          DCD      0x50004100
                          DCD      0x50004120
                          DCD      0x50004140
                          DCD      0x50004160
                          DCD      0x50004180
                          DCD      0x500041a0
                          DCD      0x500041c0
                          DCD      0x500041e0

;*** Start embedded assembler ***

#line 1 "Lib\\Drivers\\source\\lpc17xx_gpdma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_lpc17xx_gpdma_c_15acc267____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_lpc17xx_gpdma_c_15acc267____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_lpc17xx_gpdma_c_15acc267____REVSH|
#line 144
|__asm___15_lpc17xx_gpdma_c_15acc267____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
