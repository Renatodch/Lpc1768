; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\lpc17xx_iap.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_iap.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\lpc17xx_iap.crf Lib\Drivers\source\lpc17xx_iap.c]
                          THUMB

                          AREA ||i.BlankCheckSector||, CODE, READONLY, ALIGN=2

                  BlankCheckSector PROC
;;;165     **********************************************************************/
;;;166    IAP_STATUS_CODE BlankCheckSector(uint32_t start_sec, uint32_t end_sec,
000000  b5f0              PUSH     {r4-r7,lr}
;;;167                                     uint32_t *first_nblank_loc, 
;;;168    								 uint32_t *first_nblank_val)
;;;169    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;170        IAP_COMMAND_Type command;
;;;171    	
;;;172        command.cmd    = IAP_BLANK_CHECK;                // Prepare Sector for Write
00000c  2035              MOVS     r0,#0x35
00000e  9001              STR      r0,[sp,#4]
;;;173        command.param[0] = start_sec;                    // Start Sector
000010  9602              STR      r6,[sp,#8]
;;;174        command.param[1] = end_sec;                      // End Sector
000012  9703              STR      r7,[sp,#0xc]
;;;175        IAP_Call (&command.cmd, &command.status);        // Call IAP Command
000014  a906              ADD      r1,sp,#0x18
000016  a801              ADD      r0,sp,#4
000018  4a07              LDR      r2,|L1.56|
00001a  6812              LDR      r2,[r2,#0]  ; iap_entry
00001c  4790              BLX      r2
;;;176    
;;;177    	if(command.status == SECTOR_NOT_BLANK)
00001e  9806              LDR      r0,[sp,#0x18]
000020  2808              CMP      r0,#8
000022  d105              BNE      |L1.48|
;;;178    	{
;;;179    	  // Update out value
;;;180    	  if(first_nblank_loc != NULL)
000024  b10c              CBZ      r4,|L1.42|
;;;181    	      *first_nblank_loc =  command.result[0];
000026  9807              LDR      r0,[sp,#0x1c]
000028  6020              STR      r0,[r4,#0]
                  |L1.42|
;;;182    	  if(first_nblank_val != NULL)
00002a  b10d              CBZ      r5,|L1.48|
;;;183    	      *first_nblank_val =  command.result[1];
00002c  9808              LDR      r0,[sp,#0x20]
00002e  6028              STR      r0,[r5,#0]
                  |L1.48|
;;;184        }
;;;185    
;;;186        return (IAP_STATUS_CODE)command.status;
000030  9806              LDR      r0,[sp,#0x18]
000032  b2c0              UXTB     r0,r0
;;;187    }
000034  b00b              ADD      sp,sp,#0x2c
000036  bdf0              POP      {r4-r7,pc}
;;;188    
                          ENDP

                  |L1.56|
                          DCD      iap_entry

                          AREA ||i.Compare||, CODE, READONLY, ALIGN=2

                  Compare PROC
;;;278     **********************************************************************/
;;;279    IAP_STATUS_CODE Compare(uint8_t *addr1, uint8_t *addr2, uint32_t size)
000000  b570              PUSH     {r4-r6,lr}
;;;280    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;281       IAP_COMMAND_Type command;
;;;282       command.cmd = IAP_COMPARE;
00000a  2038              MOVS     r0,#0x38
00000c  9000              STR      r0,[sp,#0]
;;;283       command.param[0] = (uint32_t)addr1;
00000e  9401              STR      r4,[sp,#4]
;;;284       command.param[1] = (uint32_t)addr2;
000010  9602              STR      r6,[sp,#8]
;;;285       command.param[2] = size;
000012  9503              STR      r5,[sp,#0xc]
;;;286       IAP_Call (&command.cmd, &command.status);        // Call IAP Command
000014  a905              ADD      r1,sp,#0x14
000016  4668              MOV      r0,sp
000018  4a03              LDR      r2,|L2.40|
00001a  6812              LDR      r2,[r2,#0]  ; iap_entry
00001c  4790              BLX      r2
;;;287    
;;;288       return (IAP_STATUS_CODE)command.status;
00001e  9805              LDR      r0,[sp,#0x14]
000020  b2c0              UXTB     r0,r0
;;;289    }
000022  b00a              ADD      sp,sp,#0x28
000024  bd70              POP      {r4-r6,pc}
;;;290    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      iap_entry

                          AREA ||i.CopyRAM2Flash||, CODE, READONLY, ALIGN=2

                  CopyRAM2Flash PROC
;;;97      **********************************************************************/
;;;98     IAP_STATUS_CODE CopyRAM2Flash(uint8_t * dest, uint8_t* source, IAP_WRITE_SIZE size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;99     {
000004  b08a              SUB      sp,sp,#0x28
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
;;;100        uint32_t sec;
;;;101        IAP_STATUS_CODE status;
;;;102        IAP_COMMAND_Type command;
;;;103    
;;;104    	// Prepare sectors
;;;105        sec = GetSecNum((uint32_t)dest);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       GetSecNum
000012  4680              MOV      r8,r0
;;;106       	status = PrepareSector(sec, sec);
000014  4641              MOV      r1,r8
000016  4640              MOV      r0,r8
000018  f7fffffe          BL       PrepareSector
00001c  4607              MOV      r7,r0
;;;107    	if(status != CMD_SUCCESS)
00001e  b11f              CBZ      r7,|L3.40|
;;;108            return status;
000020  4638              MOV      r0,r7
                  |L3.34|
;;;109       
;;;110    	// write
;;;111    	command.cmd    = IAP_COPY_RAM2FLASH;             // Copy RAM to Flash
;;;112        command.param[0] = (uint32_t)dest;                 // Destination Flash Address
;;;113        command.param[1] = (uint32_t)source;               // Source RAM Address
;;;114        command.param[2] =  size;                          // Number of bytes
;;;115        command.param[3] =  SystemCoreClock / 1000;         // CCLK in kHz
;;;116        IAP_Call (&command.cmd, &command.status);              // Call IAP Command
;;;117    	  
;;;118        return (IAP_STATUS_CODE)command.status;             // Finished without Errors	  
;;;119    }
000022  b00a              ADD      sp,sp,#0x28
000024  e8bd81f0          POP      {r4-r8,pc}
                  |L3.40|
000028  2033              MOVS     r0,#0x33              ;111
00002a  9000              STR      r0,[sp,#0]            ;111
00002c  9401              STR      r4,[sp,#4]            ;112
00002e  9502              STR      r5,[sp,#8]            ;113
000030  9603              STR      r6,[sp,#0xc]          ;114
000032  4807              LDR      r0,|L3.80|
000034  6800              LDR      r0,[r0,#0]            ;115  ; SystemCoreClock
000036  f44f717a          MOV      r1,#0x3e8             ;115
00003a  fbb0f1f1          UDIV     r1,r0,r1              ;115
00003e  9104              STR      r1,[sp,#0x10]         ;115
000040  a905              ADD      r1,sp,#0x14           ;116
000042  4668              MOV      r0,sp                 ;116
000044  4a03              LDR      r2,|L3.84|
000046  6812              LDR      r2,[r2,#0]            ;116  ; iap_entry
000048  4790              BLX      r2                    ;116
00004a  9805              LDR      r0,[sp,#0x14]         ;118
00004c  b2c0              UXTB     r0,r0                 ;118
00004e  e7e8              B        |L3.34|
;;;120    
                          ENDP

                  |L3.80|
                          DCD      SystemCoreClock
                  |L3.84|
                          DCD      iap_entry

                          AREA ||i.EraseSector||, CODE, READONLY, ALIGN=2

                  EraseSector PROC
;;;132     **********************************************************************/
;;;133    IAP_STATUS_CODE EraseSector(uint32_t start_sec, uint32_t end_sec)
000000  b570              PUSH     {r4-r6,lr}
;;;134    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;135        IAP_COMMAND_Type command;
;;;136        IAP_STATUS_CODE status;
;;;137    
;;;138    	// Prepare sectors
;;;139       	status = PrepareSector(start_sec, end_sec);
000008  4631              MOV      r1,r6
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       PrepareSector
000010  4605              MOV      r5,r0
;;;140    	if(status != CMD_SUCCESS)
000012  b115              CBZ      r5,|L4.26|
;;;141            return status;
000014  4628              MOV      r0,r5
                  |L4.22|
;;;142    
;;;143    	// Erase sectors
;;;144        command.cmd    = IAP_ERASE;                    // Prepare Sector for Write
;;;145        command.param[0] = start_sec;                  // Start Sector
;;;146        command.param[1] = end_sec;                    // End Sector
;;;147        command.param[2] =  SystemCoreClock / 1000;         // CCLK in kHz
;;;148        IAP_Call (&command.cmd, &command.status);      // Call IAP Command
;;;149        return (IAP_STATUS_CODE)command.status;  
;;;150    }
000016  b00a              ADD      sp,sp,#0x28
000018  bd70              POP      {r4-r6,pc}
                  |L4.26|
00001a  2034              MOVS     r0,#0x34              ;144
00001c  9000              STR      r0,[sp,#0]            ;144
00001e  9401              STR      r4,[sp,#4]            ;145
000020  9602              STR      r6,[sp,#8]            ;146
000022  4807              LDR      r0,|L4.64|
000024  6800              LDR      r0,[r0,#0]            ;147  ; SystemCoreClock
000026  f44f717a          MOV      r1,#0x3e8             ;147
00002a  fbb0f1f1          UDIV     r1,r0,r1              ;147
00002e  9103              STR      r1,[sp,#0xc]          ;147
000030  a905              ADD      r1,sp,#0x14           ;148
000032  4668              MOV      r0,sp                 ;148
000034  4a03              LDR      r2,|L4.68|
000036  6812              LDR      r2,[r2,#0]            ;148  ; iap_entry
000038  4790              BLX      r2                    ;148
00003a  9805              LDR      r0,[sp,#0x14]         ;149
00003c  b2c0              UXTB     r0,r0                 ;149
00003e  e7ea              B        |L4.22|
;;;151    
                          ENDP

                  |L4.64|
                          DCD      SystemCoreClock
                  |L4.68|
                          DCD      iap_entry

                          AREA ||i.GetSecNum||, CODE, READONLY, ALIGN=1

                  GetSecNum PROC
;;;52      **********************************************************************/
;;;53      uint32_t GetSecNum (uint32_t adr)
000000  4601              MOV      r1,r0
;;;54     {
;;;55         uint32_t n;
;;;56     
;;;57         n = adr >> 12;                               //  4kB Sector
000002  0b08              LSRS     r0,r1,#12
;;;58         if (n >= 0x10) {
000004  2810              CMP      r0,#0x10
000006  d302              BCC      |L5.14|
;;;59           n = 0x0E + (n >> 3);                       // 32kB Sector
000008  220e              MOVS     r2,#0xe
00000a  eb0200d0          ADD      r0,r2,r0,LSR #3
                  |L5.14|
;;;60         } 
;;;61     
;;;62         return (n);                                  // Sector Number
;;;63     }
00000e  4770              BX       lr
;;;64     
                          ENDP


                          AREA ||i.InvokeISP||, CODE, READONLY, ALIGN=2

                  InvokeISP PROC
;;;298     **********************************************************************/
;;;299    void InvokeISP(void)
000000  b500              PUSH     {lr}
;;;300    {
000002  b08b              SUB      sp,sp,#0x2c
;;;301       IAP_COMMAND_Type command;
;;;302       command.cmd = IAP_REINVOKE_ISP;
000004  2039              MOVS     r0,#0x39
000006  9001              STR      r0,[sp,#4]
;;;303       IAP_Call (&command.cmd, &command.status);        // Call IAP Command
000008  a906              ADD      r1,sp,#0x18
00000a  a801              ADD      r0,sp,#4
00000c  4a02              LDR      r2,|L6.24|
00000e  6812              LDR      r2,[r2,#0]  ; iap_entry
000010  4790              BLX      r2
;;;304    }
000012  b00b              ADD      sp,sp,#0x2c
000014  bd00              POP      {pc}
;;;305    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      iap_entry

                          AREA ||i.PrepareSector||, CODE, READONLY, ALIGN=2

                  PrepareSector PROC
;;;73      **********************************************************************/
;;;74     IAP_STATUS_CODE PrepareSector(uint32_t start_sec, uint32_t end_sec)
000000  b530              PUSH     {r4,r5,lr}
;;;75     {
000002  b08b              SUB      sp,sp,#0x2c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;76         IAP_COMMAND_Type command;
;;;77         command.cmd    = IAP_PREPARE;                    // Prepare Sector for Write
000008  2032              MOVS     r0,#0x32
00000a  9001              STR      r0,[sp,#4]
;;;78         command.param[0] = start_sec;                    // Start Sector
00000c  9402              STR      r4,[sp,#8]
;;;79         command.param[1] = end_sec;                      // End Sector
00000e  9503              STR      r5,[sp,#0xc]
;;;80         IAP_Call (&command.cmd, &command.status);        // Call IAP Command
000010  a906              ADD      r1,sp,#0x18
000012  a801              ADD      r0,sp,#4
000014  4a03              LDR      r2,|L7.36|
000016  6812              LDR      r2,[r2,#0]  ; iap_entry
000018  4790              BLX      r2
;;;81         return (IAP_STATUS_CODE)command.status;
00001a  9806              LDR      r0,[sp,#0x18]
00001c  b2c0              UXTB     r0,r0
;;;82     }
00001e  b00b              ADD      sp,sp,#0x2c
000020  bd30              POP      {r4,r5,pc}
;;;83     
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      iap_entry

                          AREA ||i.ReadBootCodeVer||, CODE, READONLY, ALIGN=2

                  ReadBootCodeVer PROC
;;;220     **********************************************************************/
;;;221    IAP_STATUS_CODE ReadBootCodeVer(uint8_t *major, uint8_t* minor)
000000  b530              PUSH     {r4,r5,lr}
;;;222    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;223       IAP_COMMAND_Type command;
;;;224       command.cmd = IAP_READ_BOOT_VER;
000008  2037              MOVS     r0,#0x37
00000a  9001              STR      r0,[sp,#4]
;;;225       IAP_Call (&command.cmd, &command.status);        // Call IAP Command
00000c  a906              ADD      r1,sp,#0x18
00000e  a801              ADD      r0,sp,#4
000010  4a07              LDR      r2,|L8.48|
000012  6812              LDR      r2,[r2,#0]  ; iap_entry
000014  4790              BLX      r2
;;;226    
;;;227       if(command.status == CMD_SUCCESS)
000016  9806              LDR      r0,[sp,#0x18]
000018  b930              CBNZ     r0,|L8.40|
;;;228       {
;;;229          if(major != NULL)
00001a  b114              CBZ      r4,|L8.34|
;;;230    	     *major = (command.result[0] >> 8) & 0xFF;
00001c  9807              LDR      r0,[sp,#0x1c]
00001e  0a00              LSRS     r0,r0,#8
000020  7020              STRB     r0,[r4,#0]
                  |L8.34|
;;;231          if(minor != NULL)
000022  b10d              CBZ      r5,|L8.40|
;;;232    	     *minor = (command.result[0]) & 0xFF;
000024  9807              LDR      r0,[sp,#0x1c]
000026  7028              STRB     r0,[r5,#0]
                  |L8.40|
;;;233       }
;;;234    
;;;235       return (IAP_STATUS_CODE)command.status;
000028  9806              LDR      r0,[sp,#0x18]
00002a  b2c0              UXTB     r0,r0
;;;236    }
00002c  b00b              ADD      sp,sp,#0x2c
00002e  bd30              POP      {r4,r5,pc}
;;;237    
                          ENDP

                  |L8.48|
                          DCD      iap_entry

                          AREA ||i.ReadDeviceSerialNum||, CODE, READONLY, ALIGN=2

                  ReadDeviceSerialNum PROC
;;;245     **********************************************************************/
;;;246    IAP_STATUS_CODE ReadDeviceSerialNum(uint32_t *uid)
000000  b510              PUSH     {r4,lr}
;;;247    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;248       IAP_COMMAND_Type command;
;;;249       command.cmd = IAP_READ_SERIAL_NUMBER;
000006  203a              MOVS     r0,#0x3a
000008  9000              STR      r0,[sp,#0]
;;;250       IAP_Call (&command.cmd, &command.status);        // Call IAP Command
00000a  a905              ADD      r1,sp,#0x14
00000c  4668              MOV      r0,sp
00000e  4a0b              LDR      r2,|L9.60|
000010  6812              LDR      r2,[r2,#0]  ; iap_entry
000012  4790              BLX      r2
;;;251    
;;;252       if(command.status == CMD_SUCCESS)
000014  9805              LDR      r0,[sp,#0x14]
000016  b960              CBNZ     r0,|L9.50|
;;;253       {
;;;254          if(uid != NULL)
000018  b15c              CBZ      r4,|L9.50|
;;;255    	  {
;;;256    	    uint32_t i = 0;
00001a  2000              MOVS     r0,#0
;;;257    		for(i = 0; i < 4; i++)
00001c  bf00              NOP      
00001e  e005              B        |L9.44|
                  |L9.32|
;;;258    	       uid[i] =  command.result[i];
000020  a906              ADD      r1,sp,#0x18
000022  f8511020          LDR      r1,[r1,r0,LSL #2]
000026  f8441020          STR      r1,[r4,r0,LSL #2]
00002a  1c40              ADDS     r0,r0,#1              ;257
                  |L9.44|
00002c  2804              CMP      r0,#4                 ;257
00002e  d3f7              BCC      |L9.32|
;;;259    	  }
000030  bf00              NOP      
                  |L9.50|
;;;260       }
;;;261    
;;;262       return (IAP_STATUS_CODE)command.status;
000032  9805              LDR      r0,[sp,#0x14]
000034  b2c0              UXTB     r0,r0
;;;263    }
000036  b00a              ADD      sp,sp,#0x28
000038  bd10              POP      {r4,pc}
;;;264    
                          ENDP

00003a  0000              DCW      0x0000
                  |L9.60|
                          DCD      iap_entry

                          AREA ||i.ReadPartID||, CODE, READONLY, ALIGN=2

                  ReadPartID PROC
;;;196     **********************************************************************/
;;;197    IAP_STATUS_CODE ReadPartID(uint32_t *partID)
000000  b510              PUSH     {r4,lr}
;;;198    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;199       IAP_COMMAND_Type command;
;;;200       command.cmd = IAP_READ_PART_ID;
000006  2036              MOVS     r0,#0x36
000008  9000              STR      r0,[sp,#0]
;;;201       IAP_Call (&command.cmd, &command.status);        // Call IAP Command
00000a  a905              ADD      r1,sp,#0x14
00000c  4668              MOV      r0,sp
00000e  4a06              LDR      r2,|L10.40|
000010  6812              LDR      r2,[r2,#0]  ; iap_entry
000012  4790              BLX      r2
;;;202    
;;;203       if(command.status == CMD_SUCCESS)
000014  9805              LDR      r0,[sp,#0x14]
000016  b910              CBNZ     r0,|L10.30|
;;;204       {
;;;205          if(partID != NULL)
000018  b10c              CBZ      r4,|L10.30|
;;;206    	     *partID = command.result[0];
00001a  9806              LDR      r0,[sp,#0x18]
00001c  6020              STR      r0,[r4,#0]
                  |L10.30|
;;;207       }
;;;208    
;;;209       return (IAP_STATUS_CODE)command.status;
00001e  9805              LDR      r0,[sp,#0x14]
000020  b2c0              UXTB     r0,r0
;;;210    }
000022  b00a              ADD      sp,sp,#0x28
000024  bd10              POP      {r4,pc}
;;;211    
                          ENDP

000026  0000              DCW      0x0000
                  |L10.40|
                          DCD      iap_entry

                          AREA ||.data||, DATA, ALIGN=2

                  iap_entry
                          DCD      0x1fff1ff1
