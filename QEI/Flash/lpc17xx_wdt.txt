; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\lpc17xx_wdt.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_wdt.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\lpc17xx_wdt.crf Lib\Drivers\source\lpc17xx_wdt.c]
                          THUMB

                          AREA ||i.WDT_ClrTimeOutFlag||, CODE, READONLY, ALIGN=1

                  WDT_ClrTimeOutFlag PROC
;;;216     *********************************************************************/
;;;217    void WDT_ClrTimeOutFlag (void)
000000  f04f4080          MOV      r0,#0x40000000
;;;218    {
;;;219    	LPC_WDT->WDMOD &=~WDT_WDMOD_WDTOF;
000004  7800              LDRB     r0,[r0,#0]
000006  f0200004          BIC      r0,r0,#4
00000a  f04f4180          MOV      r1,#0x40000000
00000e  7008              STRB     r0,[r1,#0]
;;;220    }
000010  4770              BX       lr
;;;221    
                          ENDP


                          AREA ||i.WDT_Feed||, CODE, READONLY, ALIGN=1

                  WDT_Feed PROC
;;;243     *********************************************************************/
;;;244    void WDT_Feed (void)
000000  b672              CPSID    i
;;;245    {
;;;246    	// Disable irq interrupt
;;;247    	__disable_irq();
;;;248    	LPC_WDT->WDFEED = 0xAA;
000002  20aa              MOVS     r0,#0xaa
000004  0741              LSLS     r1,r0,#29
000006  7208              STRB     r0,[r1,#8]
;;;249    	LPC_WDT->WDFEED = 0x55;
000008  2055              MOVS     r0,#0x55
00000a  7208              STRB     r0,[r1,#8]
;;;250    	// Then enable irq interrupt
;;;251    	__enable_irq();
00000c  b662              CPSIE    i
;;;252    }
00000e  4770              BX       lr
;;;253    
                          ENDP


                          AREA ||i.WDT_GetCurrentCount||, CODE, READONLY, ALIGN=1

                  WDT_GetCurrentCount PROC
;;;258     *********************************************************************/
;;;259    uint32_t WDT_GetCurrentCount(void)
000000  f04f4080          MOV      r0,#0x40000000
;;;260    {
;;;261    	return LPC_WDT->WDTV;
000004  68c0              LDR      r0,[r0,#0xc]
;;;262    }
000006  4770              BX       lr
;;;263    
                          ENDP


                          AREA ||i.WDT_Init||, CODE, READONLY, ALIGN=2

                  WDT_Init PROC
;;;169     **********************************************************************/
;;;170    void WDT_Init (WDT_CLK_OPT ClkSrc, WDT_MODE_OPT WDTMode)
000000  b570              PUSH     {r4-r6,lr}
;;;171    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;172    	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
000006  b11c              CBZ      r4,|L4.16|
000008  2c01              CMP      r4,#1
00000a  d001              BEQ      |L4.16|
00000c  2c02              CMP      r4,#2
00000e  d100              BNE      |L4.18|
                  |L4.16|
000010  e003              B        |L4.26|
                  |L4.18|
000012  21ac              MOVS     r1,#0xac
000014  a011              ADR      r0,|L4.92|
000016  f7fffffe          BL       check_failed
                  |L4.26|
;;;173    	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
00001a  b10d              CBZ      r5,|L4.32|
00001c  2d01              CMP      r5,#1
00001e  d100              BNE      |L4.34|
                  |L4.32|
000020  e003              B        |L4.42|
                  |L4.34|
000022  21ad              MOVS     r1,#0xad
000024  a00d              ADR      r0,|L4.92|
000026  f7fffffe          BL       check_failed
                  |L4.42|
;;;174    	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
00002a  2100              MOVS     r1,#0
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       CLKPWR_SetPCLKDiv
;;;175    
;;;176    	//Set clock source
;;;177    	LPC_WDT->WDCLKSEL &= ~WDT_WDCLKSEL_MASK;
000032  f04f4080          MOV      r0,#0x40000000
000036  6900              LDR      r0,[r0,#0x10]
000038  f0200003          BIC      r0,r0,#3
00003c  f04f4180          MOV      r1,#0x40000000
000040  6108              STR      r0,[r1,#0x10]
;;;178    	LPC_WDT->WDCLKSEL |= ClkSrc;
000042  4608              MOV      r0,r1
000044  6900              LDR      r0,[r0,#0x10]
000046  4320              ORRS     r0,r0,r4
000048  6108              STR      r0,[r1,#0x10]
;;;179    	//Set WDT mode
;;;180    	if (WDTMode == WDT_MODE_RESET){
00004a  2d01              CMP      r5,#1
00004c  d104              BNE      |L4.88|
;;;181    		LPC_WDT->WDMOD |= WDT_WDMOD(WDTMode);
00004e  4608              MOV      r0,r1
000050  7800              LDRB     r0,[r0,#0]
000052  f0400002          ORR      r0,r0,#2
000056  7008              STRB     r0,[r1,#0]
                  |L4.88|
;;;182    	}
;;;183    }
000058  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP

00005a  0000              DCW      0x0000
                  |L4.92|
00005c  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_wdt.c",0
000060  44726976
000064  6572735c
000068  736f7572
00006c  63655c6c
000070  70633137
000074  78785f77
000078  64742e63
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||i.WDT_ReadTimeOutFlag||, CODE, READONLY, ALIGN=1

                  WDT_ReadTimeOutFlag PROC
;;;206     *********************************************************************/
;;;207    FlagStatus WDT_ReadTimeOutFlag (void)
000000  f04f4080          MOV      r0,#0x40000000
;;;208    {
;;;209    	return ((FlagStatus)((LPC_WDT->WDMOD & WDT_WDMOD_WDTOF) >>2));
000004  7800              LDRB     r0,[r0,#0]
000006  f3c00080          UBFX     r0,r0,#2,#1
;;;210    }
00000a  4770              BX       lr
;;;211    
                          ENDP


                          AREA ||i.WDT_SetTimeOut||, CODE, READONLY, ALIGN=2

                  WDT_SetTimeOut PROC
;;;66      *********************************************************************/
;;;67     static uint8_t WDT_SetTimeOut (uint8_t clk_source, uint32_t timeout)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;68     {
000004  4681              MOV      r9,r0
000006  460d              MOV      r5,r1
;;;69     
;;;70     	uint32_t pclk_wdt = 0;
000008  2600              MOVS     r6,#0
;;;71     	uint32_t tempval = 0;
00000a  2400              MOVS     r4,#0
;;;72     
;;;73     	switch ((WDT_CLK_OPT) clk_source)
00000c  f1b90f00          CMP      r9,#0
000010  d006              BEQ      |L6.32|
000012  f1b90f01          CMP      r9,#1
000016  d01a              BEQ      |L6.78|
000018  f1b90f02          CMP      r9,#2
00001c  d17e              BNE      |L6.284|
00001e  e069              B        |L6.244|
                  |L6.32|
;;;74         {
;;;75         case WDT_CLKSRC_IRC:
;;;76         	pclk_wdt = 4000000;
000020  4e43              LDR      r6,|L6.304|
;;;77         	// Calculate TC in WDT
;;;78         	tempval  = ((((uint64_t)pclk_wdt * (uint64_t)timeout / 4) / (uint64_t)WDT_US_INDEX));
000022  fba67005          UMULL    r7,r0,r6,r5
000026  4601              MOV      r1,r0
000028  2204              MOVS     r2,#4
00002a  2300              MOVS     r3,#0
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       __aeabi_uldivmod
000032  4682              MOV      r10,r0
000034  10b2              ASRS     r2,r6,#2
000036  2300              MOVS     r3,#0
000038  f7fffffe          BL       __aeabi_uldivmod
00003c  4604              MOV      r4,r0
;;;79         	// Check if it valid
;;;80         	if (tempval >= WDT_TIMEOUT_MIN)
00003e  2cff              CMP      r4,#0xff
000040  d304              BCC      |L6.76|
;;;81         	{
;;;82         		LPC_WDT->WDTC = tempval;
000042  05b0              LSLS     r0,r6,#22
000044  6044              STR      r4,[r0,#4]
;;;83         		return	SUCCESS;
000046  2001              MOVS     r0,#1
                  |L6.72|
;;;84         	}
;;;85     
;;;86         	break;
;;;87     
;;;88         case WDT_CLKSRC_PCLK:
;;;89     
;;;90         	// Get WDT clock with CCLK divider = 4
;;;91     		pclk_wdt = SystemCoreClock / 4;
;;;92     		// Calculate TC in WDT
;;;93     		tempval  = ((((uint64_t)pclk_wdt * (uint64_t)timeout / 4) / (uint64_t)WDT_US_INDEX));
;;;94     
;;;95     		if (tempval >= WDT_TIMEOUT_MIN)
;;;96     		{
;;;97     			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
;;;98     			LPC_WDT->WDTC = (uint32_t) tempval;
;;;99     			return SUCCESS;
;;;100    		}
;;;101    
;;;102    		// Get WDT clock with CCLK divider = 2
;;;103    		pclk_wdt = SystemCoreClock / 2;
;;;104    		// Calculate TC in WDT
;;;105    		tempval  = ((((uint64_t)pclk_wdt * (uint64_t)timeout / 4) / (uint64_t)WDT_US_INDEX));
;;;106    
;;;107    		if (tempval >= WDT_TIMEOUT_MIN)
;;;108    		{
;;;109    			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_2);
;;;110    			LPC_WDT->WDTC = (uint32_t) tempval;
;;;111    			return	SUCCESS;
;;;112    		}
;;;113    
;;;114    		// Get WDT clock with CCLK divider = 1
;;;115    		pclk_wdt = SystemCoreClock;
;;;116    		// Calculate TC in WDT
;;;117    		tempval  = ((((uint64_t)pclk_wdt * (uint64_t)timeout / 4) / (uint64_t)WDT_US_INDEX));
;;;118    
;;;119    		if (tempval >= WDT_TIMEOUT_MIN)
;;;120    		{
;;;121    			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_1);
;;;122    			LPC_WDT->WDTC = (uint32_t) tempval;
;;;123    			return	SUCCESS;
;;;124    		}
;;;125    		break ;
;;;126    
;;;127    
;;;128        case WDT_CLKSRC_RTC:
;;;129    		pclk_wdt = 32768;
;;;130    		// Calculate TC in WDT
;;;131    		tempval  = ((((uint64_t)pclk_wdt * (uint64_t)timeout / 4) / (uint64_t)WDT_US_INDEX));
;;;132    		// Check if it valid
;;;133    		if (tempval >= WDT_TIMEOUT_MIN)
;;;134    		{
;;;135    			LPC_WDT->WDTC = (uint32_t) tempval;
;;;136    			return	SUCCESS;
;;;137    		}
;;;138    
;;;139    		break;
;;;140    
;;;141    // Error parameter
;;;142    		default:
;;;143    			break;
;;;144    }
;;;145    
;;;146    	return ERROR;
;;;147    }
000048  e8bd9ff0          POP      {r4-r12,pc}
                  |L6.76|
00004c  e06c              B        |L6.296|
                  |L6.78|
00004e  4839              LDR      r0,|L6.308|
000050  6800              LDR      r0,[r0,#0]            ;91  ; SystemCoreClock
000052  0886              LSRS     r6,r0,#2              ;91
000054  fba67005          UMULL    r7,r0,r6,r5           ;93
000058  4601              MOV      r1,r0                 ;93
00005a  2204              MOVS     r2,#4                 ;93
00005c  2300              MOVS     r3,#0                 ;93
00005e  4638              MOV      r0,r7                 ;93
000060  f7fffffe          BL       __aeabi_uldivmod
000064  4682              MOV      r10,r0                ;93
000066  4a34              LDR      r2,|L6.312|
000068  2300              MOVS     r3,#0                 ;93
00006a  f7fffffe          BL       __aeabi_uldivmod
00006e  4604              MOV      r4,r0                 ;93
000070  2cff              CMP      r4,#0xff              ;95
000072  d308              BCC      |L6.134|
000074  2100              MOVS     r1,#0                 ;97
000076  4608              MOV      r0,r1                 ;97
000078  f7fffffe          BL       CLKPWR_SetPCLKDiv
00007c  f04f4080          MOV      r0,#0x40000000        ;98
000080  6044              STR      r4,[r0,#4]            ;98
000082  2001              MOVS     r0,#1                 ;99
000084  e7e0              B        |L6.72|
                  |L6.134|
000086  482b              LDR      r0,|L6.308|
000088  6800              LDR      r0,[r0,#0]            ;103  ; SystemCoreClock
00008a  0846              LSRS     r6,r0,#1              ;103
00008c  fba67005          UMULL    r7,r0,r6,r5           ;105
000090  4601              MOV      r1,r0                 ;105
000092  2204              MOVS     r2,#4                 ;105
000094  2300              MOVS     r3,#0                 ;105
000096  4638              MOV      r0,r7                 ;105
000098  f7fffffe          BL       __aeabi_uldivmod
00009c  4682              MOV      r10,r0                ;105
00009e  4a26              LDR      r2,|L6.312|
0000a0  2300              MOVS     r3,#0                 ;105
0000a2  f7fffffe          BL       __aeabi_uldivmod
0000a6  4604              MOV      r4,r0                 ;105
0000a8  2cff              CMP      r4,#0xff              ;107
0000aa  d308              BCC      |L6.190|
0000ac  2102              MOVS     r1,#2                 ;109
0000ae  2000              MOVS     r0,#0                 ;109
0000b0  f7fffffe          BL       CLKPWR_SetPCLKDiv
0000b4  f04f4080          MOV      r0,#0x40000000        ;110
0000b8  6044              STR      r4,[r0,#4]            ;110
0000ba  2001              MOVS     r0,#1                 ;111
0000bc  e7c4              B        |L6.72|
                  |L6.190|
0000be  481d              LDR      r0,|L6.308|
0000c0  6806              LDR      r6,[r0,#0]            ;115  ; SystemCoreClock
0000c2  fba67105          UMULL    r7,r1,r6,r5           ;117
0000c6  2204              MOVS     r2,#4                 ;117
0000c8  2300              MOVS     r3,#0                 ;117
0000ca  4638              MOV      r0,r7                 ;117
0000cc  f7fffffe          BL       __aeabi_uldivmod
0000d0  4682              MOV      r10,r0                ;117
0000d2  4a19              LDR      r2,|L6.312|
0000d4  2300              MOVS     r3,#0                 ;117
0000d6  f7fffffe          BL       __aeabi_uldivmod
0000da  4604              MOV      r4,r0                 ;117
0000dc  2cff              CMP      r4,#0xff              ;119
0000de  d308              BCC      |L6.242|
0000e0  2101              MOVS     r1,#1                 ;121
0000e2  2000              MOVS     r0,#0                 ;121
0000e4  f7fffffe          BL       CLKPWR_SetPCLKDiv
0000e8  f04f4080          MOV      r0,#0x40000000        ;122
0000ec  6044              STR      r4,[r0,#4]            ;122
0000ee  2001              MOVS     r0,#1                 ;123
0000f0  e7aa              B        |L6.72|
                  |L6.242|
0000f2  e019              B        |L6.296|
                  |L6.244|
0000f4  f44f4600          MOV      r6,#0x8000            ;129
0000f8  fba67005          UMULL    r7,r0,r6,r5           ;131
0000fc  4601              MOV      r1,r0                 ;131
0000fe  2204              MOVS     r2,#4                 ;131
000100  2300              MOVS     r3,#0                 ;131
000102  4638              MOV      r0,r7                 ;131
000104  f7fffffe          BL       __aeabi_uldivmod
000108  4682              MOV      r10,r0                ;131
00010a  4a0b              LDR      r2,|L6.312|
00010c  2300              MOVS     r3,#0                 ;131
00010e  f7fffffe          BL       __aeabi_uldivmod
000112  4604              MOV      r4,r0                 ;131
000114  2cff              CMP      r4,#0xff              ;133
000116  d305              BCC      |L6.292|
000118  03f0              LSLS     r0,r6,#15             ;135
00011a  e000              B        |L6.286|
                  |L6.284|
00011c  e003              B        |L6.294|
                  |L6.286|
00011e  6044              STR      r4,[r0,#4]            ;135
000120  2001              MOVS     r0,#1                 ;136
000122  e791              B        |L6.72|
                  |L6.292|
000124  e000              B        |L6.296|
                  |L6.294|
000126  bf00              NOP                            ;143
                  |L6.296|
000128  bf00              NOP                            ;86
00012a  2000              MOVS     r0,#0                 ;146
00012c  e78c              B        |L6.72|
;;;148    
                          ENDP

00012e  0000              DCW      0x0000
                  |L6.304|
                          DCD      0x003d0900
                  |L6.308|
                          DCD      SystemCoreClock
                  |L6.312|
                          DCD      0x000f4240

                          AREA ||i.WDT_Start||, CODE, READONLY, ALIGN=1

                  WDT_Start PROC
;;;189     **********************************************************************/
;;;190    void WDT_Start(uint32_t TimeOut)
000000  b570              PUSH     {r4-r6,lr}
;;;191    {
000002  4605              MOV      r5,r0
;;;192    	uint32_t ClkSrc;
;;;193    
;;;194    	ClkSrc = LPC_WDT->WDCLKSEL;
000004  f04f4080          MOV      r0,#0x40000000
000008  6904              LDR      r4,[r0,#0x10]
;;;195    	ClkSrc &=WDT_WDCLKSEL_MASK;
00000a  f0040403          AND      r4,r4,#3
;;;196    	WDT_SetTimeOut(ClkSrc,TimeOut);
00000e  4620              MOV      r0,r4
000010  4629              MOV      r1,r5
000012  f7fffffe          BL       WDT_SetTimeOut
;;;197    	//enable watchdog
;;;198    	LPC_WDT->WDMOD |= WDT_WDMOD_WDEN;
000016  f04f4080          MOV      r0,#0x40000000
00001a  7800              LDRB     r0,[r0,#0]
00001c  f0400001          ORR      r0,r0,#1
000020  f04f4180          MOV      r1,#0x40000000
000024  7008              STRB     r0,[r1,#0]
;;;199    	WDT_Feed();
000026  f7fffffe          BL       WDT_Feed
;;;200    }
00002a  bd70              POP      {r4-r6,pc}
;;;201    
                          ENDP


                          AREA ||i.WDT_UpdateTimeOut||, CODE, READONLY, ALIGN=1

                  WDT_UpdateTimeOut PROC
;;;226     *********************************************************************/
;;;227    void WDT_UpdateTimeOut ( uint32_t TimeOut)
000000  b570              PUSH     {r4-r6,lr}
;;;228    {
000002  4605              MOV      r5,r0
;;;229    	uint32_t ClkSrc;
;;;230    	ClkSrc = LPC_WDT->WDCLKSEL;
000004  f04f4080          MOV      r0,#0x40000000
000008  6904              LDR      r4,[r0,#0x10]
;;;231    	ClkSrc &=WDT_WDCLKSEL_MASK;
00000a  f0040403          AND      r4,r4,#3
;;;232    	WDT_SetTimeOut(ClkSrc,TimeOut);
00000e  4620              MOV      r0,r4
000010  4629              MOV      r1,r5
000012  f7fffffe          BL       WDT_SetTimeOut
;;;233    	WDT_Feed();
000016  f7fffffe          BL       WDT_Feed
;;;234    }
00001a  bd70              POP      {r4-r6,pc}
;;;235    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Lib\\Drivers\\source\\lpc17xx_wdt.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc17xx_wdt_c_WDT_Init____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_lpc17xx_wdt_c_WDT_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc17xx_wdt_c_WDT_Init____REVSH|
#line 144
|__asm___13_lpc17xx_wdt_c_WDT_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
