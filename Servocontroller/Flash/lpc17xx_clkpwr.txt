; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\lpc17xx_clkpwr.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_clkpwr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\lpc17xx_clkpwr.crf Lib\Drivers\source\lpc17xx_clkpwr.c]
                          THUMB

                          AREA ||i.CLKPWR_ConfigPPWR||, CODE, READONLY, ALIGN=2

                  CLKPWR_ConfigPPWR PROC
;;;271     **********************************************************************/
;;;272    void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
000000  2901              CMP      r1,#1
;;;273    {
;;;274    	if (NewState == ENABLE)
000002  d109              BNE      |L1.24|
;;;275    	{
;;;276    		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
000004  4a0a              LDR      r2,|L1.48|
000006  6812              LDR      r2,[r2,#0]
000008  4b0a              LDR      r3,|L1.52|
00000a  4003              ANDS     r3,r3,r0
00000c  431a              ORRS     r2,r2,r3
00000e  4b08              LDR      r3,|L1.48|
000010  3bc4              SUBS     r3,r3,#0xc4
000012  f8c320c4          STR      r2,[r3,#0xc4]
000016  e009              B        |L1.44|
                  |L1.24|
;;;277    	}
;;;278    	else if (NewState == DISABLE)
000018  b941              CBNZ     r1,|L1.44|
;;;279    	{
;;;280    		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
00001a  4a05              LDR      r2,|L1.48|
00001c  6812              LDR      r2,[r2,#0]
00001e  4b05              LDR      r3,|L1.52|
000020  4383              BICS     r3,r3,r0
000022  401a              ANDS     r2,r2,r3
000024  4b02              LDR      r3,|L1.48|
000026  3bc4              SUBS     r3,r3,#0xc4
000028  f8c320c4          STR      r2,[r3,#0xc4]
                  |L1.44|
;;;281    	}
;;;282    }
00002c  4770              BX       lr
;;;283    
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      0x400fc0c4
                  |L1.52|
                          DCD      0xefeff7de

                          AREA ||i.CLKPWR_DeepPowerDown||, CODE, READONLY, ALIGN=2

                  CLKPWR_DeepPowerDown PROC
;;;332     **********************************************************************/
;;;333    void CLKPWR_DeepPowerDown(void)
000000  2004              MOVS     r0,#4
;;;334    {
;;;335        /* Deep-Sleep Mode, set SLEEPDEEP bit */
;;;336    	SCB->SCR = 0x4;
000002  4903              LDR      r1,|L2.16|
000004  6008              STR      r0,[r1,#0]
;;;337    	LPC_SC->PCON = 0x03;
000006  2003              MOVS     r0,#3
000008  4902              LDR      r1,|L2.20|
00000a  6008              STR      r0,[r1,#0]
;;;338    	/* Deep Power Down Mode*/
;;;339    	__WFI();
00000c  bf30              WFI      
;;;340    }
00000e  4770              BX       lr
;;;341    
                          ENDP

                  |L2.16|
                          DCD      0xe000ed10
                  |L2.20|
                          DCD      0x400fc0c0

                          AREA ||i.CLKPWR_DeepSleep||, CODE, READONLY, ALIGN=2

                  CLKPWR_DeepSleep PROC
;;;302     **********************************************************************/
;;;303    void CLKPWR_DeepSleep(void)
000000  2004              MOVS     r0,#4
;;;304    {
;;;305        /* Deep-Sleep Mode, set SLEEPDEEP bit */
;;;306    	SCB->SCR = 0x4;
000002  4903              LDR      r1,|L3.16|
000004  6008              STR      r0,[r1,#0]
;;;307    	LPC_SC->PCON = 0x00;
000006  2000              MOVS     r0,#0
000008  4902              LDR      r1,|L3.20|
00000a  6008              STR      r0,[r1,#0]
;;;308    	/* Deep Sleep Mode*/
;;;309    	__WFI();
00000c  bf30              WFI      
;;;310    }
00000e  4770              BX       lr
;;;311    
                          ENDP

                  |L3.16|
                          DCD      0xe000ed10
                  |L3.20|
                          DCD      0x400fc0c0

                          AREA ||i.CLKPWR_GetPCLK||, CODE, READONLY, ALIGN=2

                  CLKPWR_GetPCLK PROC
;;;201     **********************************************************************/
;;;202    uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
000000  b570              PUSH     {r4-r6,lr}
;;;203    {
000002  4606              MOV      r6,r0
;;;204    	uint32_t retval, div;
;;;205    
;;;206    	retval = SystemCoreClock;
000004  480d              LDR      r0,|L4.60|
000006  6804              LDR      r4,[r0,#0]  ; SystemCoreClock
;;;207    	div = CLKPWR_GetPCLKSEL(ClkType);
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       CLKPWR_GetPCLKSEL
00000e  4605              MOV      r5,r0
;;;208    
;;;209    	switch (div)
000010  b135              CBZ      r5,|L4.32|
000012  2d01              CMP      r5,#1
000014  d006              BEQ      |L4.36|
000016  2d02              CMP      r5,#2
000018  d006              BEQ      |L4.40|
00001a  2d03              CMP      r5,#3
00001c  d108              BNE      |L4.48|
00001e  e005              B        |L4.44|
                  |L4.32|
;;;210    	{
;;;211    	case 0:
;;;212    		div = 4;
000020  2504              MOVS     r5,#4
;;;213    		break;
000022  e005              B        |L4.48|
                  |L4.36|
;;;214    
;;;215    	case 1:
;;;216    		div = 1;
000024  2501              MOVS     r5,#1
;;;217    		break;
000026  e003              B        |L4.48|
                  |L4.40|
;;;218    
;;;219    	case 2:
;;;220    		div = 2;
000028  2502              MOVS     r5,#2
;;;221    		break;
00002a  e001              B        |L4.48|
                  |L4.44|
;;;222    
;;;223    	case 3:
;;;224    		div = 8;
00002c  2508              MOVS     r5,#8
;;;225    		break;
00002e  bf00              NOP      
                  |L4.48|
000030  bf00              NOP                            ;213
;;;226    	}
;;;227    	retval /= div;
000032  fbb4f4f5          UDIV     r4,r4,r5
;;;228    
;;;229    	return retval;
000036  4620              MOV      r0,r4
;;;230    }
000038  bd70              POP      {r4-r6,pc}
;;;231    
                          ENDP

00003a  0000              DCW      0x0000
                  |L4.60|
                          DCD      SystemCoreClock

                          AREA ||i.CLKPWR_GetPCLKSEL||, CODE, READONLY, ALIGN=2

                  CLKPWR_GetPCLKSEL PROC
;;;146     **********************************************************************/
;;;147    uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
000000  4601              MOV      r1,r0
;;;148    {
;;;149    	uint32_t bitpos, retval;
;;;150    
;;;151    	if (ClkType < 32)
000002  2920              CMP      r1,#0x20
000004  d203              BCS      |L5.14|
;;;152    	{
;;;153    		bitpos = ClkType;
000006  460a              MOV      r2,r1
;;;154    		retval = LPC_SC->PCLKSEL0;
000008  4b06              LDR      r3,|L5.36|
00000a  6818              LDR      r0,[r3,#0]
00000c  e004              B        |L5.24|
                  |L5.14|
;;;155    	}
;;;156    	else
;;;157    	{
;;;158    		bitpos = ClkType - 32;
00000e  f1a10220          SUB      r2,r1,#0x20
;;;159    		retval = LPC_SC->PCLKSEL1;
000012  4b04              LDR      r3,|L5.36|
000014  1d1b              ADDS     r3,r3,#4
000016  6818              LDR      r0,[r3,#0]
                  |L5.24|
;;;160    	}
;;;161    
;;;162    	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
000018  fa20f302          LSR      r3,r0,r2
00001c  f0030003          AND      r0,r3,#3
;;;163    	return retval;
;;;164    }
000020  4770              BX       lr
;;;165    
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      0x400fc1a8

                          AREA ||i.CLKPWR_PowerDown||, CODE, READONLY, ALIGN=2

                  CLKPWR_PowerDown PROC
;;;317     **********************************************************************/
;;;318    void CLKPWR_PowerDown(void)
000000  2004              MOVS     r0,#4
;;;319    {
;;;320        /* Deep-Sleep Mode, set SLEEPDEEP bit */
;;;321    	SCB->SCR = 0x4;
000002  4903              LDR      r1,|L6.16|
000004  6008              STR      r0,[r1,#0]
;;;322    	LPC_SC->PCON = 0x01;
000006  2001              MOVS     r0,#1
000008  4902              LDR      r1,|L6.20|
00000a  6008              STR      r0,[r1,#0]
;;;323    	/* Power Down Mode*/
;;;324    	__WFI();
00000c  bf30              WFI      
;;;325    }
00000e  4770              BX       lr
;;;326    
                          ENDP

                  |L6.16|
                          DCD      0xe000ed10
                  |L6.20|
                          DCD      0x400fc0c0

                          AREA ||i.CLKPWR_SetPCLKDiv||, CODE, READONLY, ALIGN=2

                  CLKPWR_SetPCLKDiv PROC
;;;85      **********************************************************************/
;;;86     void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
000000  b510              PUSH     {r4,lr}
;;;87     {
000002  460a              MOV      r2,r1
;;;88     	uint32_t bitpos;
;;;89     
;;;90     	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
000004  2820              CMP      r0,#0x20
000006  d201              BCS      |L7.12|
000008  4603              MOV      r3,r0
00000a  e001              B        |L7.16|
                  |L7.12|
00000c  f1a00320          SUB      r3,r0,#0x20
                  |L7.16|
000010  4619              MOV      r1,r3
;;;91     
;;;92     	/* PCLKSEL0 selected */
;;;93     	if (ClkType < 32)
000012  2820              CMP      r0,#0x20
000014  d210              BCS      |L7.56|
;;;94     	{
;;;95     		/* Clear two bit at bit position */
;;;96     		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
000016  4b12              LDR      r3,|L7.96|
000018  681b              LDR      r3,[r3,#0]
00001a  2403              MOVS     r4,#3
00001c  408c              LSLS     r4,r4,r1
00001e  43a3              BICS     r3,r3,r4
000020  4c10              LDR      r4,|L7.100|
000022  f8c431a8          STR      r3,[r4,#0x1a8]
;;;97     
;;;98     		/* Set two selected bit */
;;;99     		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
000026  4b0e              LDR      r3,|L7.96|
000028  681b              LDR      r3,[r3,#0]
00002a  fa02f401          LSL      r4,r2,r1
00002e  4323              ORRS     r3,r3,r4
000030  4c0c              LDR      r4,|L7.100|
000032  f8c431a8          STR      r3,[r4,#0x1a8]
000036  e011              B        |L7.92|
                  |L7.56|
;;;100    	}
;;;101    	/* PCLKSEL1 selected */
;;;102    	else
;;;103    	{
;;;104    		/* Clear two bit at bit position */
;;;105    		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
000038  4b09              LDR      r3,|L7.96|
00003a  1d1b              ADDS     r3,r3,#4
00003c  681b              LDR      r3,[r3,#0]
00003e  2403              MOVS     r4,#3
000040  408c              LSLS     r4,r4,r1
000042  43a3              BICS     r3,r3,r4
000044  4c07              LDR      r4,|L7.100|
000046  f8c431ac          STR      r3,[r4,#0x1ac]
;;;106    
;;;107    		/* Set two selected bit */
;;;108    		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
00004a  4b05              LDR      r3,|L7.96|
00004c  1d1b              ADDS     r3,r3,#4
00004e  681b              LDR      r3,[r3,#0]
000050  fa02f401          LSL      r4,r2,r1
000054  4323              ORRS     r3,r3,r4
000056  4c03              LDR      r4,|L7.100|
000058  f8c431ac          STR      r3,[r4,#0x1ac]
                  |L7.92|
;;;109    	}
;;;110    }
00005c  bd10              POP      {r4,pc}
;;;111    
                          ENDP

00005e  0000              DCW      0x0000
                  |L7.96|
                          DCD      0x400fc1a8
                  |L7.100|
                          DCD      0x400fc000

                          AREA ||i.CLKPWR_Sleep||, CODE, READONLY, ALIGN=2

                  CLKPWR_Sleep PROC
;;;289     **********************************************************************/
;;;290    void CLKPWR_Sleep(void)
000000  2000              MOVS     r0,#0
;;;291    {
;;;292    	LPC_SC->PCON = 0x00;
000002  4902              LDR      r1,|L8.12|
000004  6008              STR      r0,[r1,#0]
;;;293    	/* Sleep Mode*/
;;;294    	__WFI();
000006  bf30              WFI      
;;;295    }
000008  4770              BX       lr
;;;296    
                          ENDP

00000a  0000              DCW      0x0000
                  |L8.12|
                          DCD      0x400fc0c0

;*** Start embedded assembler ***

#line 1 "Lib\\Drivers\\source\\lpc17xx_clkpwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_lpc17xx_clkpwr_c_5f9c9c89____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_lpc17xx_clkpwr_c_5f9c9c89____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_lpc17xx_clkpwr_c_5f9c9c89____REVSH|
#line 144
|__asm___16_lpc17xx_clkpwr_c_5f9c9c89____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
