; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\fifo.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\fifo.crf Lib\CLib__1_0_0_4\src\Fifo.c]
                          THUMB

                          AREA ||i.Fifo_Init||, CODE, READONLY, ALIGN=1

                  Fifo_Init PROC
;;;105    *******************************************************************************/
;;;106    void Fifo_Init(Fifo * f)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    		f->head = 0;
000004  2000              MOVS     r0,#0
000006  f5046480          ADD      r4,r4,#0x400
00000a  6020              STR      r0,[r4,#0]
;;;109    		f->tail = 0;
00000c  6060              STR      r0,[r4,#4]
;;;110    		f->size = FIFO_SIZE;
00000e  f44f7000          MOV      r0,#0x200
000012  60a0              STR      r0,[r4,#8]
;;;111    		f->cnt_FreeWrite = 0;
000014  2000              MOVS     r0,#0
000016  60e0              STR      r0,[r4,#0xc]
;;;112    		f->tmr_Inactive = 0;
000018  6160              STR      r0,[r4,#0x14]
;;;113    		f->cnt_FreeRead = 0;
00001a  6120              STR      r0,[r4,#0x10]
00001c  f5a46480          SUB      r4,r4,#0x400
;;;114    		Timer_Init(&f->inactive_Timer, 20);
000020  2114              MOVS     r1,#0x14
000022  f5046083          ADD      r0,r4,#0x418
000026  f7fffffe          BL       Timer_Init
;;;115    }
00002a  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.Fifo_OnInactive||, CODE, READONLY, ALIGN=1

                  Fifo_OnInactive PROC
;;;18     *******************************************************************************/
;;;19     char Fifo_OnInactive(Fifo * f)
000000  b510              PUSH     {r4,lr}
;;;20     {
000002  4604              MOV      r4,r0
;;;21     	if( Timer_Elapsed(&f->inactive_Timer) )
000004  f5046083          ADD      r0,r4,#0x418
000008  f7fffffe          BL       Timer_Elapsed
00000c  b108              CBZ      r0,|L2.18|
;;;22     	{
;;;23     		//f->tmr_Inactive = 0;
;;;24     		return 1;
00000e  2001              MOVS     r0,#1
                  |L2.16|
;;;25     	}
;;;26     	return 0;
;;;27     }
000010  bd10              POP      {r4,pc}
                  |L2.18|
000012  2000              MOVS     r0,#0                 ;26
000014  e7fc              B        |L2.16|
;;;28     
                          ENDP


                          AREA ||i.Fifo_Read||, CODE, READONLY, ALIGN=1

                  Fifo_Read PROC
;;;36     *******************************************************************************/
;;;37     int Fifo_Read(Fifo * f, void * buf, int nbytes)
000000  b570              PUSH     {r4-r6,lr}
;;;38     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;39         int i;
;;;40         char * p;
;;;41     	
;;;42         p = buf;
000006  4625              MOV      r5,r4
;;;43         for(i=0; i < nbytes; i++)
000008  2100              MOVS     r1,#0
00000a  e01f              B        |L3.76|
                  |L3.12|
;;;44     		{
;;;45             if( f->tail != f->head )
00000c  f8d36400          LDR      r6,[r3,#0x400]
000010  f8d30404          LDR      r0,[r3,#0x404]
000014  42b0              CMP      r0,r6
000016  d016              BEQ      |L3.70|
;;;46     				{ //see if any data is available
;;;47                   *p++ = f->buf_w[f->tail];  //grab a byte from the buffer
000018  f8d30404          LDR      r0,[r3,#0x404]
00001c  5c18              LDRB     r0,[r3,r0]
00001e  f8050b01          STRB     r0,[r5],#1
;;;48                   f->tail++;  //increment the tail
000022  f2034304          ADD      r3,r3,#0x404
000026  6818              LDR      r0,[r3,#0]
000028  1c40              ADDS     r0,r0,#1
00002a  6018              STR      r0,[r3,#0]
;;;49     							f->cnt_FreeRead++;
00002c  68d8              LDR      r0,[r3,#0xc]
00002e  1c40              ADDS     r0,r0,#1
000030  60d8              STR      r0,[r3,#0xc]
;;;50                   if( f->tail == f->size )
000032  e9d30600          LDRD     r0,r6,[r3,#0]
000036  f2a34304          SUB      r3,r3,#0x404
00003a  42b0              CMP      r0,r6
00003c  d105              BNE      |L3.74|
;;;51     							{  		//check for wrap-around
;;;52                         f->tail = 0;
00003e  2000              MOVS     r0,#0
000040  f8c30404          STR      r0,[r3,#0x404]
000044  e001              B        |L3.74|
                  |L3.70|
;;;53                   }
;;;54             } 
;;;55     				else 
;;;56     				{
;;;57                 return i; //number of bytes read 
000046  4608              MOV      r0,r1
                  |L3.72|
;;;58             }
;;;59          }
;;;60          return nbytes;
;;;61     }
000048  bd70              POP      {r4-r6,pc}
                  |L3.74|
00004a  1c49              ADDS     r1,r1,#1              ;43
                  |L3.76|
00004c  4291              CMP      r1,r2                 ;43
00004e  dbdd              BLT      |L3.12|
000050  4610              MOV      r0,r2                 ;60
000052  e7f9              B        |L3.72|
;;;62     
                          ENDP


                          AREA ||i.Fifo_Write||, CODE, READONLY, ALIGN=1

                  Fifo_Write PROC
;;;70     *******************************************************************************/
;;;71     int Fifo_Write(Fifo * f, const void * buf, int nbytes)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;72     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;73          int i;
;;;74          const char * p;
;;;75          p = buf;
00000a  46b8              MOV      r8,r7
;;;76          for(i=0; i < nbytes; i++)
00000c  2600              MOVS     r6,#0
00000e  e030              B        |L4.114|
                  |L4.16|
;;;77     		 {
;;;78                //first check to see if there is space in the buffer
;;;79                if( (f->head + 1 == f->tail) || ( (f->head + 1 == f->size) && (f->tail == 0) ) ){
000010  f8d40400          LDR      r0,[r4,#0x400]
000014  1c40              ADDS     r0,r0,#1
000016  f8d41404          LDR      r1,[r4,#0x404]
00001a  4288              CMP      r0,r1
00001c  d009              BEQ      |L4.50|
00001e  f8d40400          LDR      r0,[r4,#0x400]
000022  1c40              ADDS     r0,r0,#1
000024  f8d41408          LDR      r1,[r4,#0x408]
000028  4288              CMP      r0,r1
00002a  d105              BNE      |L4.56|
00002c  f8d40404          LDR      r0,[r4,#0x404]
000030  b910              CBNZ     r0,|L4.56|
                  |L4.50|
;;;80                      return i; //no more room
000032  4630              MOV      r0,r6
                  |L4.52|
;;;81                } 
;;;82     					 else 
;;;83     					 {
;;;84     								f->buf_w[f->head] = *p++;
;;;85     								f->head++;  //increment the head
;;;86     								f->cnt_FreeWrite++;
;;;87     						
;;;88     								Timer_Start(&f->inactive_Timer);
;;;89     						
;;;90     								if( f->head == f->size )
;;;91     								{  //check for wrap-around
;;;92                         f->head = 0;
;;;93     								}
;;;94                }
;;;95          }
;;;96          return nbytes;
;;;97     }
000034  e8bd81f0          POP      {r4-r8,pc}
                  |L4.56|
000038  f8180b01          LDRB     r0,[r8],#1            ;84
00003c  f8d41400          LDR      r1,[r4,#0x400]        ;84
000040  5460              STRB     r0,[r4,r1]            ;84
000042  f8d40400          LDR      r0,[r4,#0x400]        ;85
000046  1c40              ADDS     r0,r0,#1              ;85
000048  f8c40400          STR      r0,[r4,#0x400]        ;85
00004c  f8d4040c          LDR      r0,[r4,#0x40c]        ;86
000050  1c40              ADDS     r0,r0,#1              ;86
000052  f8c4040c          STR      r0,[r4,#0x40c]        ;86
000056  f5046083          ADD      r0,r4,#0x418          ;88
00005a  f7fffffe          BL       Timer_Start
00005e  f8d41408          LDR      r1,[r4,#0x408]        ;90
000062  f8d40400          LDR      r0,[r4,#0x400]        ;90
000066  4288              CMP      r0,r1                 ;90
000068  d102              BNE      |L4.112|
00006a  2000              MOVS     r0,#0                 ;92
00006c  f8c40400          STR      r0,[r4,#0x400]        ;92
                  |L4.112|
000070  1c76              ADDS     r6,r6,#1              ;76
                  |L4.114|
000072  42ae              CMP      r6,r5                 ;76
000074  dbcc              BLT      |L4.16|
000076  4628              MOV      r0,r5                 ;96
000078  e7dc              B        |L4.52|
;;;98     
                          ENDP


;*** Start embedded assembler ***

#line 1 "Lib\\CLib__1_0_0_4\\src\\Fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_Fifo_c_ee58b6dd____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_Fifo_c_ee58b6dd____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_Fifo_c_ee58b6dd____REVSH|
#line 144
|__asm___6_Fifo_c_ee58b6dd____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
