L 1 "Lib\Drivers\source\lpc17xx_iap.c"
N/**********************************************************************
N* $Id$		lpc17xx_iap.c			2012-04-18
N*//**
N* @file		lpc17xx_iap.c
N * @brief	Contains all functions support for IAP on lpc17xx
N* @version	1.0
N* @date		18. April. 2012
N* @author	NXP MCU SW Application Team
N* 
N* Copyright(C) 2011, NXP Semiconductor
N* All rights reserved.
N*
N***********************************************************************
N* Software that is described herein is for illustrative purposes only
N* which provides customers with programming information regarding the
N* products. This software is supplied "AS IS" without any warranties.
N* NXP Semiconductors assumes no responsibility or liability for the
N* use of the software, conveys no license or title under any patent,
N* copyright, or mask work right to the product. NXP Semiconductors
N* reserves the right to make changes in the software without
N* notification. NXP Semiconductors also make no representation or
N* warranty that such application will be suitable for the specified
N* use without further testing or modification.
N* Permission to use, copy, modify, and distribute this software and its
N* documentation is hereby granted, under NXP Semiconductors'
N* relevant copyright in the software, without fee, provided that it
N* is used in conjunction with NXP Semiconductors microcontrollers.  This
N* copyright, permission, and disclaimer notice must appear in all copies of
N* this code.
N**********************************************************************/
N#include "lpc17xx_iap.h"
L 1 ".\Lib\Drivers\include\lpc17xx_iap.h" 1
N/**********************************************************************
N* $Id$		lpc17xx_iap.h			2012-04-18
N*//**
N* @file		lpc17xx_iap.h
N* @brief	Contains all functions support for IAP
N*			on lpc17xx
N* @version	1.0
N* @date		18. April. 2012
N* @author	NXP MCU SW Application Team
N* 
N* Copyright(C) 2011, NXP Semiconductor
N* All rights reserved.
N*
N***********************************************************************
N* Software that is described herein is for illustrative purposes only
N* which provides customers with programming information regarding the
N* products. This software is supplied "AS IS" without any warranties.
N* NXP Semiconductors assumes no responsibility or liability for the
N* use of the software, conveys no license or title under any patent,
N* copyright, or mask work right to the product. NXP Semiconductors
N* reserves the right to make changes in the software without
N* notification. NXP Semiconductors also make no representation or
N* warranty that such application will be suitable for the specified
N* use without further testing or modification.
N* Permission to use, copy, modify, and distribute this software and its
N* documentation is hereby granted, under NXP Semiconductors'
N* relevant copyright in the software, without fee, provided that it
N* is used in conjunction with NXP Semiconductors microcontrollers.  This
N* copyright, permission, and disclaimer notice must appear in all copies of
N* this code.
N**********************************************************************/
N
N#ifndef _LPC17xx_IAP_H
N#define _LPC17xx_IAP_H
N#include "lpc_types.h"
L 1 ".\Lib\Drivers\include\lpc_types.h" 1
N/**********************************************************************
N* $Id$		lpc_types.h		2008-07-27
N*//**
N* @file		lpc_types.h
N* @brief	Contains the NXP ABL typedefs for C standard types.
N*     		It is intended to be used in ISO C conforming development
N*     		environments and checks for this insofar as it is possible
N*     		to do so.
N* @version	2.0
N* @date		27 July. 2008
N* @author	NXP MCU SW Application Team
N*
N* Copyright(C) 2008, NXP Semiconductor
N* All rights reserved.
N*
N***********************************************************************
N* Software that is described herein is for illustrative purposes only
N* which provides customers with programming information regarding the
N* products. This software is supplied "AS IS" without any warranties.
N* NXP Semiconductors assumes no responsibility or liability for the
N* use of the software, conveys no license or title under any patent,
N* copyright, or mask work right to the product. NXP Semiconductors
N* reserves the right to make changes in the software without
N* notification. NXP Semiconductors also make no representation or
N* warranty that such application will be suitable for the specified
N* use without further testing or modification.
N* Permission to use, copy, modify, and distribute this software and its
N* documentation is hereby granted, under NXP Semiconductors'
N* relevant copyright in the software, without fee, provided that it
N* is used in conjunction with NXP Semiconductors microcontrollers.  This
N* copyright, permission, and disclaimer notice must appear in all copies of
N* this code.
N**********************************************************************/
N
N/* Type group ----------------------------------------------------------- */
N/** @defgroup LPC_Types LPC_Types
N * @ingroup LPC1700CMSIS_FwLib_Drivers
N * @{
N */
N
N#ifndef LPC_TYPES_H
N#define LPC_TYPES_H
N
N/* Includes ------------------------------------------------------------------- */
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 46 ".\Lib\Drivers\include\lpc_types.h" 2
N
N
N/* Public Types --------------------------------------------------------------- */
N/** @defgroup LPC_Types_Public_Types LPC_Types Public Types
N * @{
N */
N
N/**
N * @brief Boolean Type definition
N */
Ntypedef enum {FALSE = 0, TRUE = !FALSE} Bool;
N
N/**
N * @brief Flag Status and Interrupt Flag Status type definition
N */
Ntypedef enum {RESET = 0, SET = !RESET} FlagStatus, IntStatus, SetState;
N#define PARAM_SETSTATE(State) ((State==RESET) || (State==SET))
N
N/**
N * @brief Functional State Definition
N */
Ntypedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;
N#define PARAM_FUNCTIONALSTATE(State) ((State==DISABLE) || (State==ENABLE))
N
N/**
N * @ Status type definition
N */
Ntypedef enum {ERROR = 0, SUCCESS = !ERROR} Status;
N
N
N/**
N * Read/Write transfer type mode (Block or non-block)
N */
Ntypedef enum
N{
N	NONE_BLOCKING = 0,		/**< None Blocking type */
N	BLOCKING				/**< Blocking type */
N} TRANSFER_BLOCK_Type;
N
N
N/** Pointer to Function returning Void (any number of parameters) */
Ntypedef void (*PFV)();
N
N/** Pointer to Function returning int32_t (any number of parameters) */
Ntypedef int32_t(*PFI)();
N
N/**
N * @}
N */
N
N
N/* Public Macros -------------------------------------------------------------- */
N/** @defgroup LPC_Types_Public_Macros  LPC_Types Public Macros
N * @{
N */
N
N/* _BIT(n) sets the bit at position "n"
N * _BIT(n) is intended to be used in "OR" and "AND" expressions:
N * e.g., "(_BIT(3) | _BIT(7))".
N */
N#undef _BIT
N/* Set bit macro */
N#define _BIT(n)	(1<<n)
N
N/* _SBF(f,v) sets the bit field starting at position "f" to value "v".
N * _SBF(f,v) is intended to be used in "OR" and "AND" expressions:
N * e.g., "((_SBF(5,7) | _SBF(12,0xF)) & 0xFFFF)"
N */
N#undef _SBF
N/* Set bit field macro */
N#define _SBF(f,v) (v<<f)
N
N/* _BITMASK constructs a symbol with 'field_width' least significant
N * bits set.
N * e.g., _BITMASK(5) constructs '0x1F', _BITMASK(16) == 0xFFFF
N * The symbol is intended to be used to limit the bit field width
N * thusly:
N * <a_register> = (any_expression) & _BITMASK(x), where 0 < x <= 32.
N * If "any_expression" results in a value that is larger than can be
N * contained in 'x' bits, the bits above 'x - 1' are masked off.  When
N * used with the _SBF example above, the example would be written:
N * a_reg = ((_SBF(5,7) | _SBF(12,0xF)) & _BITMASK(16))
N * This ensures that the value written to a_reg is no wider than
N * 16 bits, and makes the code easier to read and understand.
N */
N#undef _BITMASK
N/* Bitmask creation macro */
N#define _BITMASK(field_width) ( _BIT(field_width) - 1)
N
N/* NULL pointer */
N#ifndef NULL
N#define NULL ((void*) 0)
N#endif
N
N/* Number of elements in an array */
N#define NELEMENTS(array)  (sizeof (array) / sizeof (array[0]))
N
N/* Static data/function define */
N#define STATIC static
N/* External data/function define */
N#define EXTERN extern
N
N#if !defined(MAX)
X#if !0L
N#define MAX(a, b) (((a) > (b)) ? (a) : (b))
N#endif
N#if !defined(MIN)
X#if !0L
N#define MIN(a, b) (((a) < (b)) ? (a) : (b))
N#endif
N
N/**
N * @}
N */
N
N
N/* Old Type Definition compatibility ------------------------------------------ */
N/** @addtogroup LPC_Types_Public_Types LPC_Types Public Types
N * @{
N */
N
N/** SMA type for character type */
Ntypedef char CHAR;
N
N/** SMA type for 8 bit unsigned value */
Ntypedef uint8_t UNS_8;
N
N/** SMA type for 8 bit signed value */
Ntypedef int8_t INT_8;
N
N/** SMA type for 16 bit unsigned value */
Ntypedef	uint16_t UNS_16;
N
N/** SMA type for 16 bit signed value */
Ntypedef	int16_t INT_16;
N
N/** SMA type for 32 bit unsigned value */
Ntypedef	uint32_t UNS_32;
N
N/** SMA type for 32 bit signed value */
Ntypedef	int32_t INT_32;
N
N/** SMA type for 64 bit signed value */
Ntypedef int64_t INT_64;
N
N/** SMA type for 64 bit unsigned value */
Ntypedef uint64_t UNS_64;
N
N/** 32 bit boolean type */
Ntypedef Bool BOOL_32;
N
N/** 16 bit boolean type */
Ntypedef Bool BOOL_16;
N
N/** 8 bit boolean type */
Ntypedef Bool BOOL_8;
N
N/**
N * @}
N */
N
N
N#endif /* LPC_TYPES_H */
N
N/**
N * @}
N */
N
N/* --------------------------------- End Of File ------------------------------ */
L 36 ".\Lib\Drivers\include\lpc17xx_iap.h" 2
N
N/** @defgroup IAP  	IAP (In Application Programming)
N * @ingroup LPC1700CMSIS_FwLib_Drivers
N * @{
N */
N
N/** @defgroup IAP_Public_Macros IAP Public Macros
N * @{
N */
N
N/** IAP entry location */
N#define IAP_LOCATION              (0x1FFF1FF1UL)
N
N/**
N * @}
N */
N
N/** @defgroup IAP_Public_Types IAP Public Types
N * @{
N */
N
N/**
N * @brief IAP command code definitions
N */
Ntypedef enum
N{
N    IAP_PREPARE = 50,       // Prepare sector(s) for write operation
N    IAP_COPY_RAM2FLASH = 51,     // Copy RAM to Flash
N    IAP_ERASE = 52,              // Erase sector(s)
N    IAP_BLANK_CHECK = 53,        // Blank check sector(s)
N    IAP_READ_PART_ID = 54,       // Read chip part ID
N    IAP_READ_BOOT_VER = 55,      // Read chip boot code version
N    IAP_COMPARE = 56,            // Compare memory areas
N    IAP_REINVOKE_ISP = 57,       // Reinvoke ISP
N    IAP_READ_SERIAL_NUMBER = 58, // Read serial number
N}  IAP_COMMAND_CODE;
N
N/**
N * @brief IAP status code definitions
N */
Ntypedef enum
N{
N    CMD_SUCCESS,	             // Command is executed successfully.
N    INVALID_COMMAND,             // Invalid command.
N    SRC_ADDR_ERROR,              // Source address is not on a word boundary.
N    DST_ADDR_ERROR,              // Destination address is not on a correct boundary.
N    SRC_ADDR_NOT_MAPPED,         // Source address is not mapped in the memory map.
N    DST_ADDR_NOT_MAPPED,         // Destination address is not mapped in the memory map.
N    COUNT_ERROR,	               // Byte count is not multiple of 4 or is not a permitted value.
N    INVALID_SECTOR,	           // Sector number is invalid.
N    SECTOR_NOT_BLANK,	           // Sector is not blank.
N    SECTOR_NOT_PREPARED_FOR_WRITE_OPERATION,	// Command to prepare sector for write operation was not executed.
N    COMPARE_ERROR,               // Source and destination data is not same.
N    BUSY,		                   // Flash programming hardware interface is busy.
N} IAP_STATUS_CODE;
N
N/**
N * @brief IAP write length definitions
N */
Ntypedef enum {
N  IAP_WRITE_256  = 256,
N  IAP_WRITE_512  = 512,
N  IAP_WRITE_1024 = 1024,
N  IAP_WRITE_4096 = 4096,
N} IAP_WRITE_SIZE;
N
N/**
N * @brief IAP command structure
N */
Ntypedef struct {
N    uint32_t cmd;   // Command
N    uint32_t param[4];      // Parameters
N    uint32_t status;        // status code
N    uint32_t result[4];     // Result
N} IAP_COMMAND_Type;
N
N/**
N * @}
N */
N 
N/* Public Functions ----------------------------------------------------------- */
N/** @defgroup IAP_Public_Functions IAP Public Functions
N * @{
N */
N
N/**  Get sector number of an address */
Nuint32_t GetSecNum (uint32_t adr);
N/**  Prepare sector(s) for write operation */
NIAP_STATUS_CODE PrepareSector(uint32_t start_sec, uint32_t end_sec);
N/**  Copy RAM to Flash */
NIAP_STATUS_CODE CopyRAM2Flash(uint8_t * dest, uint8_t* source, IAP_WRITE_SIZE size);
N/**  Prepare sector(s) for write operation */
NIAP_STATUS_CODE EraseSector(uint32_t start_sec, uint32_t end_sec);
N/**  Blank check sectors */
NIAP_STATUS_CODE BlankCheckSector(uint32_t start_sec, uint32_t end_sec,
N                                 uint32_t *first_nblank_loc, 
N								 uint32_t *first_nblank_val);
N/**  Read part identification number */
NIAP_STATUS_CODE ReadPartID(uint32_t *partID);
N/**  Read boot code version */
NIAP_STATUS_CODE ReadBootCodeVer(uint8_t *major, uint8_t* minor);
N/**  Read Device serial number */
NIAP_STATUS_CODE ReadDeviceSerialNum(uint32_t *uid);
N/**  Compare memory */
NIAP_STATUS_CODE Compare(uint8_t *addr1, uint8_t *addr2, uint32_t size);
N/**  Invoke ISP */
Nvoid InvokeISP(void);
N
N/**
N * @}
N */
N
N/**
N * @}
N */
N
N#endif /*_LPC17xx_IAP_H*/
N
L 32 "Lib\Drivers\source\lpc17xx_iap.c" 2
N#include "system_lpc17xx.h"
L 1 "C:\Keil_v5\ARM\INC\NXP\LPC17xx\system_lpc17xx.h" 1
N/**************************************************************************//**
N * @file     system_LPC17xx.h
N * @brief    CMSIS Cortex-M3 Device System Header File for
N *           NXP LPC17xx Device Series
N * @version  V1.10
N * @date     06. April 2011
N *
N * @note
N * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M
N * processor based microcontrollers.  This file can be freely distributed
N * within development tools that are supporting such ARM based processors.
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N
N#ifndef __SYSTEM_LPC17xx_H
N#define __SYSTEM_LPC17xx_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include <stdint.h>
N
N/** @addtogroup LPC17xx_System
N * @{
N */
N
Nextern uint32_t SystemCoreClock;     /*!< System Clock Frequency (Core Clock)  */
N
N
N/**
N * Initialize the system
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system.
N *         Initialize the System.
N */
Nextern void SystemInit (void);
N
N/**
N * Update SystemCoreClock variable
N *
N * @param  none
N * @return none
N *
N * @brief  Updates the SystemCoreClock with current core Clock
N *         retrieved from cpu registers.
N */
Nextern void SystemCoreClockUpdate (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N/**
N * @}
N */
N
N#endif /* __SYSTEM_LPC17xx_H */
L 33 "Lib\Drivers\source\lpc17xx_iap.c" 2
N
N//  IAP Command
Ntypedef void (*IAP)(uint32_t *cmd,uint32_t *result);
NIAP iap_entry = (IAP) IAP_LOCATION;
XIAP iap_entry = (IAP) (0x1FFF1FF1UL);
N#define IAP_Call 	iap_entry
N
N/** @addtogroup IAP_Public_Functions IAP Public Function
N * @ingroup IAP
N * @{
N */
N 
N
N/*********************************************************************//**
N * @brief		Get Sector Number
N *
N * @param[in] adr	           Sector Address
N *
N * @return 	Sector Number.
N *
N **********************************************************************/
N uint32_t GetSecNum (uint32_t adr)
N{
N    uint32_t n;
N
N    n = adr >> 12;                               //  4kB Sector
N    if (n >= 0x10) {
N      n = 0x0E + (n >> 3);                       // 32kB Sector
N    } 
N
N    return (n);                                  // Sector Number
N}
N
N/*********************************************************************//**
N * @brief		Prepare sector(s) for write operation
N *
N * @param[in] start_sec	          The number of start sector
N * @param[in] end_sec	          The number of end sector
N *
N * @return 	CMD_SUCCESS/BUSY/INVALID_SECTOR.
N *
N **********************************************************************/
NIAP_STATUS_CODE PrepareSector(uint32_t start_sec, uint32_t end_sec)
N{
N    IAP_COMMAND_Type command;
N    command.cmd    = IAP_PREPARE;                    // Prepare Sector for Write
N    command.param[0] = start_sec;                    // Start Sector
N    command.param[1] = end_sec;                      // End Sector
N    IAP_Call (&command.cmd, &command.status);        // Call IAP Command
X    iap_entry (&command.cmd, &command.status);        
N    return (IAP_STATUS_CODE)command.status;
N}
N
N/*********************************************************************//**
N * @brief		 Copy RAM to Flash
N *
N * @param[in] dest	          destination buffer (in Flash memory).
N * @param[in] source	   source buffer (in RAM).
N * @param[in] size	          the write size.
N *
N * @return 	CMD_SUCCESS.
N *                  SRC_ADDR_ERROR/DST_ADDR_ERROR
N *                  SRC_ADDR_NOT_MAPPED/DST_ADDR_NOT_MAPPED
N *                  COUNT_ERROR/SECTOR_NOT_PREPARED_FOR_WRITE_OPERATION
N *                  BUSY
N *
N **********************************************************************/
NIAP_STATUS_CODE CopyRAM2Flash(uint8_t * dest, uint8_t* source, IAP_WRITE_SIZE size)
N{
N    uint32_t sec;
N    IAP_STATUS_CODE status;
N    IAP_COMMAND_Type command;
N
N	// Prepare sectors
N    sec = GetSecNum((uint32_t)dest);
N   	status = PrepareSector(sec, sec);
N	if(status != CMD_SUCCESS)
N        return status;
N   
N	// write
N	command.cmd    = IAP_COPY_RAM2FLASH;             // Copy RAM to Flash
N    command.param[0] = (uint32_t)dest;                 // Destination Flash Address
N    command.param[1] = (uint32_t)source;               // Source RAM Address
N    command.param[2] =  size;                          // Number of bytes
N    command.param[3] =  SystemCoreClock / 1000;         // CCLK in kHz
N    IAP_Call (&command.cmd, &command.status);              // Call IAP Command
X    iap_entry (&command.cmd, &command.status);              
N	  
N    return (IAP_STATUS_CODE)command.status;             // Finished without Errors	  
N}
N
N/*********************************************************************//**
N * @brief		 Erase sector(s)
N *
N * @param[in] start_sec	   The number of start sector
N * @param[in] end_sec	   The number of end sector
N *
N * @return 	CMD_SUCCESS.
N *                  INVALID_SECTOR
N *                  SECTOR_NOT_PREPARED_FOR_WRITE_OPERATION
N *                  BUSY
N *
N **********************************************************************/
NIAP_STATUS_CODE EraseSector(uint32_t start_sec, uint32_t end_sec)
N{
N    IAP_COMMAND_Type command;
N    IAP_STATUS_CODE status;
N
N	// Prepare sectors
N   	status = PrepareSector(start_sec, end_sec);
N	if(status != CMD_SUCCESS)
N        return status;
N
N	// Erase sectors
N    command.cmd    = IAP_ERASE;                    // Prepare Sector for Write
N    command.param[0] = start_sec;                  // Start Sector
N    command.param[1] = end_sec;                    // End Sector
N    command.param[2] =  SystemCoreClock / 1000;         // CCLK in kHz
N    IAP_Call (&command.cmd, &command.status);      // Call IAP Command
X    iap_entry (&command.cmd, &command.status);      
N    return (IAP_STATUS_CODE)command.status;  
N}
N
N/*********************************************************************//**
N * @brief		  Blank check sector(s)
N *
N * @param[in] start_sec	   The number of start sector
N * @param[in] end_sec	   The number of end sector
N * @param[out] first_nblank_loc  The offset of the first non-blank word
N  * @param[out] first_nblank_val  The value of the first non-blank word
N *
N * @return 	CMD_SUCCESS.
N *                  INVALID_SECTOR
N *                  SECTOR_NOT_BLANK
N *                  BUSY
N *
N **********************************************************************/
NIAP_STATUS_CODE BlankCheckSector(uint32_t start_sec, uint32_t end_sec,
N                                 uint32_t *first_nblank_loc, 
N								 uint32_t *first_nblank_val)
N{
N    IAP_COMMAND_Type command;
N	
N    command.cmd    = IAP_BLANK_CHECK;                // Prepare Sector for Write
N    command.param[0] = start_sec;                    // Start Sector
N    command.param[1] = end_sec;                      // End Sector
N    IAP_Call (&command.cmd, &command.status);        // Call IAP Command
X    iap_entry (&command.cmd, &command.status);        
N
N	if(command.status == SECTOR_NOT_BLANK)
N	{
N	  // Update out value
N	  if(first_nblank_loc != NULL)
X	  if(first_nblank_loc != ((void*) 0))
N	      *first_nblank_loc =  command.result[0];
N	  if(first_nblank_val != NULL)
X	  if(first_nblank_val != ((void*) 0))
N	      *first_nblank_val =  command.result[1];
N    }
N
N    return (IAP_STATUS_CODE)command.status;
N}
N
N/*********************************************************************//**
N * @brief		   Read part identification number
N *
N * @param[out] partID  Part ID
N *
N * @return 	CMD_SUCCESS
N *
N **********************************************************************/
NIAP_STATUS_CODE ReadPartID(uint32_t *partID)
N{
N   IAP_COMMAND_Type command;
N   command.cmd = IAP_READ_PART_ID;
N   IAP_Call (&command.cmd, &command.status);        // Call IAP Command
X   iap_entry (&command.cmd, &command.status);        
N
N   if(command.status == CMD_SUCCESS)
N   {
N      if(partID != NULL)
X      if(partID != ((void*) 0))
N	     *partID = command.result[0];
N   }
N
N   return (IAP_STATUS_CODE)command.status;
N}
N
N/*********************************************************************//**
N * @brief		   Read boot code version. The version is interpreted as <major>.<minor>.
N *
N * @param[out] major  The major
N * @param[out] minor  The minor
N *
N * @return 	CMD_SUCCESS
N *
N **********************************************************************/
NIAP_STATUS_CODE ReadBootCodeVer(uint8_t *major, uint8_t* minor)
N{
N   IAP_COMMAND_Type command;
N   command.cmd = IAP_READ_BOOT_VER;
N   IAP_Call (&command.cmd, &command.status);        // Call IAP Command
X   iap_entry (&command.cmd, &command.status);        
N
N   if(command.status == CMD_SUCCESS)
N   {
N      if(major != NULL)
X      if(major != ((void*) 0))
N	     *major = (command.result[0] >> 8) & 0xFF;
N      if(minor != NULL)
X      if(minor != ((void*) 0))
N	     *minor = (command.result[0]) & 0xFF;
N   }
N
N   return (IAP_STATUS_CODE)command.status;
N}
N
N/*********************************************************************//**
N * @brief		   Read Device serial number.
N *
N * @param[out] uid   Serial number.
N *
N * @return 	CMD_SUCCESS
N *
N **********************************************************************/
NIAP_STATUS_CODE ReadDeviceSerialNum(uint32_t *uid)
N{
N   IAP_COMMAND_Type command;
N   command.cmd = IAP_READ_SERIAL_NUMBER;
N   IAP_Call (&command.cmd, &command.status);        // Call IAP Command
X   iap_entry (&command.cmd, &command.status);        
N
N   if(command.status == CMD_SUCCESS)
N   {
N      if(uid != NULL)
X      if(uid != ((void*) 0))
N	  {
N	    uint32_t i = 0;
N		for(i = 0; i < 4; i++)
N	       uid[i] =  command.result[i];
N	  }
N   }
N
N   return (IAP_STATUS_CODE)command.status;
N}
N
N/*********************************************************************//**
N * @brief		   compare the memory contents at two locations.
N *
N * @param[in] addr1   The address of the 1st buffer (in RAM/Flash).
N * @param[in] addr2   The address of the 2nd buffer (in RAM/Flash).
N * @param[in] size      Number of bytes to be compared; should be a multiple of 4.
N *
N * @return 	CMD_SUCCESS
N *                  COMPARE_ERROR
N *                  COUNT_ERROR (Byte count is not a multiple of 4)
N *                  ADDR_ERROR
N *                  ADDR_NOT_MAPPED
N *
N **********************************************************************/
NIAP_STATUS_CODE Compare(uint8_t *addr1, uint8_t *addr2, uint32_t size)
N{
N   IAP_COMMAND_Type command;
N   command.cmd = IAP_COMPARE;
N   command.param[0] = (uint32_t)addr1;
N   command.param[1] = (uint32_t)addr2;
N   command.param[2] = size;
N   IAP_Call (&command.cmd, &command.status);        // Call IAP Command
X   iap_entry (&command.cmd, &command.status);        
N
N   return (IAP_STATUS_CODE)command.status;
N}
N
N/*********************************************************************//**
N * @brief		   Re-invoke ISP.
N *
N * @param[in] None.
N *
N * @return 	None.
N *
N **********************************************************************/
Nvoid InvokeISP(void)
N{
N   IAP_COMMAND_Type command;
N   command.cmd = IAP_REINVOKE_ISP;
N   IAP_Call (&command.cmd, &command.status);        // Call IAP Command
X   iap_entry (&command.cmd, &command.status);        
N}
N
N/**
N * @}
N */
N 
N
