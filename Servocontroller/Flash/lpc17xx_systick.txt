; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\lpc17xx_systick.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_systick.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\lpc17xx_systick.crf Lib\Drivers\source\lpc17xx_systick.c]
                          THUMB

                          AREA ||i.SYSTICK_ClearCounterFlag||, CODE, READONLY, ALIGN=1

                  SYSTICK_ClearCounterFlag PROC
;;;177     **********************************************************************/
;;;178    void SYSTICK_ClearCounterFlag(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;179    {
;;;180    	SysTick->CTRL &= ~ST_CTRL_COUNTFLAG;
000004  6900              LDR      r0,[r0,#0x10]
000006  f4203080          BIC      r0,r0,#0x10000
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;181    }
000010  4770              BX       lr
;;;182    /**
                          ENDP


                          AREA ||i.SYSTICK_Cmd||, CODE, READONLY, ALIGN=2

                  SYSTICK_Cmd PROC
;;;131     **********************************************************************/
;;;132    void SYSTICK_Cmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;133    {
000002  4604              MOV      r4,r0
;;;134    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
000004  b10c              CBZ      r4,|L2.10|
000006  2c01              CMP      r4,#1
000008  d100              BNE      |L2.12|
                  |L2.10|
00000a  e003              B        |L2.20|
                  |L2.12|
00000c  2186              MOVS     r1,#0x86
00000e  a00b              ADR      r0,|L2.60|
000010  f7fffffe          BL       check_failed
                  |L2.20|
;;;135    
;;;136    	if(NewState == ENABLE)
000014  2c01              CMP      r4,#1
000016  d108              BNE      |L2.42|
;;;137    		//Enable System Tick counter
;;;138    		SysTick->CTRL |= ST_CTRL_ENABLE;
000018  f04f20e0          MOV      r0,#0xe000e000
00001c  6900              LDR      r0,[r0,#0x10]
00001e  f0400001          ORR      r0,r0,#1
000022  f04f21e0          MOV      r1,#0xe000e000
000026  6108              STR      r0,[r1,#0x10]
000028  e007              B        |L2.58|
                  |L2.42|
;;;139    	else
;;;140    		//Disable System Tick counter
;;;141    		SysTick->CTRL &= ~ST_CTRL_ENABLE;
00002a  f04f20e0          MOV      r0,#0xe000e000
00002e  6900              LDR      r0,[r0,#0x10]
000030  f0200001          BIC      r0,r0,#1
000034  f04f21e0          MOV      r1,#0xe000e000
000038  6108              STR      r0,[r1,#0x10]
                  |L2.58|
;;;142    }
00003a  bd10              POP      {r4,pc}
;;;143    
                          ENDP

                  |L2.60|
00003c  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_systick.c",0
000040  44726976
000044  6572735c
000048  736f7572
00004c  63655c6c
000050  70633137
000054  78785f73
000058  79737469
00005c  636b2e63
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.SYSTICK_ExternalInit||, CODE, READONLY, ALIGN=1

                  SYSTICK_ExternalInit PROC
;;;97      **********************************************************************/
;;;98     void SYSTICK_ExternalInit(uint32_t freq, uint32_t time)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;99     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;100    	float maxtime;
;;;101    
;;;102    	/* With external clock frequency for LPC17xx is 'freq'
;;;103    	 * And limit 24 bit for RELOAD value
;;;104    	 * So the maximum time can be set:
;;;105    	 * 1/freq * (2^24) * 1000 (ms)
;;;106    	 */
;;;107    	//check time value is available or not
;;;108    	maxtime = (1<<24)/(freq / 1000) ;
000008  f44f707a          MOV      r0,#0x3e8
00000c  fbb4f0f0          UDIV     r0,r4,r0
000010  f04f7180          MOV      r1,#0x1000000
000014  fbb1f7f0          UDIV     r7,r1,r0
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       __aeabi_ui2f
00001e  4606              MOV      r6,r0
;;;109    	if (time>maxtime)
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       __aeabi_ui2f
000026  4607              MOV      r7,r0
000028  4631              MOV      r1,r6
00002a  f7fffffe          BL       __aeabi_cfrcmple
00002e  d201              BCS      |L3.52|
;;;110    		//Error Loop
;;;111    		while(1);
000030  bf00              NOP      
                  |L3.50|
000032  e7fe              B        |L3.50|
                  |L3.52|
;;;112    	else
;;;113    	{
;;;114    		//Select external clock is System Tick clock source
;;;115    		SysTick->CTRL &= ~ ST_CTRL_CLKSOURCE;
000034  f04f20e0          MOV      r0,#0xe000e000
000038  6900              LDR      r0,[r0,#0x10]
00003a  f0200004          BIC      r0,r0,#4
00003e  f04f21e0          MOV      r1,#0xe000e000
000042  6108              STR      r0,[r1,#0x10]
;;;116    		/* Set RELOAD value
;;;117    		 * RELOAD = (freq/1000) * time - 1
;;;118    		 * with time base is millisecond
;;;119    		 */
;;;120    		maxtime = (freq/1000)*time - 1;
000044  f44f707a          MOV      r0,#0x3e8
000048  fbb4f0f0          UDIV     r0,r4,r0
00004c  4368              MULS     r0,r5,r0
00004e  1e47              SUBS     r7,r0,#1
000050  4638              MOV      r0,r7
000052  f7fffffe          BL       __aeabi_ui2f
000056  4606              MOV      r6,r0
;;;121    		SysTick->LOAD = (freq/1000)*time - 1;
000058  f44f707a          MOV      r0,#0x3e8
00005c  fbb4f0f0          UDIV     r0,r4,r0
000060  4368              MULS     r0,r5,r0
000062  1e40              SUBS     r0,r0,#1
000064  f04f21e0          MOV      r1,#0xe000e000
000068  6148              STR      r0,[r1,#0x14]
;;;122    	}
;;;123    }
00006a  e8bd81f0          POP      {r4-r8,pc}
;;;124    
                          ENDP


                          AREA ||i.SYSTICK_GetCurrentValue||, CODE, READONLY, ALIGN=1

                  SYSTICK_GetCurrentValue PROC
;;;167     **********************************************************************/
;;;168    uint32_t SYSTICK_GetCurrentValue(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;169    {
;;;170    	return (SysTick->VAL);
000004  6980              LDR      r0,[r0,#0x18]
;;;171    }
000006  4770              BX       lr
;;;172    
                          ENDP


                          AREA ||i.SYSTICK_IntCmd||, CODE, READONLY, ALIGN=2

                  SYSTICK_IntCmd PROC
;;;150     **********************************************************************/
;;;151    void SYSTICK_IntCmd(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;152    {
000002  4604              MOV      r4,r0
;;;153    	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
000004  b10c              CBZ      r4,|L5.10|
000006  2c01              CMP      r4,#1
000008  d100              BNE      |L5.12|
                  |L5.10|
00000a  e003              B        |L5.20|
                  |L5.12|
00000c  2199              MOVS     r1,#0x99
00000e  a00b              ADR      r0,|L5.60|
000010  f7fffffe          BL       check_failed
                  |L5.20|
;;;154    
;;;155    	if(NewState == ENABLE)
000014  2c01              CMP      r4,#1
000016  d108              BNE      |L5.42|
;;;156    		//Enable System Tick counter
;;;157    		SysTick->CTRL |= ST_CTRL_TICKINT;
000018  f04f20e0          MOV      r0,#0xe000e000
00001c  6900              LDR      r0,[r0,#0x10]
00001e  f0400002          ORR      r0,r0,#2
000022  f04f21e0          MOV      r1,#0xe000e000
000026  6108              STR      r0,[r1,#0x10]
000028  e007              B        |L5.58|
                  |L5.42|
;;;158    	else
;;;159    		//Disable System Tick counter
;;;160    		SysTick->CTRL &= ~ST_CTRL_TICKINT;
00002a  f04f20e0          MOV      r0,#0xe000e000
00002e  6900              LDR      r0,[r0,#0x10]
000030  f0200002          BIC      r0,r0,#2
000034  f04f21e0          MOV      r1,#0xe000e000
000038  6108              STR      r0,[r1,#0x10]
                  |L5.58|
;;;161    }
00003a  bd10              POP      {r4,pc}
;;;162    
                          ENDP

                  |L5.60|
00003c  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_systick.c",0
000040  44726976
000044  6572735c
000048  736f7572
00004c  63655c6c
000050  70633137
000054  78785f73
000058  79737469
00005c  636b2e63
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.SYSTICK_InternalInit||, CODE, READONLY, ALIGN=2

                  SYSTICK_InternalInit PROC
;;;63      **********************************************************************/
;;;64     void SYSTICK_InternalInit(uint32_t time)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;65     {
000004  4604              MOV      r4,r0
;;;66     	uint32_t cclk;
;;;67     	float maxtime;
;;;68     
;;;69     	cclk = SystemCoreClock;
000006  4815              LDR      r0,|L6.92|
000008  6805              LDR      r5,[r0,#0]  ; SystemCoreClock
;;;70     	/* With internal CPU clock frequency for LPC17xx is 'SystemCoreClock'
;;;71     	 * And limit 24 bit for RELOAD value
;;;72     	 * So the maximum time can be set:
;;;73     	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
;;;74     	 */
;;;75     	//check time value is available or not
;;;76     	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
00000a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000c  f44f717a          MOV      r1,#0x3e8
000010  fbb0f0f1          UDIV     r0,r0,r1
000014  f04f7180          MOV      r1,#0x1000000
000018  fbb1f7f0          UDIV     r7,r1,r0
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       __aeabi_ui2f
000022  4606              MOV      r6,r0
;;;77     	if(time > maxtime)
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       __aeabi_ui2f
00002a  4607              MOV      r7,r0
00002c  4631              MOV      r1,r6
00002e  f7fffffe          BL       __aeabi_cfrcmple
000032  d201              BCS      |L6.56|
;;;78     		//Error loop
;;;79     		while(1);
000034  bf00              NOP      
                  |L6.54|
000036  e7fe              B        |L6.54|
                  |L6.56|
;;;80     	else
;;;81     	{
;;;82     		//Select CPU clock is System Tick clock source
;;;83     		SysTick->CTRL |= ST_CTRL_CLKSOURCE;
000038  f04f20e0          MOV      r0,#0xe000e000
00003c  6900              LDR      r0,[r0,#0x10]
00003e  f0400004          ORR      r0,r0,#4
000042  f04f21e0          MOV      r1,#0xe000e000
000046  6108              STR      r0,[r1,#0x10]
;;;84     		/* Set RELOAD value
;;;85     		 * RELOAD = (SystemCoreClock/1000) * time - 1
;;;86     		 * with time base is millisecond
;;;87     		 */
;;;88     		SysTick->LOAD = (cclk/1000)*time - 1;
000048  f44f707a          MOV      r0,#0x3e8
00004c  fbb5f0f0          UDIV     r0,r5,r0
000050  4360              MULS     r0,r4,r0
000052  1e40              SUBS     r0,r0,#1
000054  6148              STR      r0,[r1,#0x14]
;;;89     	}
;;;90     }
000056  e8bd81f0          POP      {r4-r8,pc}
;;;91     
                          ENDP

00005a  0000              DCW      0x0000
                  |L6.92|
                          DCD      SystemCoreClock

;*** Start embedded assembler ***

#line 1 "Lib\\Drivers\\source\\lpc17xx_systick.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_lpc17xx_systick_c_11aed849____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_lpc17xx_systick_c_11aed849____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_lpc17xx_systick_c_11aed849____REVSH|
#line 144
|__asm___17_lpc17xx_systick_c_11aed849____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
