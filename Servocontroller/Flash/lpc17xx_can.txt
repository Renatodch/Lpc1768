; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\lpc17xx_can.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_can.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\lpc17xx_can.crf Lib\Drivers\source\lpc17xx_can.c]
                          THUMB

                          AREA ||i.CAN_DeInit||, CODE, READONLY, ALIGN=2

                  CAN_DeInit PROC
;;;204     *********************************************************************/
;;;205    void CAN_DeInit(LPC_CAN_TypeDef *CANx)
000000  b510              PUSH     {r4,lr}
;;;206    {
000002  4604              MOV      r4,r0
;;;207    	CHECK_PARAM(PARAM_CANx(CANx));
000004  480c              LDR      r0,|L1.56|
000006  4284              CMP      r4,r0
000008  d002              BEQ      |L1.16|
00000a  480c              LDR      r0,|L1.60|
00000c  4284              CMP      r4,r0
00000e  d100              BNE      |L1.18|
                  |L1.16|
000010  e003              B        |L1.26|
                  |L1.18|
000012  21cf              MOVS     r1,#0xcf
000014  a00a              ADR      r0,|L1.64|
000016  f7fffffe          BL       check_failed
                  |L1.26|
;;;208    
;;;209    	if(CANx == LPC_CAN1)
00001a  4807              LDR      r0,|L1.56|
00001c  4284              CMP      r4,r0
00001e  d105              BNE      |L1.44|
;;;210    	{
;;;211    		/* Turn on power and clock for CAN1 */
;;;212    		CLKPWR_ConfigPPWR(CLKPWR_PCONP_PCAN1, DISABLE);
000020  2100              MOVS     r1,#0
000022  f44f5000          MOV      r0,#0x2000
000026  f7fffffe          BL       CLKPWR_ConfigPPWR
00002a  e004              B        |L1.54|
                  |L1.44|
;;;213    	}
;;;214    	else
;;;215    	{
;;;216    		/* Turn on power and clock for CAN1 */
;;;217    		CLKPWR_ConfigPPWR(CLKPWR_PCONP_PCAN2, DISABLE);
00002c  2100              MOVS     r1,#0
00002e  f44f4080          MOV      r0,#0x4000
000032  f7fffffe          BL       CLKPWR_ConfigPPWR
                  |L1.54|
;;;218    	}
;;;219    }
000036  bd10              POP      {r4,pc}
;;;220    
                          ENDP

                  |L1.56|
                          DCD      0x40044000
                  |L1.60|
                          DCD      0x40048000
                  |L1.64|
000040  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
000044  44726976
000048  6572735c
00004c  736f7572
000050  63655c6c
000054  70633137
000058  78785f63
00005c  616e2e63
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.CAN_FullCANIntGetStatus||, CODE, READONLY, ALIGN=2

                  CAN_FullCANIntGetStatus PROC
;;;1900    **********************************************************************/
;;;1901   IntStatus CAN_FullCANIntGetStatus (LPC_CANAF_TypeDef* CANAFx)
000000  b510              PUSH     {r4,lr}
;;;1902   {
000002  4604              MOV      r4,r0
;;;1903   	CHECK_PARAM( PARAM_CANAFx(CANAFx));
000004  4807              LDR      r0,|L2.36|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L2.12|
00000a  e004              B        |L2.22|
                  |L2.12|
00000c  f240716f          MOV      r1,#0x76f
000010  a005              ADR      r0,|L2.40|
000012  f7fffffe          BL       check_failed
                  |L2.22|
;;;1904   	if (CANAFx->FCANIE)
000016  6a20              LDR      r0,[r4,#0x20]
000018  b108              CBZ      r0,|L2.30|
;;;1905   		return SET;
00001a  2001              MOVS     r0,#1
                  |L2.28|
;;;1906   	return RESET;
;;;1907   }
00001c  bd10              POP      {r4,pc}
                  |L2.30|
00001e  2000              MOVS     r0,#0                 ;1906
000020  e7fc              B        |L2.28|
;;;1908   
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      0x4003c000
                  |L2.40|
000028  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
00002c  44726976
000030  6572735c
000034  736f7572
000038  63655c6c
00003c  70633137
000040  78785f63
000044  616e2e63
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.CAN_FullCANPendGetStatus||, CODE, READONLY, ALIGN=2

                  CAN_FullCANPendGetStatus PROC
;;;1916    **********************************************************************/
;;;1917   uint32_t CAN_FullCANPendGetStatus(LPC_CANAF_TypeDef* CANAFx, FullCAN_IC_Type type)
000000  b570              PUSH     {r4-r6,lr}
;;;1918   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1919   	CHECK_PARAM(PARAM_CANAFx(CANAFx));
000006  480b              LDR      r0,|L3.52|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L3.14|
00000c  e004              B        |L3.24|
                  |L3.14|
00000e  f240717f          MOV      r1,#0x77f
000012  a009              ADR      r0,|L3.56|
000014  f7fffffe          BL       check_failed
                  |L3.24|
;;;1920   	CHECK_PARAM( PARAM_FULLCAN_IC(type));
000018  b10d              CBZ      r5,|L3.30|
00001a  2d01              CMP      r5,#1
00001c  d100              BNE      |L3.32|
                  |L3.30|
00001e  e004              B        |L3.42|
                  |L3.32|
000020  f44f61f0          MOV      r1,#0x780
000024  a004              ADR      r0,|L3.56|
000026  f7fffffe          BL       check_failed
                  |L3.42|
;;;1921   	if (type == FULLCAN_IC0)
00002a  b90d              CBNZ     r5,|L3.48|
;;;1922   		return CANAFx->FCANIC0;
00002c  6a60              LDR      r0,[r4,#0x24]
                  |L3.46|
;;;1923   	return CANAFx->FCANIC1;
;;;1924   }
00002e  bd70              POP      {r4-r6,pc}
                  |L3.48|
000030  6aa0              LDR      r0,[r4,#0x28]         ;1923
000032  e7fc              B        |L3.46|
;;;1925   /* End of Public Variables ---------------------------------------------------------- */
                          ENDP

                  |L3.52|
                          DCD      0x4003c000
                  |L3.56|
000038  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
00003c  44726976
000040  6572735c
000044  736f7572
000048  63655c6c
00004c  70633137
000050  78785f63
000054  616e2e63
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.CAN_GetCRStatus||, CODE, READONLY, ALIGN=2

                  CAN_GetCRStatus PROC
;;;1678    *********************************************************************/
;;;1679   uint32_t CAN_GetCRStatus (LPC_CANCR_TypeDef* CANCRx, CAN_CR_STS_Type arg)
000000  b570              PUSH     {r4-r6,lr}
;;;1680   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1681   	CHECK_PARAM(PARAM_CANCRx(CANCRx));
000006  480f              LDR      r0,|L4.68|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L4.14|
00000c  e004              B        |L4.24|
                  |L4.14|
00000e  f2406191          MOV      r1,#0x691
000012  a00d              ADR      r0,|L4.72|
000014  f7fffffe          BL       check_failed
                  |L4.24|
;;;1682   	CHECK_PARAM(PARAM_CR_STS_TYPE(arg));
000018  b11d              CBZ      r5,|L4.34|
00001a  2d01              CMP      r5,#1
00001c  d001              BEQ      |L4.34|
00001e  2d02              CMP      r5,#2
000020  d100              BNE      |L4.36|
                  |L4.34|
000022  e004              B        |L4.46|
                  |L4.36|
000024  f2406192          MOV      r1,#0x692
000028  a007              ADR      r0,|L4.72|
00002a  f7fffffe          BL       check_failed
                  |L4.46|
;;;1683   
;;;1684   	switch (arg)
00002e  b115              CBZ      r5,|L4.54|
000030  2d01              CMP      r5,#1
000032  d104              BNE      |L4.62|
000034  e001              B        |L4.58|
                  |L4.54|
;;;1685   	{
;;;1686   	case CANCR_TX_STS:
;;;1687   		return CANCRx->CANTxSR;
000036  6820              LDR      r0,[r4,#0]
                  |L4.56|
;;;1688   
;;;1689   	case CANCR_RX_STS:
;;;1690   		return CANCRx->CANRxSR;
;;;1691   
;;;1692   	default:	// CANCR_MS
;;;1693   		return CANCRx->CANMSR;
;;;1694   	}
;;;1695   }
000038  bd70              POP      {r4-r6,pc}
                  |L4.58|
00003a  6860              LDR      r0,[r4,#4]            ;1690
00003c  e7fc              B        |L4.56|
                  |L4.62|
00003e  68a0              LDR      r0,[r4,#8]            ;1693
000040  e7fa              B        |L4.56|
;;;1696   /********************************************************************//**
                          ENDP

000042  0000              DCW      0x0000
                  |L4.68|
                          DCD      0x40040000
                  |L4.72|
000048  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
00004c  44726976
000050  6572735c
000054  736f7572
000058  63655c6c
00005c  70633137
000060  78785f63
000064  616e2e63
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.CAN_GetCTRLStatus||, CODE, READONLY, ALIGN=2

                  CAN_GetCTRLStatus PROC
;;;1648    *********************************************************************/
;;;1649   uint32_t CAN_GetCTRLStatus (LPC_CAN_TypeDef* CANx, CAN_CTRL_STS_Type arg)
000000  b570              PUSH     {r4-r6,lr}
;;;1650   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1651   	CHECK_PARAM(PARAM_CANx(CANx));
000006  4813              LDR      r0,|L5.84|
000008  4284              CMP      r4,r0
00000a  d002              BEQ      |L5.18|
00000c  4812              LDR      r0,|L5.88|
00000e  4284              CMP      r4,r0
000010  d100              BNE      |L5.20|
                  |L5.18|
000012  e004              B        |L5.30|
                  |L5.20|
000014  f2406173          MOV      r1,#0x673
000018  a010              ADR      r0,|L5.92|
00001a  f7fffffe          BL       check_failed
                  |L5.30|
;;;1652   	CHECK_PARAM(PARAM_CTRL_STS_TYPE(arg));
00001e  b12d              CBZ      r5,|L5.44|
000020  2d01              CMP      r5,#1
000022  d003              BEQ      |L5.44|
000024  2d02              CMP      r5,#2
000026  d001              BEQ      |L5.44|
000028  2d03              CMP      r5,#3
00002a  d100              BNE      |L5.46|
                  |L5.44|
00002c  e004              B        |L5.56|
                  |L5.46|
00002e  f2406174          MOV      r1,#0x674
000032  a00a              ADR      r0,|L5.92|
000034  f7fffffe          BL       check_failed
                  |L5.56|
;;;1653   
;;;1654   	switch (arg)
000038  b125              CBZ      r5,|L5.68|
00003a  2d01              CMP      r5,#1
00003c  d004              BEQ      |L5.72|
00003e  2d02              CMP      r5,#2
000040  d106              BNE      |L5.80|
000042  e003              B        |L5.76|
                  |L5.68|
;;;1655   	{
;;;1656   	case CANCTRL_GLOBAL_STS:
;;;1657   		return CANx->GSR;
000044  68a0              LDR      r0,[r4,#8]
                  |L5.70|
;;;1658   
;;;1659   	case CANCTRL_INT_CAP:
;;;1660   		return CANx->ICR;
;;;1661   
;;;1662   	case CANCTRL_ERR_WRN:
;;;1663   		return CANx->EWL;
;;;1664   
;;;1665   	default: // CANCTRL_STS
;;;1666   		return CANx->SR;
;;;1667   	}
;;;1668   }
000046  bd70              POP      {r4-r6,pc}
                  |L5.72|
000048  68e0              LDR      r0,[r4,#0xc]          ;1660
00004a  e7fc              B        |L5.70|
                  |L5.76|
00004c  69a0              LDR      r0,[r4,#0x18]         ;1663
00004e  e7fa              B        |L5.70|
                  |L5.80|
000050  69e0              LDR      r0,[r4,#0x1c]         ;1666
000052  e7f8              B        |L5.70|
;;;1669   /********************************************************************//**
                          ENDP

                  |L5.84|
                          DCD      0x40044000
                  |L5.88|
                          DCD      0x40048000
                  |L5.92|
00005c  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
000060  44726976
000064  6572735c
000068  736f7572
00006c  63655c6c
000070  70633137
000074  78785f63
000078  616e2e63
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||i.CAN_IRQCmd||, CODE, READONLY, ALIGN=2

                  CAN_IRQCmd PROC
;;;1719    *********************************************************************/
;;;1720   void CAN_IRQCmd (LPC_CAN_TypeDef* CANx, CAN_INT_EN_Type arg, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;1721   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;1722   	CHECK_PARAM(PARAM_CANx(CANx));
000008  4828              LDR      r0,|L6.172|
00000a  4285              CMP      r5,r0
00000c  d002              BEQ      |L6.20|
00000e  4828              LDR      r0,|L6.176|
000010  4285              CMP      r5,r0
000012  d100              BNE      |L6.22|
                  |L6.20|
000014  e004              B        |L6.32|
                  |L6.22|
000016  f24061ba          MOV      r1,#0x6ba
00001a  a026              ADR      r0,|L6.180|
00001c  f7fffffe          BL       check_failed
                  |L6.32|
;;;1723   	CHECK_PARAM(PARAM_INT_EN_TYPE(arg));
000020  b1ac              CBZ      r4,|L6.78|
000022  2c01              CMP      r4,#1
000024  d013              BEQ      |L6.78|
000026  2c02              CMP      r4,#2
000028  d011              BEQ      |L6.78|
00002a  2c03              CMP      r4,#3
00002c  d00f              BEQ      |L6.78|
00002e  2c04              CMP      r4,#4
000030  d00d              BEQ      |L6.78|
000032  2c05              CMP      r4,#5
000034  d00b              BEQ      |L6.78|
000036  2c06              CMP      r4,#6
000038  d009              BEQ      |L6.78|
00003a  2c07              CMP      r4,#7
00003c  d007              BEQ      |L6.78|
00003e  2c08              CMP      r4,#8
000040  d005              BEQ      |L6.78|
000042  2c09              CMP      r4,#9
000044  d003              BEQ      |L6.78|
000046  2c0a              CMP      r4,#0xa
000048  d001              BEQ      |L6.78|
00004a  2c0b              CMP      r4,#0xb
00004c  d100              BNE      |L6.80|
                  |L6.78|
00004e  e004              B        |L6.90|
                  |L6.80|
000050  f24061bb          MOV      r1,#0x6bb
000054  a017              ADR      r0,|L6.180|
000056  f7fffffe          BL       check_failed
                  |L6.90|
;;;1724   	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
00005a  b10e              CBZ      r6,|L6.96|
00005c  2e01              CMP      r6,#1
00005e  d100              BNE      |L6.98|
                  |L6.96|
000060  e004              B        |L6.108|
                  |L6.98|
000062  f24061bc          MOV      r1,#0x6bc
000066  a013              ADR      r0,|L6.180|
000068  f7fffffe          BL       check_failed
                  |L6.108|
;;;1725   
;;;1726   	if(NewState == ENABLE)
00006c  2e01              CMP      r6,#1
00006e  d10e              BNE      |L6.142|
;;;1727   	{
;;;1728   		if(arg==CANINT_FCE)
000070  2c0b              CMP      r4,#0xb
000072  d106              BNE      |L6.130|
;;;1729   		{
;;;1730   			LPC_CANAF->AFMR = 0x01;
000074  2001              MOVS     r0,#1
000076  4918              LDR      r1,|L6.216|
000078  6008              STR      r0,[r1,#0]
;;;1731   			LPC_CANAF->FCANIE = 0x01;
00007a  6208              STR      r0,[r1,#0x20]
;;;1732   			LPC_CANAF->AFMR = 0x04;
00007c  2004              MOVS     r0,#4
00007e  6008              STR      r0,[r1,#0]
000080  e013              B        |L6.170|
                  |L6.130|
;;;1733   		}
;;;1734   		else
;;;1735   			CANx->IER |= (1 << arg);
000082  6928              LDR      r0,[r5,#0x10]
000084  2101              MOVS     r1,#1
000086  40a1              LSLS     r1,r1,r4
000088  4308              ORRS     r0,r0,r1
00008a  6128              STR      r0,[r5,#0x10]
00008c  e00d              B        |L6.170|
                  |L6.142|
;;;1736   	}
;;;1737   	else
;;;1738   	{
;;;1739   		if(arg==CANINT_FCE){
00008e  2c0b              CMP      r4,#0xb
000090  d106              BNE      |L6.160|
;;;1740   			LPC_CANAF->AFMR = 0x01;
000092  2001              MOVS     r0,#1
000094  4910              LDR      r1,|L6.216|
000096  6008              STR      r0,[r1,#0]
;;;1741   			LPC_CANAF->FCANIE = 0x01;
000098  6208              STR      r0,[r1,#0x20]
;;;1742   			LPC_CANAF->AFMR = 0x00;
00009a  2000              MOVS     r0,#0
00009c  6008              STR      r0,[r1,#0]
00009e  e004              B        |L6.170|
                  |L6.160|
;;;1743   		}
;;;1744   		else
;;;1745   			CANx->IER &= ~(1 << arg);
0000a0  6928              LDR      r0,[r5,#0x10]
0000a2  2101              MOVS     r1,#1
0000a4  40a1              LSLS     r1,r1,r4
0000a6  4388              BICS     r0,r0,r1
0000a8  6128              STR      r0,[r5,#0x10]
                  |L6.170|
;;;1746   	}
;;;1747   }
0000aa  bd70              POP      {r4-r6,pc}
;;;1748   
                          ENDP

                  |L6.172|
                          DCD      0x40044000
                  |L6.176|
                          DCD      0x40048000
                  |L6.180|
0000b4  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
0000b8  44726976
0000bc  6572735c
0000c0  736f7572
0000c4  63655c6c
0000c8  70633137
0000cc  78785f63
0000d0  616e2e63
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L6.216|
                          DCD      0x4003c000

                          AREA ||i.CAN_Init||, CODE, READONLY, ALIGN=2

                  CAN_Init PROC
;;;147     *********************************************************************/
;;;148    void CAN_Init(LPC_CAN_TypeDef *CANx, uint32_t baudrate)
000000  b570              PUSH     {r4-r6,lr}
;;;149    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;150    	uint16_t i;
;;;151    	CHECK_PARAM(PARAM_CANx(CANx));
000006  4824              LDR      r0,|L7.152|
000008  4284              CMP      r4,r0
00000a  d002              BEQ      |L7.18|
00000c  4823              LDR      r0,|L7.156|
00000e  4284              CMP      r4,r0
000010  d100              BNE      |L7.20|
                  |L7.18|
000012  e003              B        |L7.28|
                  |L7.20|
000014  2197              MOVS     r1,#0x97
000016  a022              ADR      r0,|L7.160|
000018  f7fffffe          BL       check_failed
                  |L7.28|
;;;152    
;;;153    	if(CANx == LPC_CAN1)
00001c  481e              LDR      r0,|L7.152|
00001e  4284              CMP      r4,r0
000020  d104              BNE      |L7.44|
;;;154    	{
;;;155    		/* Turn on power and clock for CAN1 */
;;;156    		CLKPWR_ConfigPPWR(CLKPWR_PCONP_PCAN1, ENABLE);
000022  2101              MOVS     r1,#1
000024  0348              LSLS     r0,r1,#13
000026  f7fffffe          BL       CLKPWR_ConfigPPWR
00002a  e003              B        |L7.52|
                  |L7.44|
;;;157    		/* Set clock divide for CAN1 */
;;;158    	}
;;;159    	else
;;;160    	{
;;;161    		/* Turn on power and clock for CAN1 */
;;;162    		CLKPWR_ConfigPPWR(CLKPWR_PCONP_PCAN2, ENABLE);
00002c  2101              MOVS     r1,#1
00002e  0388              LSLS     r0,r1,#14
000030  f7fffffe          BL       CLKPWR_ConfigPPWR
                  |L7.52|
;;;163    		/* Set clock divide for CAN2 */
;;;164    	}
;;;165    	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_CAN1, CLKPWR_PCLKSEL_CCLK_DIV_2);
000034  2102              MOVS     r1,#2
000036  201a              MOVS     r0,#0x1a
000038  f7fffffe          BL       CLKPWR_SetPCLKDiv
;;;166    	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_CAN2, CLKPWR_PCLKSEL_CCLK_DIV_2);
00003c  2102              MOVS     r1,#2
00003e  201c              MOVS     r0,#0x1c
000040  f7fffffe          BL       CLKPWR_SetPCLKDiv
;;;167    	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_ACF, CLKPWR_PCLKSEL_CCLK_DIV_2);
000044  2102              MOVS     r1,#2
000046  201e              MOVS     r0,#0x1e
000048  f7fffffe          BL       CLKPWR_SetPCLKDiv
;;;168    
;;;169    	CANx->MOD = 1; // Enter Reset Mode
00004c  2001              MOVS     r0,#1
00004e  6020              STR      r0,[r4,#0]
;;;170    	CANx->IER = 0; // Disable All CAN Interrupts
000050  2000              MOVS     r0,#0
000052  6120              STR      r0,[r4,#0x10]
;;;171    	CANx->GSR = 0;
000054  60a0              STR      r0,[r4,#8]
;;;172    	/* Request command to release Rx, Tx buffer and clear data overrun */
;;;173    	//CANx->CMR = CAN_CMR_AT | CAN_CMR_RRB | CAN_CMR_CDO;
;;;174    	CANx->CMR = (1<<1)|(1<<2)|(1<<3);
000056  200e              MOVS     r0,#0xe
000058  6060              STR      r0,[r4,#4]
;;;175    	/* Read to clear interrupt pending in interrupt capture register */
;;;176    	i = CANx->ICR;
00005a  68e0              LDR      r0,[r4,#0xc]
00005c  b285              UXTH     r5,r0
;;;177    	CANx->MOD = 0;// Return Normal operating
00005e  2000              MOVS     r0,#0
000060  6020              STR      r0,[r4,#0]
;;;178    
;;;179    	//Reset CANAF value
;;;180    	LPC_CANAF->AFMR = 0x01;
000062  2001              MOVS     r0,#1
000064  4917              LDR      r1,|L7.196|
000066  6008              STR      r0,[r1,#0]
;;;181    
;;;182    	//clear ALUT RAM
;;;183    	for (i = 0; i < 512; i++) {
000068  2500              MOVS     r5,#0
00006a  e005              B        |L7.120|
                  |L7.108|
;;;184    		LPC_CANAF_RAM->mask[i] = 0x00;
00006c  2000              MOVS     r0,#0
00006e  4a16              LDR      r2,|L7.200|
000070  f8420025          STR      r0,[r2,r5,LSL #2]
000074  1c68              ADDS     r0,r5,#1              ;183
000076  b285              UXTH     r5,r0                 ;183
                  |L7.120|
000078  f5b57f00          CMP      r5,#0x200             ;183
00007c  dbf6              BLT      |L7.108|
;;;185    	}
;;;186    
;;;187    	LPC_CANAF->SFF_sa = 0x00;
00007e  2000              MOVS     r0,#0
000080  4910              LDR      r1,|L7.196|
000082  6048              STR      r0,[r1,#4]
;;;188    	LPC_CANAF->SFF_GRP_sa = 0x00;
000084  6088              STR      r0,[r1,#8]
;;;189    	LPC_CANAF->EFF_sa = 0x00;
000086  60c8              STR      r0,[r1,#0xc]
;;;190    	LPC_CANAF->EFF_GRP_sa = 0x00;
000088  6108              STR      r0,[r1,#0x10]
;;;191    	LPC_CANAF->ENDofTable = 0x00;
00008a  6148              STR      r0,[r1,#0x14]
;;;192    
;;;193    	LPC_CANAF->AFMR = 0x00;
00008c  6008              STR      r0,[r1,#0]
;;;194    	/* Set baudrate */
;;;195    	can_SetBaudrate (CANx, baudrate);
00008e  4631              MOV      r1,r6
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       can_SetBaudrate
;;;196    }
000096  bd70              POP      {r4-r6,pc}
;;;197    
                          ENDP

                  |L7.152|
                          DCD      0x40044000
                  |L7.156|
                          DCD      0x40048000
                  |L7.160|
0000a0  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
0000a4  44726976
0000a8  6572735c
0000ac  736f7572
0000b0  63655c6c
0000b4  70633137
0000b8  78785f63
0000bc  616e2e63
0000c0  00      
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L7.196|
                          DCD      0x4003c000
                  |L7.200|
                          DCD      0x40038000

                          AREA ||i.CAN_IntGetStatus||, CODE, READONLY, ALIGN=2

                  CAN_IntGetStatus PROC
;;;1887    **********************************************************************/
;;;1888   uint32_t CAN_IntGetStatus(LPC_CAN_TypeDef* CANx)
000000  b510              PUSH     {r4,lr}
;;;1889   {
000002  4604              MOV      r4,r0
;;;1890   	CHECK_PARAM(PARAM_CANx(CANx));
000004  4806              LDR      r0,|L8.32|
000006  4284              CMP      r4,r0
000008  d002              BEQ      |L8.16|
00000a  4806              LDR      r0,|L8.36|
00000c  4284              CMP      r4,r0
00000e  d100              BNE      |L8.18|
                  |L8.16|
000010  e004              B        |L8.28|
                  |L8.18|
000012  f2407162          MOV      r1,#0x762
000016  a004              ADR      r0,|L8.40|
000018  f7fffffe          BL       check_failed
                  |L8.28|
;;;1891   	return CANx->ICR;
00001c  68e0              LDR      r0,[r4,#0xc]
;;;1892   }
00001e  bd10              POP      {r4,pc}
;;;1893   
                          ENDP

                  |L8.32|
                          DCD      0x40044000
                  |L8.36|
                          DCD      0x40048000
                  |L8.40|
000028  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
00002c  44726976
000030  6572735c
000034  736f7572
000038  63655c6c
00003c  70633137
000040  78785f63
000044  616e2e63
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.CAN_LoadExplicitEntry||, CODE, READONLY, ALIGN=2

                  CAN_LoadExplicitEntry PROC
;;;501     *********************************************************************/
;;;502    CAN_ERROR CAN_LoadExplicitEntry(LPC_CAN_TypeDef* CANx, uint32_t id, CAN_ID_FORMAT_Type format)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;503    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4693              MOV      r11,r2
;;;504    	uint32_t tmp0 = 0;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;505    	uint32_t buf0=0, buf1=0;
00000e  2700              MOVS     r7,#0
000010  4681              MOV      r9,r0
;;;506    	int16_t cnt1=0, cnt2=0, bound1=0, total=0;
000012  2400              MOVS     r4,#0
000014  2600              MOVS     r6,#0
000016  4682              MOV      r10,r0
000018  9000              STR      r0,[sp,#0]
;;;507    
;;;508    
;;;509    	CHECK_PARAM(PARAM_CANx(CANx));
00001a  48cb              LDR      r0,|L9.840|
00001c  4580              CMP      r8,r0
00001e  d002              BEQ      |L9.38|
000020  48ca              LDR      r0,|L9.844|
000022  4580              CMP      r8,r0
000024  d100              BNE      |L9.40|
                  |L9.38|
000026  e004              B        |L9.50|
                  |L9.40|
000028  f24011fd          MOV      r1,#0x1fd
00002c  a0c8              ADR      r0,|L9.848|
00002e  f7fffffe          BL       check_failed
                  |L9.50|
;;;510    	CHECK_PARAM(PARAM_ID_FORMAT(format));
000032  f1bb0f00          CMP      r11,#0
000036  d002              BEQ      |L9.62|
000038  f1bb0f01          CMP      r11,#1
00003c  d100              BNE      |L9.64|
                  |L9.62|
00003e  e004              B        |L9.74|
                  |L9.64|
000040  f44f71ff          MOV      r1,#0x1fe
000044  a0c2              ADR      r0,|L9.848|
000046  f7fffffe          BL       check_failed
                  |L9.74|
;;;511    
;;;512    	if (CANx == LPC_CAN1)
00004a  48bf              LDR      r0,|L9.840|
00004c  4580              CMP      r8,r0
00004e  d102              BNE      |L9.86|
;;;513    	{
;;;514    		tmp0 = 0;
000050  2000              MOVS     r0,#0
000052  9001              STR      r0,[sp,#4]
000054  e004              B        |L9.96|
                  |L9.86|
;;;515    	}
;;;516    	else if (CANx == LPC_CAN2)
000056  48bd              LDR      r0,|L9.844|
000058  4580              CMP      r8,r0
00005a  d101              BNE      |L9.96|
;;;517    	{
;;;518    		tmp0 = 1;
00005c  2001              MOVS     r0,#1
00005e  9001              STR      r0,[sp,#4]
                  |L9.96|
;;;519    	}
;;;520    
;;;521    	/* Acceptance Filter Memory full - return */
;;;522    	total =((CANAF_FullCAN_cnt+1)>>1)+ CANAF_FullCAN_cnt*3 +((CANAF_std_cnt + 1) >> 1)+  \
000060  48c4              LDR      r0,|L9.884|
000062  8800              LDRH     r0,[r0,#0]  ; CANAF_FullCAN_cnt
000064  eb000140          ADD      r1,r0,r0,LSL #1
000068  48c2              LDR      r0,|L9.884|
00006a  8800              LDRH     r0,[r0,#0]  ; CANAF_FullCAN_cnt
00006c  1c40              ADDS     r0,r0,#1
00006e  eb010160          ADD      r1,r1,r0,ASR #1
000072  48c1              LDR      r0,|L9.888|
000074  8800              LDRH     r0,[r0,#0]  ; CANAF_std_cnt
000076  1c40              ADDS     r0,r0,#1
000078  eb010060          ADD      r0,r1,r0,ASR #1
00007c  49bf              LDR      r1,|L9.892|
00007e  8809              LDRH     r1,[r1,#0]  ; CANAF_gstd_cnt
000080  4408              ADD      r0,r0,r1
000082  49bf              LDR      r1,|L9.896|
000084  8809              LDRH     r1,[r1,#0]  ; CANAF_ext_cnt
000086  4408              ADD      r0,r0,r1
000088  49be              LDR      r1,|L9.900|
00008a  8809              LDRH     r1,[r1,#0]  ; CANAF_gext_cnt
00008c  eb000041          ADD      r0,r0,r1,LSL #1
000090  b200              SXTH     r0,r0
000092  9000              STR      r0,[sp,#0]
;;;523    			CANAF_gstd_cnt + CANAF_ext_cnt + (CANAF_gext_cnt<<1);
;;;524    	if (total >= 512){ //don't have enough space
000094  9800              LDR      r0,[sp,#0]
000096  f5b07f00          CMP      r0,#0x200
00009a  db02              BLT      |L9.162|
;;;525    		return CAN_OBJECTS_FULL_ERROR;
00009c  2002              MOVS     r0,#2
                  |L9.158|
;;;526    	}
;;;527    
;;;528    	/* Setup Acceptance Filter Configuration
;;;529        Acceptance Filter Mode Register = Off */
;;;530    	LPC_CANAF->AFMR = 0x00000001;
;;;531    
;;;532    /*********** Add Explicit Standard Identifier Frame Format entry *********/
;;;533     	if(format == STD_ID_FORMAT)
;;;534     	{
;;;535     		id &= 0x07FF;
;;;536     		id |= (tmp0 << 13); /* Add controller number */
;;;537    		/* Move all remaining sections one place up
;;;538    		if new entry will increase FullCAN list */
;;;539    		if ((CANAF_std_cnt & 0x0001) == 0)
;;;540    		{
;;;541    			cnt1   = ((CANAF_FullCAN_cnt+1)>>1)+((CANAF_std_cnt+1)>>1);
;;;542    			bound1 = total - cnt1;
;;;543    			buf0   = LPC_CANAF_RAM->mask[cnt1];
;;;544    			while(bound1--)
;;;545    			{
;;;546    				cnt1++;
;;;547    				buf1 = LPC_CANAF_RAM->mask[cnt1];
;;;548    				LPC_CANAF_RAM->mask[cnt1] = buf0;
;;;549    				buf0 = buf1;
;;;550    			}
;;;551    		}
;;;552    		if (CANAF_std_cnt == 0)
;;;553    		{
;;;554    			cnt2 = (CANAF_FullCAN_cnt + 1)>>1;
;;;555    			/* For entering first ID */
;;;556    			LPC_CANAF_RAM->mask[cnt2] = 0x0000FFFF | (id << 16);
;;;557    		}
;;;558    		else if (CANAF_std_cnt == 1)
;;;559    		{
;;;560    			cnt2 = (CANAF_FullCAN_cnt + 1)>>1;
;;;561    			/* For entering second ID */
;;;562    			if (((LPC_CANAF_RAM->mask[cnt2] >> 16)& 0xE7FF) > id)
;;;563    			{
;;;564    				LPC_CANAF_RAM->mask[cnt2] = (LPC_CANAF_RAM->mask[cnt2] >> 16) | (id << 16);
;;;565    			}
;;;566    			else
;;;567    			{
;;;568    				LPC_CANAF_RAM->mask[cnt2] = (LPC_CANAF_RAM->mask[cnt2] & 0xFFFF0000) | id;
;;;569    			}
;;;570    		}
;;;571    		else
;;;572    		{
;;;573    			/* Find where to insert new ID */
;;;574    			cnt1 = (CANAF_FullCAN_cnt+1)>>1;
;;;575    			cnt2 = CANAF_std_cnt;
;;;576    			bound1 = ((CANAF_FullCAN_cnt+1)>>1)+((CANAF_std_cnt+1)>>1);
;;;577    			while (cnt1 < bound1)
;;;578    			{
;;;579    				/* Loop through standard existing IDs */
;;;580    				if (((LPC_CANAF_RAM->mask[cnt1] >> 16) & 0xE7FF) > id)
;;;581    				{
;;;582    					cnt2 = cnt1 * 2;
;;;583    					break;
;;;584    				}
;;;585    
;;;586    				if ((LPC_CANAF_RAM->mask[cnt1] & 0x0000E7FF) > id)
;;;587    				{
;;;588    					cnt2 = cnt1 * 2 + 1;
;;;589    					break;
;;;590    				}
;;;591    
;;;592    				cnt1++;
;;;593    			}
;;;594    			/* cnt1 = U32 where to insert new ID */
;;;595    			/* cnt2 = U16 where to insert new ID */
;;;596    
;;;597    			if (cnt1 == bound1)
;;;598    			{
;;;599    				/* Adding ID as last entry */
;;;600    				/* Even number of IDs exists */
;;;601    				if ((CANAF_std_cnt & 0x0001) == 0)
;;;602    				{
;;;603    					LPC_CANAF_RAM->mask[cnt1]  = 0x0000FFFF | (id << 16);
;;;604    				}
;;;605    				/* Odd  number of IDs exists */
;;;606    				else
;;;607    				{
;;;608    					LPC_CANAF_RAM->mask[cnt1]  = (LPC_CANAF_RAM->mask[cnt1] & 0xFFFF0000) | id;
;;;609    				}
;;;610    			}
;;;611    			else
;;;612    			{
;;;613    				buf0 = LPC_CANAF_RAM->mask[cnt1]; /* Remember current entry */
;;;614    				if ((cnt2 & 0x0001) == 0)
;;;615    				{
;;;616    					/* Insert new mask to even address*/
;;;617    					buf1 = (id << 16) | (buf0 >> 16);
;;;618    				}
;;;619    				else
;;;620    				{
;;;621    					/* Insert new mask to odd  address */
;;;622    					buf1 = (buf0 & 0xFFFF0000) | id;
;;;623    				}
;;;624    				LPC_CANAF_RAM->mask[cnt1] = buf1;/* Insert mask */
;;;625    				bound1 = ((CANAF_FullCAN_cnt+1)>>1)+((CANAF_std_cnt+1)>>1)-1;
;;;626    				/* Move all remaining standard mask entries one place up */
;;;627    				while (cnt1 < bound1)
;;;628    				{
;;;629    					cnt1++;
;;;630    					buf1  = LPC_CANAF_RAM->mask[cnt1];
;;;631    					LPC_CANAF_RAM->mask[cnt1] = (buf1 >> 16) | (buf0 << 16);
;;;632    					buf0  = buf1;
;;;633    				}
;;;634    
;;;635    				if ((CANAF_std_cnt & 0x0001) == 0)
;;;636    				{
;;;637    					/* Even number of IDs exists */
;;;638    					LPC_CANAF_RAM->mask[cnt1+1] = (buf0 <<16) |(0x0000FFFF);
;;;639    				}
;;;640    			}
;;;641    		}
;;;642    		CANAF_std_cnt++;
;;;643    		//update address values
;;;644    		LPC_CANAF->SFF_GRP_sa +=0x04 ;
;;;645    		LPC_CANAF->EFF_sa     +=0x04 ;
;;;646    		LPC_CANAF->EFF_GRP_sa +=0x04;
;;;647    		LPC_CANAF->ENDofTable +=0x04;
;;;648     	}
;;;649    
;;;650    /*********** Add Explicit Extended Identifier Frame Format entry *********/
;;;651     	else
;;;652     	{
;;;653     		/* Add controller number */
;;;654     		id |= (tmp0) << 29;
;;;655    
;;;656     		cnt1 = ((CANAF_FullCAN_cnt+1)>>1)+(((CANAF_std_cnt + 1) >> 1) + CANAF_gstd_cnt);
;;;657     		cnt2 = 0;
;;;658     		while (cnt2 < CANAF_ext_cnt)
;;;659     		{
;;;660     			/* Loop through extended existing masks*/
;;;661     			if (LPC_CANAF_RAM->mask[cnt1] > id)
;;;662     			{
;;;663     				break;
;;;664     			}
;;;665     			cnt1++;/* cnt1 = U32 where to insert new mask */
;;;666    			cnt2++;
;;;667     		}
;;;668    
;;;669     		buf0 = LPC_CANAF_RAM->mask[cnt1];  /* Remember current entry */
;;;670     		LPC_CANAF_RAM->mask[cnt1] = id;    /* Insert mask */
;;;671    
;;;672     		CANAF_ext_cnt++;
;;;673    
;;;674     		bound1 = total;
;;;675     		/* Move all remaining extended mask entries one place up*/
;;;676     		while (cnt2 < bound1)
;;;677     		{
;;;678     			cnt1++;
;;;679     			cnt2++;
;;;680     			buf1 = LPC_CANAF_RAM->mask[cnt1];
;;;681     			LPC_CANAF_RAM->mask[cnt1] = buf0;
;;;682     			buf0 = buf1;
;;;683     		}
;;;684     		/* update address values */
;;;685     		LPC_CANAF->EFF_GRP_sa += 4;
;;;686     		LPC_CANAF->ENDofTable += 4;
;;;687     	}
;;;688     	if(CANAF_FullCAN_cnt == 0) //not use FullCAN mode
;;;689     	{
;;;690     		LPC_CANAF->AFMR = 0x00;//not use FullCAN mode
;;;691     	}
;;;692     	else
;;;693     	{
;;;694     		LPC_CANAF->AFMR = 0x04;
;;;695     	}
;;;696    
;;;697     	return CAN_OK;
;;;698    }
00009e  e8bd9ffc          POP      {r2-r12,pc}
                  |L9.162|
0000a2  2001              MOVS     r0,#1                 ;530
0000a4  49b8              LDR      r1,|L9.904|
0000a6  6008              STR      r0,[r1,#0]            ;530
0000a8  f1bb0f00          CMP      r11,#0                ;533
0000ac  d174              BNE      |L9.408|
0000ae  f3c5050a          UBFX     r5,r5,#0,#11          ;535
0000b2  9801              LDR      r0,[sp,#4]            ;536
0000b4  ea453540          ORR      r5,r5,r0,LSL #13      ;536
0000b8  48af              LDR      r0,|L9.888|
0000ba  7800              LDRB     r0,[r0,#0]            ;539  ; CANAF_std_cnt
0000bc  f0000001          AND      r0,r0,#1              ;539
0000c0  bb00              CBNZ     r0,|L9.260|
0000c2  48ac              LDR      r0,|L9.884|
0000c4  8800              LDRH     r0,[r0,#0]            ;541  ; CANAF_FullCAN_cnt
0000c6  1c40              ADDS     r0,r0,#1              ;541
0000c8  1041              ASRS     r1,r0,#1              ;541
0000ca  48ab              LDR      r0,|L9.888|
0000cc  8800              LDRH     r0,[r0,#0]            ;541  ; CANAF_std_cnt
0000ce  1c40              ADDS     r0,r0,#1              ;541
0000d0  eb010060          ADD      r0,r1,r0,ASR #1       ;541
0000d4  b204              SXTH     r4,r0                 ;541
0000d6  9800              LDR      r0,[sp,#0]            ;542
0000d8  1b00              SUBS     r0,r0,r4              ;542
0000da  fa0ffa80          SXTH     r10,r0                ;542
0000de  49ab              LDR      r1,|L9.908|
0000e0  f8517024          LDR      r7,[r1,r4,LSL #2]     ;543
0000e4  e007              B        |L9.246|
                  |L9.230|
0000e6  1c60              ADDS     r0,r4,#1              ;546
0000e8  b204              SXTH     r4,r0                 ;546
0000ea  49a8              LDR      r1,|L9.908|
0000ec  f8519024          LDR      r9,[r1,r4,LSL #2]     ;547
0000f0  f8417024          STR      r7,[r1,r4,LSL #2]     ;548
0000f4  464f              MOV      r7,r9                 ;549
                  |L9.246|
0000f6  f1ba0000          SUBS     r0,r10,#0             ;544
0000fa  f1aa0101          SUB      r1,r10,#1             ;544
0000fe  fa0ffa81          SXTH     r10,r1                ;544
000102  d1f0              BNE      |L9.230|
                  |L9.260|
000104  489c              LDR      r0,|L9.888|
000106  8800              LDRH     r0,[r0,#0]            ;552  ; CANAF_std_cnt
000108  b960              CBNZ     r0,|L9.292|
00010a  489a              LDR      r0,|L9.884|
00010c  8800              LDRH     r0,[r0,#0]            ;554  ; CANAF_FullCAN_cnt
00010e  1c40              ADDS     r0,r0,#1              ;554
000110  1040              ASRS     r0,r0,#1              ;554
000112  b206              SXTH     r6,r0                 ;554
000114  f64f70ff          MOV      r0,#0xffff            ;556
000118  ea404005          ORR      r0,r0,r5,LSL #16      ;556
00011c  4a9b              LDR      r2,|L9.908|
00011e  f8420026          STR      r0,[r2,r6,LSL #2]     ;556
000122  e0ab              B        |L9.636|
                  |L9.292|
000124  4894              LDR      r0,|L9.888|
000126  8800              LDRH     r0,[r0,#0]            ;558  ; CANAF_std_cnt
000128  2801              CMP      r0,#1                 ;558
00012a  d121              BNE      |L9.368|
00012c  4891              LDR      r0,|L9.884|
00012e  8800              LDRH     r0,[r0,#0]            ;560  ; CANAF_FullCAN_cnt
000130  1c40              ADDS     r0,r0,#1              ;560
000132  1040              ASRS     r0,r0,#1              ;560
000134  b206              SXTH     r6,r0                 ;560
000136  4995              LDR      r1,|L9.908|
000138  f8510026          LDR      r0,[r1,r6,LSL #2]     ;562
00013c  f24e71ff          MOV      r1,#0xe7ff            ;562
000140  ea014010          AND      r0,r1,r0,LSR #16      ;562
000144  42a8              CMP      r0,r5                 ;562
000146  d909              BLS      |L9.348|
000148  4990              LDR      r1,|L9.908|
00014a  f8510026          LDR      r0,[r1,r6,LSL #2]     ;564
00014e  0c00              LSRS     r0,r0,#16             ;564
000150  ea404005          ORR      r0,r0,r5,LSL #16      ;564
000154  460a              MOV      r2,r1                 ;564
000156  f8420026          STR      r0,[r2,r6,LSL #2]     ;564
00015a  e08f              B        |L9.636|
                  |L9.348|
00015c  498b              LDR      r1,|L9.908|
00015e  f8510026          LDR      r0,[r1,r6,LSL #2]     ;568
000162  f36f000f          BFC      r0,#0,#16             ;568
000166  4328              ORRS     r0,r0,r5              ;568
000168  460a              MOV      r2,r1                 ;568
00016a  f8420026          STR      r0,[r2,r6,LSL #2]     ;568
00016e  e085              B        |L9.636|
                  |L9.368|
000170  4880              LDR      r0,|L9.884|
000172  8800              LDRH     r0,[r0,#0]            ;574  ; CANAF_FullCAN_cnt
000174  1c40              ADDS     r0,r0,#1              ;574
000176  1040              ASRS     r0,r0,#1              ;574
000178  b204              SXTH     r4,r0                 ;574
00017a  487f              LDR      r0,|L9.888|
00017c  8800              LDRH     r0,[r0,#0]            ;575  ; CANAF_std_cnt
00017e  b206              SXTH     r6,r0                 ;575
000180  487c              LDR      r0,|L9.884|
000182  8800              LDRH     r0,[r0,#0]            ;576  ; CANAF_FullCAN_cnt
000184  1c40              ADDS     r0,r0,#1              ;576
000186  1041              ASRS     r1,r0,#1              ;576
000188  487b              LDR      r0,|L9.888|
00018a  8800              LDRH     r0,[r0,#0]            ;576  ; CANAF_std_cnt
00018c  1c40              ADDS     r0,r0,#1              ;576
00018e  eb010060          ADD      r0,r1,r0,ASR #1       ;576
000192  fa0ffa80          SXTH     r10,r0                ;576
000196  e01b              B        |L9.464|
                  |L9.408|
000198  e087              B        |L9.682|
                  |L9.410|
00019a  497c              LDR      r1,|L9.908|
00019c  f8510024          LDR      r0,[r1,r4,LSL #2]     ;580
0001a0  f24e71ff          MOV      r1,#0xe7ff            ;580
0001a4  ea014010          AND      r0,r1,r0,LSR #16      ;580
0001a8  42a8              CMP      r0,r5                 ;580
0001aa  d902              BLS      |L9.434|
0001ac  0060              LSLS     r0,r4,#1              ;582
0001ae  b206              SXTH     r6,r0                 ;582
0001b0  e010              B        |L9.468|
                  |L9.434|
0001b2  4976              LDR      r1,|L9.908|
0001b4  f8510024          LDR      r0,[r1,r4,LSL #2]     ;586
0001b8  f24e71ff          MOV      r1,#0xe7ff            ;586
0001bc  4008              ANDS     r0,r0,r1              ;586
0001be  42a8              CMP      r0,r5                 ;586
0001c0  d904              BLS      |L9.460|
0001c2  2001              MOVS     r0,#1                 ;588
0001c4  eb000044          ADD      r0,r0,r4,LSL #1       ;588
0001c8  b206              SXTH     r6,r0                 ;588
0001ca  e003              B        |L9.468|
                  |L9.460|
0001cc  1c60              ADDS     r0,r4,#1              ;592
0001ce  b204              SXTH     r4,r0                 ;592
                  |L9.464|
0001d0  4554              CMP      r4,r10                ;577
0001d2  dbe2              BLT      |L9.410|
                  |L9.468|
0001d4  bf00              NOP                            ;583
0001d6  4554              CMP      r4,r10                ;597
0001d8  d116              BNE      |L9.520|
0001da  4867              LDR      r0,|L9.888|
0001dc  7800              LDRB     r0,[r0,#0]            ;601  ; CANAF_std_cnt
0001de  f0000001          AND      r0,r0,#1              ;601
0001e2  b938              CBNZ     r0,|L9.500|
0001e4  f64f70ff          MOV      r0,#0xffff            ;603
0001e8  ea404005          ORR      r0,r0,r5,LSL #16      ;603
0001ec  4a67              LDR      r2,|L9.908|
0001ee  f8420024          STR      r0,[r2,r4,LSL #2]     ;603
0001f2  e043              B        |L9.636|
                  |L9.500|
0001f4  4965              LDR      r1,|L9.908|
0001f6  f8510024          LDR      r0,[r1,r4,LSL #2]     ;608
0001fa  f36f000f          BFC      r0,#0,#16             ;608
0001fe  4328              ORRS     r0,r0,r5              ;608
000200  460a              MOV      r2,r1                 ;608
000202  f8420024          STR      r0,[r2,r4,LSL #2]     ;608
000206  e039              B        |L9.636|
                  |L9.520|
000208  4960              LDR      r1,|L9.908|
00020a  f8517024          LDR      r7,[r1,r4,LSL #2]     ;613
00020e  f0060001          AND      r0,r6,#1              ;614
000212  b918              CBNZ     r0,|L9.540|
000214  0428              LSLS     r0,r5,#16             ;617
000216  ea404917          ORR      r9,r0,r7,LSR #16      ;617
00021a  e003              B        |L9.548|
                  |L9.540|
00021c  0c38              LSRS     r0,r7,#16             ;622
00021e  0400              LSLS     r0,r0,#16             ;622
000220  ea400905          ORR      r9,r0,r5              ;622
                  |L9.548|
000224  4959              LDR      r1,|L9.908|
000226  f8419024          STR      r9,[r1,r4,LSL #2]     ;624
00022a  4852              LDR      r0,|L9.884|
00022c  8800              LDRH     r0,[r0,#0]            ;625  ; CANAF_FullCAN_cnt
00022e  1c40              ADDS     r0,r0,#1              ;625
000230  1041              ASRS     r1,r0,#1              ;625
000232  4851              LDR      r0,|L9.888|
000234  8800              LDRH     r0,[r0,#0]            ;625  ; CANAF_std_cnt
000236  1c40              ADDS     r0,r0,#1              ;625
000238  eb010060          ADD      r0,r1,r0,ASR #1       ;625
00023c  1e40              SUBS     r0,r0,#1              ;625
00023e  fa0ffa80          SXTH     r10,r0                ;625
000242  e00c              B        |L9.606|
                  |L9.580|
000244  1c60              ADDS     r0,r4,#1              ;629
000246  b204              SXTH     r4,r0                 ;629
000248  4950              LDR      r1,|L9.908|
00024a  f8519024          LDR      r9,[r1,r4,LSL #2]     ;630
00024e  ea4f4019          LSR      r0,r9,#16             ;631
000252  ea404007          ORR      r0,r0,r7,LSL #16      ;631
000256  460a              MOV      r2,r1                 ;631
000258  f8420024          STR      r0,[r2,r4,LSL #2]     ;631
00025c  464f              MOV      r7,r9                 ;632
                  |L9.606|
00025e  4554              CMP      r4,r10                ;627
000260  dbf0              BLT      |L9.580|
000262  4845              LDR      r0,|L9.888|
000264  7800              LDRB     r0,[r0,#0]            ;635  ; CANAF_std_cnt
000266  f0000001          AND      r0,r0,#1              ;635
00026a  b938              CBNZ     r0,|L9.636|
00026c  f64f70ff          MOV      r0,#0xffff            ;638
000270  eb004107          ADD      r1,r0,r7,LSL #16      ;638
000274  1c60              ADDS     r0,r4,#1              ;638
000276  4a45              LDR      r2,|L9.908|
000278  f8421020          STR      r1,[r2,r0,LSL #2]     ;638
                  |L9.636|
00027c  483e              LDR      r0,|L9.888|
00027e  8800              LDRH     r0,[r0,#0]            ;642  ; CANAF_std_cnt
000280  1c40              ADDS     r0,r0,#1              ;642
000282  493d              LDR      r1,|L9.888|
000284  8008              STRH     r0,[r1,#0]            ;642
000286  4840              LDR      r0,|L9.904|
000288  6880              LDR      r0,[r0,#8]            ;644
00028a  1d00              ADDS     r0,r0,#4              ;644
00028c  493e              LDR      r1,|L9.904|
00028e  6088              STR      r0,[r1,#8]            ;644
000290  4608              MOV      r0,r1                 ;645
000292  68c0              LDR      r0,[r0,#0xc]          ;645
000294  1d00              ADDS     r0,r0,#4              ;645
000296  60c8              STR      r0,[r1,#0xc]          ;645
000298  4608              MOV      r0,r1                 ;646
00029a  6900              LDR      r0,[r0,#0x10]         ;646
00029c  1d00              ADDS     r0,r0,#4              ;646
00029e  6108              STR      r0,[r1,#0x10]         ;646
0002a0  4608              MOV      r0,r1                 ;647
0002a2  6940              LDR      r0,[r0,#0x14]         ;647
0002a4  1d00              ADDS     r0,r0,#4              ;647
0002a6  6148              STR      r0,[r1,#0x14]         ;647
0002a8  e042              B        |L9.816|
                  |L9.682|
0002aa  9801              LDR      r0,[sp,#4]            ;654
0002ac  ea457540          ORR      r5,r5,r0,LSL #29      ;654
0002b0  4832              LDR      r0,|L9.892|
0002b2  8801              LDRH     r1,[r0,#0]            ;656  ; CANAF_gstd_cnt
0002b4  4830              LDR      r0,|L9.888|
0002b6  8800              LDRH     r0,[r0,#0]            ;656  ; CANAF_std_cnt
0002b8  1c40              ADDS     r0,r0,#1              ;656
0002ba  eb010160          ADD      r1,r1,r0,ASR #1       ;656
0002be  482d              LDR      r0,|L9.884|
0002c0  8800              LDRH     r0,[r0,#0]            ;656  ; CANAF_FullCAN_cnt
0002c2  1c40              ADDS     r0,r0,#1              ;656
0002c4  eb010060          ADD      r0,r1,r0,ASR #1       ;656
0002c8  b204              SXTH     r4,r0                 ;656
0002ca  2600              MOVS     r6,#0                 ;657
0002cc  e009              B        |L9.738|
                  |L9.718|
0002ce  492f              LDR      r1,|L9.908|
0002d0  f8510024          LDR      r0,[r1,r4,LSL #2]     ;661
0002d4  42a8              CMP      r0,r5                 ;661
0002d6  d900              BLS      |L9.730|
0002d8  e007              B        |L9.746|
                  |L9.730|
0002da  1c60              ADDS     r0,r4,#1              ;665
0002dc  b204              SXTH     r4,r0                 ;665
0002de  1c70              ADDS     r0,r6,#1              ;666
0002e0  b206              SXTH     r6,r0                 ;666
                  |L9.738|
0002e2  4827              LDR      r0,|L9.896|
0002e4  8800              LDRH     r0,[r0,#0]            ;658  ; CANAF_ext_cnt
0002e6  4286              CMP      r6,r0                 ;658
0002e8  dbf1              BLT      |L9.718|
                  |L9.746|
0002ea  bf00              NOP                            ;663
0002ec  4927              LDR      r1,|L9.908|
0002ee  f8517024          LDR      r7,[r1,r4,LSL #2]     ;669
0002f2  f8415024          STR      r5,[r1,r4,LSL #2]     ;670
0002f6  4822              LDR      r0,|L9.896|
0002f8  8800              LDRH     r0,[r0,#0]            ;672  ; CANAF_ext_cnt
0002fa  1c40              ADDS     r0,r0,#1              ;672
0002fc  4920              LDR      r1,|L9.896|
0002fe  8008              STRH     r0,[r1,#0]            ;672
000300  f8dda000          LDR      r10,[sp,#0]           ;674
000304  e009              B        |L9.794|
                  |L9.774|
000306  1c60              ADDS     r0,r4,#1              ;678
000308  b204              SXTH     r4,r0                 ;678
00030a  1c70              ADDS     r0,r6,#1              ;679
00030c  b206              SXTH     r6,r0                 ;679
00030e  491f              LDR      r1,|L9.908|
000310  f8519024          LDR      r9,[r1,r4,LSL #2]     ;680
000314  f8417024          STR      r7,[r1,r4,LSL #2]     ;681
000318  464f              MOV      r7,r9                 ;682
                  |L9.794|
00031a  4556              CMP      r6,r10                ;676
00031c  dbf3              BLT      |L9.774|
00031e  481a              LDR      r0,|L9.904|
000320  6900              LDR      r0,[r0,#0x10]         ;685
000322  1d00              ADDS     r0,r0,#4              ;685
000324  4918              LDR      r1,|L9.904|
000326  6108              STR      r0,[r1,#0x10]         ;685
000328  4608              MOV      r0,r1                 ;686
00032a  6940              LDR      r0,[r0,#0x14]         ;686
00032c  1d00              ADDS     r0,r0,#4              ;686
00032e  6148              STR      r0,[r1,#0x14]         ;686
                  |L9.816|
000330  4810              LDR      r0,|L9.884|
000332  8800              LDRH     r0,[r0,#0]            ;688  ; CANAF_FullCAN_cnt
000334  b918              CBNZ     r0,|L9.830|
000336  2000              MOVS     r0,#0                 ;690
000338  4913              LDR      r1,|L9.904|
00033a  6008              STR      r0,[r1,#0]            ;690
00033c  e002              B        |L9.836|
                  |L9.830|
00033e  2004              MOVS     r0,#4                 ;694
000340  4911              LDR      r1,|L9.904|
000342  6008              STR      r0,[r1,#0]            ;694
                  |L9.836|
000344  2001              MOVS     r0,#1                 ;697
000346  e6aa              B        |L9.158|
;;;699    
                          ENDP

                  |L9.840|
                          DCD      0x40044000
                  |L9.844|
                          DCD      0x40048000
                  |L9.848|
000350  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
000354  44726976
000358  6572735c
00035c  736f7572
000360  63655c6c
000364  70633137
000368  78785f63
00036c  616e2e63
000370  00      
000371  00                DCB      0
000372  00                DCB      0
000373  00                DCB      0
                  |L9.884|
                          DCD      CANAF_FullCAN_cnt
                  |L9.888|
                          DCD      CANAF_std_cnt
                  |L9.892|
                          DCD      CANAF_gstd_cnt
                  |L9.896|
                          DCD      CANAF_ext_cnt
                  |L9.900|
                          DCD      CANAF_gext_cnt
                  |L9.904|
                          DCD      0x4003c000
                  |L9.908|
                          DCD      0x40038000

                          AREA ||i.CAN_LoadFullCANEntry||, CODE, READONLY, ALIGN=2

                  CAN_LoadFullCANEntry PROC
;;;710     *********************************************************************/
;;;711    CAN_ERROR CAN_LoadFullCANEntry (LPC_CAN_TypeDef* CANx, uint16_t id)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;712    {
000004  b085              SUB      sp,sp,#0x14
000006  4606              MOV      r6,r0
000008  460d              MOV      r5,r1
;;;713    	uint32_t ctrl0 = 0;
00000a  2000              MOVS     r0,#0
00000c  9004              STR      r0,[sp,#0x10]
;;;714    	uint32_t buf0=0, buf1=0, buf2=0;
00000e  2700              MOVS     r7,#0
000010  4680              MOV      r8,r0
000012  9003              STR      r0,[sp,#0xc]
;;;715    	uint32_t tmp0=0, tmp1=0, tmp2=0;
000014  9002              STR      r0,[sp,#8]
000016  9001              STR      r0,[sp,#4]
000018  9000              STR      r0,[sp,#0]
;;;716    	int16_t cnt1=0, cnt2=0, bound1=0, total=0;
00001a  2400              MOVS     r4,#0
00001c  4683              MOV      r11,r0
00001e  4681              MOV      r9,r0
000020  4682              MOV      r10,r0
;;;717    
;;;718    	CHECK_PARAM(PARAM_CANx(CANx));
000022  48ba              LDR      r0,|L10.780|
000024  4286              CMP      r6,r0
000026  d002              BEQ      |L10.46|
000028  48b9              LDR      r0,|L10.784|
00002a  4286              CMP      r6,r0
00002c  d100              BNE      |L10.48|
                  |L10.46|
00002e  e004              B        |L10.58|
                  |L10.48|
000030  f24021ce          MOV      r1,#0x2ce
000034  a0b7              ADR      r0,|L10.788|
000036  f7fffffe          BL       check_failed
                  |L10.58|
;;;719    
;;;720    	if (CANx == LPC_CAN1)
00003a  48b4              LDR      r0,|L10.780|
00003c  4286              CMP      r6,r0
00003e  d102              BNE      |L10.70|
;;;721    	{
;;;722    		ctrl0 = 0;
000040  2000              MOVS     r0,#0
000042  9004              STR      r0,[sp,#0x10]
000044  e004              B        |L10.80|
                  |L10.70|
;;;723    	}
;;;724    	else if (CANx == LPC_CAN2)
000046  48b2              LDR      r0,|L10.784|
000048  4286              CMP      r6,r0
00004a  d101              BNE      |L10.80|
;;;725    	{
;;;726    		ctrl0 = 1;
00004c  2001              MOVS     r0,#1
00004e  9004              STR      r0,[sp,#0x10]
                  |L10.80|
;;;727    	}
;;;728    
;;;729    	/* Acceptance Filter Memory full - return */
;;;730    	total =((CANAF_FullCAN_cnt+1)>>1)+ CANAF_FullCAN_cnt*3 +((CANAF_std_cnt + 1) >> 1)+  \
000050  48b9              LDR      r0,|L10.824|
000052  8800              LDRH     r0,[r0,#0]  ; CANAF_FullCAN_cnt
000054  eb000140          ADD      r1,r0,r0,LSL #1
000058  48b7              LDR      r0,|L10.824|
00005a  8800              LDRH     r0,[r0,#0]  ; CANAF_FullCAN_cnt
00005c  1c40              ADDS     r0,r0,#1
00005e  eb010160          ADD      r1,r1,r0,ASR #1
000062  48b6              LDR      r0,|L10.828|
000064  8800              LDRH     r0,[r0,#0]  ; CANAF_std_cnt
000066  1c40              ADDS     r0,r0,#1
000068  eb010060          ADD      r0,r1,r0,ASR #1
00006c  49b4              LDR      r1,|L10.832|
00006e  8809              LDRH     r1,[r1,#0]  ; CANAF_gstd_cnt
000070  4408              ADD      r0,r0,r1
000072  49b4              LDR      r1,|L10.836|
000074  8809              LDRH     r1,[r1,#0]  ; CANAF_ext_cnt
000076  4408              ADD      r0,r0,r1
000078  49b3              LDR      r1,|L10.840|
00007a  8809              LDRH     r1,[r1,#0]  ; CANAF_gext_cnt
00007c  eb000041          ADD      r0,r0,r1,LSL #1
000080  fa0ffa80          SXTH     r10,r0
;;;731    			CANAF_gstd_cnt + CANAF_ext_cnt + (CANAF_gext_cnt<<1);
;;;732    	//don't have enough space for this fullCAN Entry and its Object(3*32 bytes)
;;;733    	if ((total >=508)||(CANAF_FullCAN_cnt>=64)){
000084  f5ba7ffe          CMP      r10,#0x1fc
000088  da03              BGE      |L10.146|
00008a  48ab              LDR      r0,|L10.824|
00008c  8800              LDRH     r0,[r0,#0]  ; CANAF_FullCAN_cnt
00008e  2840              CMP      r0,#0x40
000090  db03              BLT      |L10.154|
                  |L10.146|
;;;734    		return CAN_OBJECTS_FULL_ERROR;
000092  2002              MOVS     r0,#2
                  |L10.148|
;;;735    	}
;;;736    	/* Setup Acceptance Filter Configuration
;;;737        Acceptance Filter Mode Register = Off */
;;;738    	LPC_CANAF->AFMR = 0x00000001;
;;;739    
;;;740    	/* Add mask for standard identifiers   */
;;;741    	id &= 0x07FF;
;;;742    	id |= (ctrl0 << 13) | (1 << 11); /* Add controller number */
;;;743    //	total = ((CANAF_std_cnt + 1) >> 1)+ CANAF_gstd_cnt + CANAF_ext_cnt + (CANAF_gext_cnt<<1);
;;;744    	/* Move all remaining sections one place up
;;;745    	if new entry will increase FullCAN list */
;;;746    	if (((CANAF_FullCAN_cnt & 0x0001) == 0)&&(total!=0))
;;;747    	{
;;;748    		//then remove remaining section
;;;749    		cnt1   = (CANAF_FullCAN_cnt >> 1);
;;;750    		bound1 = total;
;;;751    		buf0   = LPC_CANAF_RAM->mask[cnt1];
;;;752    
;;;753    		while (bound1--)
;;;754    		{
;;;755    			cnt1++;
;;;756    			buf1 = LPC_CANAF_RAM->mask[cnt1];
;;;757    			LPC_CANAF_RAM->mask[cnt1] = buf0;
;;;758    			buf0 = buf1;
;;;759    		}
;;;760    	}
;;;761    	if (CANAF_FullCAN_cnt == 0)
;;;762    	{
;;;763    		/* For entering first ID */
;;;764    		LPC_CANAF_RAM->mask[0] = 0x0000FFFF | (id << 16);
;;;765    	}
;;;766    	else if (CANAF_FullCAN_cnt == 1)
;;;767    	{
;;;768    		/* For entering second ID */
;;;769    		if (((LPC_CANAF_RAM->mask[0] >> 16)& 0xE7FF) > id)
;;;770    		{
;;;771    			LPC_CANAF_RAM->mask[0] = (LPC_CANAF_RAM->mask[0] >> 16) | (id << 16);
;;;772    		}
;;;773    		else
;;;774    		{
;;;775    			LPC_CANAF_RAM->mask[0] = (LPC_CANAF_RAM->mask[0] & 0xFFFF0000) | id;
;;;776    		}
;;;777    	}
;;;778    	else
;;;779    	{
;;;780    		/* Find where to insert new ID */
;;;781    		cnt1 = 0;
;;;782    		cnt2 = CANAF_FullCAN_cnt;
;;;783    		bound1 = (CANAF_FullCAN_cnt - 1) >> 1;
;;;784    		while (cnt1 <= bound1)
;;;785    		{
;;;786    			/* Loop through standard existing IDs */
;;;787    			if (((LPC_CANAF_RAM->mask[cnt1] >> 16) & 0xE7FF) > (id & 0xE7FF))
;;;788    			{
;;;789    				cnt2 = cnt1 * 2;
;;;790    				break;
;;;791    			}
;;;792    
;;;793    			if ((LPC_CANAF_RAM->mask[cnt1] & 0x0000E7FF) > (id & 0xE7FF))
;;;794    			{
;;;795    				cnt2 = cnt1 * 2 + 1;
;;;796    				break;
;;;797    			}
;;;798    
;;;799    			cnt1++;
;;;800    		}
;;;801    		/* cnt1 = U32 where to insert new ID */
;;;802    		/* cnt2 = U16 where to insert new ID */
;;;803    
;;;804    		if (cnt1 > bound1)
;;;805    		{
;;;806    			/* Adding ID as last entry */
;;;807    			/* Even number of IDs exists */
;;;808    			if ((CANAF_FullCAN_cnt & 0x0001) == 0)
;;;809    			{
;;;810    				LPC_CANAF_RAM->mask[cnt1]  = 0x0000FFFF | (id << 16);
;;;811    			}
;;;812    			/* Odd  number of IDs exists */
;;;813    			else
;;;814    			{
;;;815    				LPC_CANAF_RAM->mask[cnt1]  = (LPC_CANAF_RAM->mask[cnt1] & 0xFFFF0000) | id;
;;;816    			}
;;;817    		}
;;;818    		else
;;;819    		{
;;;820    			buf0 = LPC_CANAF_RAM->mask[cnt1]; /* Remember current entry */
;;;821    			if ((cnt2 & 0x0001) == 0)
;;;822    			{
;;;823    				/* Insert new mask to even address*/
;;;824    				buf1 = (id << 16) | (buf0 >> 16);
;;;825    			}
;;;826    			else
;;;827    			{
;;;828    				/* Insert new mask to odd  address */
;;;829    				buf1 = (buf0 & 0xFFFF0000) | id;
;;;830    			}
;;;831    			LPC_CANAF_RAM->mask[cnt1] = buf1;/* Insert mask */
;;;832    			bound1 = CANAF_FullCAN_cnt >> 1;
;;;833    			/* Move all remaining standard mask entries one place up */
;;;834    			while (cnt1 < bound1)
;;;835    			{
;;;836    				cnt1++;
;;;837    				buf1  = LPC_CANAF_RAM->mask[cnt1];
;;;838    				LPC_CANAF_RAM->mask[cnt1] = (buf1 >> 16) | (buf0 << 16);
;;;839    				buf0  = buf1;
;;;840    			}
;;;841    
;;;842    			if ((CANAF_FullCAN_cnt & 0x0001) == 0)
;;;843    			{
;;;844    				/* Even number of IDs exists */
;;;845    				LPC_CANAF_RAM->mask[cnt1] = (LPC_CANAF_RAM->mask[cnt1] & 0xFFFF0000)
;;;846    											| (0x0000FFFF);
;;;847    			}
;;;848    		}
;;;849    	}
;;;850    	//restruct FulCAN Object Section
;;;851    	bound1 = CANAF_FullCAN_cnt - cnt2;
;;;852    	cnt1 = total - (CANAF_FullCAN_cnt)*3 + cnt2*3 + 1;
;;;853    	buf0 = LPC_CANAF_RAM->mask[cnt1];
;;;854    	buf1 = LPC_CANAF_RAM->mask[cnt1+1];
;;;855    	buf2 = LPC_CANAF_RAM->mask[cnt1+2];
;;;856    	LPC_CANAF_RAM->mask[cnt1]=LPC_CANAF_RAM->mask[cnt1+1]= LPC_CANAF_RAM->mask[cnt1+2]=0x00;
;;;857    	cnt1+=3;
;;;858    	while(bound1--)
;;;859    	{
;;;860    		tmp0 = LPC_CANAF_RAM->mask[cnt1];
;;;861    		tmp1 = LPC_CANAF_RAM->mask[cnt1+1];
;;;862    		tmp2 = LPC_CANAF_RAM->mask[cnt1+2];
;;;863    		LPC_CANAF_RAM->mask[cnt1]= buf0;
;;;864    		LPC_CANAF_RAM->mask[cnt1+1]= buf1;
;;;865    		LPC_CANAF_RAM->mask[cnt1+2]= buf2;
;;;866    		buf0 = tmp0;
;;;867    		buf1 = tmp1;
;;;868    		buf2 = tmp2;
;;;869    		cnt1+=3;
;;;870    	}
;;;871    	CANAF_FullCAN_cnt++;
;;;872    	//update address values
;;;873    	LPC_CANAF->SFF_sa 	  +=0x04;
;;;874    	LPC_CANAF->SFF_GRP_sa +=0x04 ;
;;;875    	LPC_CANAF->EFF_sa     +=0x04 ;
;;;876    	LPC_CANAF->EFF_GRP_sa +=0x04;
;;;877    	LPC_CANAF->ENDofTable +=0x04;
;;;878    
;;;879    	LPC_CANAF->AFMR = 0x04;
;;;880     	return CAN_OK;
;;;881    }
000094  b005              ADD      sp,sp,#0x14
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.154|
00009a  2001              MOVS     r0,#1                 ;738
00009c  49ab              LDR      r1,|L10.844|
00009e  6008              STR      r0,[r1,#0]            ;738
0000a0  f3c5050a          UBFX     r5,r5,#0,#11          ;741
0000a4  14c9              ASRS     r1,r1,#19             ;742
0000a6  9804              LDR      r0,[sp,#0x10]         ;742
0000a8  ea413040          ORR      r0,r1,r0,LSL #13      ;742
0000ac  4328              ORRS     r0,r0,r5              ;742
0000ae  b285              UXTH     r5,r0                 ;742
0000b0  48a1              LDR      r0,|L10.824|
0000b2  7800              LDRB     r0,[r0,#0]            ;746  ; CANAF_FullCAN_cnt
0000b4  f0000001          AND      r0,r0,#1              ;746
0000b8  b9c8              CBNZ     r0,|L10.238|
0000ba  f1ba0f00          CMP      r10,#0                ;746
0000be  d016              BEQ      |L10.238|
0000c0  489d              LDR      r0,|L10.824|
0000c2  8800              LDRH     r0,[r0,#0]            ;749  ; CANAF_FullCAN_cnt
0000c4  1044              ASRS     r4,r0,#1              ;749
0000c6  46d1              MOV      r9,r10                ;750
0000c8  49a1              LDR      r1,|L10.848|
0000ca  f8517024          LDR      r7,[r1,r4,LSL #2]     ;751
0000ce  e007              B        |L10.224|
                  |L10.208|
0000d0  1c60              ADDS     r0,r4,#1              ;755
0000d2  b204              SXTH     r4,r0                 ;755
0000d4  499e              LDR      r1,|L10.848|
0000d6  f8518024          LDR      r8,[r1,r4,LSL #2]     ;756
0000da  f8417024          STR      r7,[r1,r4,LSL #2]     ;757
0000de  4647              MOV      r7,r8                 ;758
                  |L10.224|
0000e0  f1b90000          SUBS     r0,r9,#0              ;753
0000e4  f1a90101          SUB      r1,r9,#1              ;753
0000e8  fa0ff981          SXTH     r9,r1                 ;753
0000ec  d1f0              BNE      |L10.208|
                  |L10.238|
0000ee  4892              LDR      r0,|L10.824|
0000f0  8800              LDRH     r0,[r0,#0]            ;761  ; CANAF_FullCAN_cnt
0000f2  b930              CBNZ     r0,|L10.258|
0000f4  f64f70ff          MOV      r0,#0xffff            ;764
0000f8  ea404005          ORR      r0,r0,r5,LSL #16      ;764
0000fc  4994              LDR      r1,|L10.848|
0000fe  6008              STR      r0,[r1,#0]            ;764
000100  e099              B        |L10.566|
                  |L10.258|
000102  488d              LDR      r0,|L10.824|
000104  8800              LDRH     r0,[r0,#0]            ;766  ; CANAF_FullCAN_cnt
000106  2801              CMP      r0,#1                 ;766
000108  d117              BNE      |L10.314|
00010a  4891              LDR      r0,|L10.848|
00010c  6800              LDR      r0,[r0,#0]            ;769
00010e  f24e71ff          MOV      r1,#0xe7ff            ;769
000112  ea014010          AND      r0,r1,r0,LSR #16      ;769
000116  42a8              CMP      r0,r5                 ;769
000118  d907              BLS      |L10.298|
00011a  488d              LDR      r0,|L10.848|
00011c  6800              LDR      r0,[r0,#0]            ;771
00011e  0c00              LSRS     r0,r0,#16             ;771
000120  ea404005          ORR      r0,r0,r5,LSL #16      ;771
000124  498a              LDR      r1,|L10.848|
000126  6008              STR      r0,[r1,#0]            ;771
000128  e085              B        |L10.566|
                  |L10.298|
00012a  4889              LDR      r0,|L10.848|
00012c  6800              LDR      r0,[r0,#0]            ;775
00012e  f36f000f          BFC      r0,#0,#16             ;775
000132  4328              ORRS     r0,r0,r5              ;775
000134  4986              LDR      r1,|L10.848|
000136  6008              STR      r0,[r1,#0]            ;775
000138  e07d              B        |L10.566|
                  |L10.314|
00013a  2400              MOVS     r4,#0                 ;781
00013c  487e              LDR      r0,|L10.824|
00013e  8800              LDRH     r0,[r0,#0]            ;782  ; CANAF_FullCAN_cnt
000140  fa0ffb80          SXTH     r11,r0                ;782
000144  487c              LDR      r0,|L10.824|
000146  8800              LDRH     r0,[r0,#0]            ;783  ; CANAF_FullCAN_cnt
000148  1e40              SUBS     r0,r0,#1              ;783
00014a  1040              ASRS     r0,r0,#1              ;783
00014c  fa0ff980          SXTH     r9,r0                 ;783
000150  e020              B        |L10.404|
                  |L10.338|
000152  497f              LDR      r1,|L10.848|
000154  f8510024          LDR      r0,[r1,r4,LSL #2]     ;787
000158  f24e71ff          MOV      r1,#0xe7ff            ;787
00015c  ea014110          AND      r1,r1,r0,LSR #16      ;787
000160  f24e70ff          MOV      r0,#0xe7ff            ;787
000164  4028              ANDS     r0,r0,r5              ;787
000166  4281              CMP      r1,r0                 ;787
000168  d903              BLS      |L10.370|
00016a  0060              LSLS     r0,r4,#1              ;789
00016c  fa0ffb80          SXTH     r11,r0                ;789
000170  e012              B        |L10.408|
                  |L10.370|
000172  4977              LDR      r1,|L10.848|
000174  f8510024          LDR      r0,[r1,r4,LSL #2]     ;793
000178  f24e71ff          MOV      r1,#0xe7ff            ;793
00017c  4008              ANDS     r0,r0,r1              ;793
00017e  4029              ANDS     r1,r1,r5              ;793
000180  4288              CMP      r0,r1                 ;793
000182  d905              BLS      |L10.400|
000184  2001              MOVS     r0,#1                 ;795
000186  eb000044          ADD      r0,r0,r4,LSL #1       ;795
00018a  fa0ffb80          SXTH     r11,r0                ;795
00018e  e003              B        |L10.408|
                  |L10.400|
000190  1c60              ADDS     r0,r4,#1              ;799
000192  b204              SXTH     r4,r0                 ;799
                  |L10.404|
000194  454c              CMP      r4,r9                 ;784
000196  dddc              BLE      |L10.338|
                  |L10.408|
000198  bf00              NOP                            ;790
00019a  454c              CMP      r4,r9                 ;804
00019c  dd16              BLE      |L10.460|
00019e  4866              LDR      r0,|L10.824|
0001a0  7800              LDRB     r0,[r0,#0]            ;808  ; CANAF_FullCAN_cnt
0001a2  f0000001          AND      r0,r0,#1              ;808
0001a6  b938              CBNZ     r0,|L10.440|
0001a8  f64f70ff          MOV      r0,#0xffff            ;810
0001ac  ea404005          ORR      r0,r0,r5,LSL #16      ;810
0001b0  4a67              LDR      r2,|L10.848|
0001b2  f8420024          STR      r0,[r2,r4,LSL #2]     ;810
0001b6  e03e              B        |L10.566|
                  |L10.440|
0001b8  4965              LDR      r1,|L10.848|
0001ba  f8510024          LDR      r0,[r1,r4,LSL #2]     ;815
0001be  f36f000f          BFC      r0,#0,#16             ;815
0001c2  4328              ORRS     r0,r0,r5              ;815
0001c4  460a              MOV      r2,r1                 ;815
0001c6  f8420024          STR      r0,[r2,r4,LSL #2]     ;815
0001ca  e034              B        |L10.566|
                  |L10.460|
0001cc  4960              LDR      r1,|L10.848|
0001ce  f8517024          LDR      r7,[r1,r4,LSL #2]     ;820
0001d2  f00b0001          AND      r0,r11,#1             ;821
0001d6  b918              CBNZ     r0,|L10.480|
0001d8  0428              LSLS     r0,r5,#16             ;824
0001da  ea404817          ORR      r8,r0,r7,LSR #16      ;824
0001de  e003              B        |L10.488|
                  |L10.480|
0001e0  0c38              LSRS     r0,r7,#16             ;829
0001e2  0400              LSLS     r0,r0,#16             ;829
0001e4  ea400805          ORR      r8,r0,r5              ;829
                  |L10.488|
0001e8  4959              LDR      r1,|L10.848|
0001ea  f8418024          STR      r8,[r1,r4,LSL #2]     ;831
0001ee  4852              LDR      r0,|L10.824|
0001f0  8800              LDRH     r0,[r0,#0]            ;832  ; CANAF_FullCAN_cnt
0001f2  ea4f0960          ASR      r9,r0,#1              ;832
0001f6  e00c              B        |L10.530|
                  |L10.504|
0001f8  1c60              ADDS     r0,r4,#1              ;836
0001fa  b204              SXTH     r4,r0                 ;836
0001fc  4954              LDR      r1,|L10.848|
0001fe  f8518024          LDR      r8,[r1,r4,LSL #2]     ;837
000202  ea4f4018          LSR      r0,r8,#16             ;838
000206  ea404007          ORR      r0,r0,r7,LSL #16      ;838
00020a  460a              MOV      r2,r1                 ;838
00020c  f8420024          STR      r0,[r2,r4,LSL #2]     ;838
000210  4647              MOV      r7,r8                 ;839
                  |L10.530|
000212  454c              CMP      r4,r9                 ;834
000214  dbf0              BLT      |L10.504|
000216  4848              LDR      r0,|L10.824|
000218  7800              LDRB     r0,[r0,#0]            ;842  ; CANAF_FullCAN_cnt
00021a  f0000001          AND      r0,r0,#1              ;842
00021e  b950              CBNZ     r0,|L10.566|
000220  494b              LDR      r1,|L10.848|
000222  f8510024          LDR      r0,[r1,r4,LSL #2]     ;845
000226  f36f000f          BFC      r0,#0,#16             ;845
00022a  f64f71ff          MOV      r1,#0xffff            ;845
00022e  4408              ADD      r0,r0,r1              ;845
000230  4a47              LDR      r2,|L10.848|
000232  f8420024          STR      r0,[r2,r4,LSL #2]     ;845
                  |L10.566|
000236  4840              LDR      r0,|L10.824|
000238  8800              LDRH     r0,[r0,#0]            ;851  ; CANAF_FullCAN_cnt
00023a  eba0000b          SUB      r0,r0,r11             ;851
00023e  fa0ff980          SXTH     r9,r0                 ;851
000242  483d              LDR      r0,|L10.824|
000244  8800              LDRH     r0,[r0,#0]            ;852  ; CANAF_FullCAN_cnt
000246  eb000040          ADD      r0,r0,r0,LSL #1       ;852
00024a  ebaa0000          SUB      r0,r10,r0             ;852
00024e  eb0b014b          ADD      r1,r11,r11,LSL #1     ;852
000252  4408              ADD      r0,r0,r1              ;852
000254  1c40              ADDS     r0,r0,#1              ;852
000256  b204              SXTH     r4,r0                 ;852
000258  493d              LDR      r1,|L10.848|
00025a  f8517024          LDR      r7,[r1,r4,LSL #2]     ;853
00025e  1c60              ADDS     r0,r4,#1              ;854
000260  f8518020          LDR      r8,[r1,r0,LSL #2]     ;854
000264  1ca0              ADDS     r0,r4,#2              ;855
000266  f8510020          LDR      r0,[r1,r0,LSL #2]     ;855
00026a  9003              STR      r0,[sp,#0xc]          ;855
00026c  2100              MOVS     r1,#0                 ;856
00026e  1ca0              ADDS     r0,r4,#2              ;856
000270  4a37              LDR      r2,|L10.848|
000272  f8421020          STR      r1,[r2,r0,LSL #2]     ;856
000276  1c60              ADDS     r0,r4,#1              ;856
000278  f8421020          STR      r1,[r2,r0,LSL #2]     ;856
00027c  f8421024          STR      r1,[r2,r4,LSL #2]     ;856
000280  1ce0              ADDS     r0,r4,#3              ;857
000282  b204              SXTH     r4,r0                 ;857
000284  e01c              B        |L10.704|
                  |L10.646|
000286  4932              LDR      r1,|L10.848|
000288  f8510024          LDR      r0,[r1,r4,LSL #2]     ;860
00028c  9002              STR      r0,[sp,#8]            ;860
00028e  1c60              ADDS     r0,r4,#1              ;861
000290  f8510020          LDR      r0,[r1,r0,LSL #2]     ;861
000294  9001              STR      r0,[sp,#4]            ;861
000296  1ca0              ADDS     r0,r4,#2              ;862
000298  f8510020          LDR      r0,[r1,r0,LSL #2]     ;862
00029c  9000              STR      r0,[sp,#0]            ;862
00029e  f8417024          STR      r7,[r1,r4,LSL #2]     ;863
0002a2  1c60              ADDS     r0,r4,#1              ;864
0002a4  f8418020          STR      r8,[r1,r0,LSL #2]     ;864
0002a8  1ca1              ADDS     r1,r4,#2              ;865
0002aa  4a29              LDR      r2,|L10.848|
0002ac  9803              LDR      r0,[sp,#0xc]          ;865
0002ae  f8420021          STR      r0,[r2,r1,LSL #2]     ;865
0002b2  9f02              LDR      r7,[sp,#8]            ;866
0002b4  f8dd8004          LDR      r8,[sp,#4]            ;867
0002b8  9800              LDR      r0,[sp,#0]            ;868
0002ba  9003              STR      r0,[sp,#0xc]          ;868
0002bc  1ce0              ADDS     r0,r4,#3              ;869
0002be  b204              SXTH     r4,r0                 ;869
                  |L10.704|
0002c0  f1b90000          SUBS     r0,r9,#0              ;858
0002c4  f1a90101          SUB      r1,r9,#1              ;858
0002c8  fa0ff981          SXTH     r9,r1                 ;858
0002cc  d1db              BNE      |L10.646|
0002ce  481a              LDR      r0,|L10.824|
0002d0  8800              LDRH     r0,[r0,#0]            ;871  ; CANAF_FullCAN_cnt
0002d2  1c40              ADDS     r0,r0,#1              ;871
0002d4  4918              LDR      r1,|L10.824|
0002d6  8008              STRH     r0,[r1,#0]            ;871
0002d8  481c              LDR      r0,|L10.844|
0002da  6840              LDR      r0,[r0,#4]            ;873
0002dc  1d00              ADDS     r0,r0,#4              ;873
0002de  491b              LDR      r1,|L10.844|
0002e0  6048              STR      r0,[r1,#4]            ;873
0002e2  4608              MOV      r0,r1                 ;874
0002e4  6880              LDR      r0,[r0,#8]            ;874
0002e6  1d00              ADDS     r0,r0,#4              ;874
0002e8  6088              STR      r0,[r1,#8]            ;874
0002ea  4608              MOV      r0,r1                 ;875
0002ec  68c0              LDR      r0,[r0,#0xc]          ;875
0002ee  1d00              ADDS     r0,r0,#4              ;875
0002f0  60c8              STR      r0,[r1,#0xc]          ;875
0002f2  4608              MOV      r0,r1                 ;876
0002f4  6900              LDR      r0,[r0,#0x10]         ;876
0002f6  1d00              ADDS     r0,r0,#4              ;876
0002f8  6108              STR      r0,[r1,#0x10]         ;876
0002fa  4608              MOV      r0,r1                 ;877
0002fc  6940              LDR      r0,[r0,#0x14]         ;877
0002fe  1d00              ADDS     r0,r0,#4              ;877
000300  6148              STR      r0,[r1,#0x14]         ;877
000302  2004              MOVS     r0,#4                 ;879
000304  6008              STR      r0,[r1,#0]            ;879
000306  2001              MOVS     r0,#1                 ;880
000308  e6c4              B        |L10.148|
;;;882    
                          ENDP

00030a  0000              DCW      0x0000
                  |L10.780|
                          DCD      0x40044000
                  |L10.784|
                          DCD      0x40048000
                  |L10.788|
000314  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
000318  44726976
00031c  6572735c
000320  736f7572
000324  63655c6c
000328  70633137
00032c  78785f63
000330  616e2e63
000334  00      
000335  00                DCB      0
000336  00                DCB      0
000337  00                DCB      0
                  |L10.824|
                          DCD      CANAF_FullCAN_cnt
                  |L10.828|
                          DCD      CANAF_std_cnt
                  |L10.832|
                          DCD      CANAF_gstd_cnt
                  |L10.836|
                          DCD      CANAF_ext_cnt
                  |L10.840|
                          DCD      CANAF_gext_cnt
                  |L10.844|
                          DCD      0x4003c000
                  |L10.848|
                          DCD      0x40038000

                          AREA ||i.CAN_LoadGroupEntry||, CODE, READONLY, ALIGN=2

                  CAN_LoadGroupEntry PROC
;;;896     *********************************************************************/
;;;897    CAN_ERROR CAN_LoadGroupEntry(LPC_CAN_TypeDef* CANx, uint32_t lowerID, \
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;898    		uint32_t upperID, CAN_ID_FORMAT_Type format)
;;;899    {
000004  b085              SUB      sp,sp,#0x14
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;900    	uint16_t tmp = 0;
00000a  f04f0b00          MOV      r11,#0
;;;901    	uint32_t buf0, buf1, entry1, entry2, LID,UID;
;;;902    	int16_t cnt1, bound1, total;
;;;903    	//LPC_CANAF_RAM_TypeDef *AFLUTTest = LPC_CANAF_RAM;
;;;904    
;;;905    	CHECK_PARAM(PARAM_CANx(CANx));
00000e  49c4              LDR      r1,|L11.800|
000010  9805              LDR      r0,[sp,#0x14]
000012  4288              CMP      r0,r1
000014  d003              BEQ      |L11.30|
000016  49c3              LDR      r1,|L11.804|
000018  9805              LDR      r0,[sp,#0x14]
00001a  4288              CMP      r0,r1
00001c  d100              BNE      |L11.32|
                  |L11.30|
00001e  e004              B        |L11.42|
                  |L11.32|
000020  f2403189          MOV      r1,#0x389
000024  a0c0              ADR      r0,|L11.808|
000026  f7fffffe          BL       check_failed
                  |L11.42|
;;;906    	CHECK_PARAM(PARAM_ID_FORMAT(format));
00002a  9808              LDR      r0,[sp,#0x20]
00002c  b110              CBZ      r0,|L11.52|
00002e  9808              LDR      r0,[sp,#0x20]
000030  2801              CMP      r0,#1
000032  d100              BNE      |L11.54|
                  |L11.52|
000034  e004              B        |L11.64|
                  |L11.54|
000036  f240318a          MOV      r1,#0x38a
00003a  a0bb              ADR      r0,|L11.808|
00003c  f7fffffe          BL       check_failed
                  |L11.64|
;;;907    
;;;908    	if(lowerID > upperID) return CAN_CONFLICT_ID_ERROR;
000040  4547              CMP      r7,r8
000042  d903              BLS      |L11.76|
000044  2006              MOVS     r0,#6
                  |L11.70|
;;;909    	if(CANx == LPC_CAN1)
;;;910    	{
;;;911    		tmp = 0;
;;;912    	}
;;;913    	else
;;;914    	{
;;;915    		tmp = 1;
;;;916    	}
;;;917    
;;;918    	total =((CANAF_FullCAN_cnt+1)>>1)+ CANAF_FullCAN_cnt*3 +((CANAF_std_cnt + 1) >> 1)+  \
;;;919    			CANAF_gstd_cnt + CANAF_ext_cnt + (CANAF_gext_cnt<<1);
;;;920    
;;;921    	/* Setup Acceptance Filter Configuration
;;;922    	Acceptance Filter Mode Register = Off */
;;;923    	LPC_CANAF->AFMR = 0x00000001;
;;;924    
;;;925    /*********Add Group of Standard Identifier Frame Format************/
;;;926    	if(format == STD_ID_FORMAT)
;;;927    	{
;;;928    		if ((total >= 512)){//don't have enough space
;;;929    			return CAN_OBJECTS_FULL_ERROR;
;;;930    		}
;;;931    		lowerID &=0x7FF; //mask ID
;;;932    		upperID &=0x7FF;
;;;933    		entry1  = (tmp << 29)|(lowerID << 16)|(tmp << 13)|(upperID << 0);
;;;934    		cnt1 = ((CANAF_FullCAN_cnt+1)>>1) + ((CANAF_std_cnt + 1) >> 1);
;;;935    
;;;936    		//if this is the first Group standard ID entry
;;;937    		if(CANAF_gstd_cnt == 0)
;;;938    		{
;;;939    			LPC_CANAF_RAM->mask[cnt1] = entry1;
;;;940    		}
;;;941    		else
;;;942    		{
;;;943    			//find the position to add new Group entry
;;;944    			bound1 = ((CANAF_FullCAN_cnt+1)>>1) + ((CANAF_std_cnt + 1) >> 1) + CANAF_gstd_cnt;
;;;945    			while(cnt1 < bound1)
;;;946    			{
;;;947    				//compare controller first
;;;948    				while((LPC_CANAF_RAM->mask[cnt1] >> 29)< (entry1 >> 29))//increase until meet greater or equal controller
;;;949    					cnt1++;
;;;950    				buf0 = LPC_CANAF_RAM->mask[cnt1];
;;;951    				if((LPC_CANAF_RAM->mask[cnt1] >> 29)> (entry1 >> 29)) //meet greater controller
;;;952    				{
;;;953    					//add at this position
;;;954    					LPC_CANAF_RAM->mask[cnt1] = entry1;
;;;955    					break;
;;;956    				}
;;;957    				else //meet equal controller
;;;958    				{
;;;959    					LID  = (buf0 >> 16)&0x7FF;
;;;960    					UID  = buf0 & 0x7FF;
;;;961    					if (upperID <= LID)
;;;962    					{
;;;963    						//add new entry before this entry
;;;964    						LPC_CANAF_RAM->mask[cnt1] = entry1;
;;;965    						break;
;;;966    					}
;;;967    					else if (lowerID >= UID)
;;;968    					{
;;;969    						//load next entry to compare
;;;970    						cnt1 ++;
;;;971    					}
;;;972    					else
;;;973    						return CAN_CONFLICT_ID_ERROR;
;;;974    				}
;;;975    			}
;;;976    			if(cnt1 >= bound1)
;;;977    			{
;;;978    				//add new entry at the last position in this list
;;;979    				buf0 = LPC_CANAF_RAM->mask[cnt1];
;;;980    				LPC_CANAF_RAM->mask[cnt1] = entry1;
;;;981    			}
;;;982    
;;;983    			//remove all remaining entry of this section one place up
;;;984    			bound1 = total - cnt1;
;;;985    			while(bound1--)
;;;986    			{
;;;987    				cnt1++;
;;;988    				buf1 = LPC_CANAF_RAM->mask[cnt1];
;;;989    				LPC_CANAF_RAM->mask[cnt1] = buf0;
;;;990    				buf0 = buf1;
;;;991    			}
;;;992    		}
;;;993    		CANAF_gstd_cnt++;
;;;994    		//update address values
;;;995    		LPC_CANAF->EFF_sa     +=0x04 ;
;;;996    		LPC_CANAF->EFF_GRP_sa +=0x04;
;;;997    		LPC_CANAF->ENDofTable +=0x04;
;;;998    	}
;;;999    
;;;1000   
;;;1001   /*********Add Group of Extended Identifier Frame Format************/
;;;1002   	else
;;;1003   	{
;;;1004   		if ((total >= 511)){//don't have enough space
;;;1005   			return CAN_OBJECTS_FULL_ERROR;
;;;1006   		}
;;;1007   		lowerID  &= 0x1FFFFFFF; //mask ID
;;;1008   		upperID &= 0x1FFFFFFF;
;;;1009   		entry1   = (tmp << 29)|(lowerID << 0);
;;;1010   		entry2   = (tmp << 29)|(upperID << 0);
;;;1011   
;;;1012   		cnt1 = ((CANAF_FullCAN_cnt+1)>>1) + ((CANAF_std_cnt + 1) >> 1) + CANAF_gstd_cnt + CANAF_ext_cnt;
;;;1013   		//if this is the first Group standard ID entry
;;;1014   		if(CANAF_gext_cnt == 0)
;;;1015   		{
;;;1016   			LPC_CANAF_RAM->mask[cnt1] = entry1;
;;;1017   			LPC_CANAF_RAM->mask[cnt1+1] = entry2;
;;;1018   		}
;;;1019   		else
;;;1020   		{
;;;1021   			//find the position to add new Group entry
;;;1022   			bound1 = ((CANAF_FullCAN_cnt+1)>>1) + ((CANAF_std_cnt + 1) >> 1) + CANAF_gstd_cnt \
;;;1023   						+ CANAF_ext_cnt + (CANAF_gext_cnt<<1);
;;;1024   			while(cnt1 < bound1)
;;;1025   			{
;;;1026   				while((LPC_CANAF_RAM->mask[cnt1] >>29)< tmp) //increase until meet greater or equal controller
;;;1027   					cnt1++;
;;;1028   				buf0 = LPC_CANAF_RAM->mask[cnt1];
;;;1029   				buf1 = LPC_CANAF_RAM->mask[cnt1+1];
;;;1030   				if((LPC_CANAF_RAM->mask[cnt1] >> 29)> (entry1 >> 29)) //meet greater controller
;;;1031   				{
;;;1032   					//add at this position
;;;1033   					LPC_CANAF_RAM->mask[cnt1] = entry1;
;;;1034   					LPC_CANAF_RAM->mask[++cnt1] = entry2;
;;;1035   					break;
;;;1036   				}
;;;1037   				else //meet equal controller
;;;1038   				{
;;;1039   					LID  = buf0 & 0x1FFFFFFF; //mask ID
;;;1040   					UID  = buf1 & 0x1FFFFFFF;
;;;1041   					if (upperID <= LID)
;;;1042   					{
;;;1043   						//add new entry before this entry
;;;1044   						LPC_CANAF_RAM->mask[cnt1] = entry1;
;;;1045   						LPC_CANAF_RAM->mask[++cnt1] = entry2;
;;;1046   						break;
;;;1047   					}
;;;1048   					else if (lowerID >= UID)
;;;1049   					{
;;;1050   						//load next entry to compare
;;;1051   						cnt1 +=2;
;;;1052   					}
;;;1053   					else
;;;1054   						return CAN_CONFLICT_ID_ERROR;
;;;1055   				}
;;;1056   			}
;;;1057   			if(cnt1 >= bound1)
;;;1058   			{
;;;1059   				//add new entry at the last position in this list
;;;1060   				buf0 = LPC_CANAF_RAM->mask[cnt1];
;;;1061   				buf1 = LPC_CANAF_RAM->mask[cnt1+1];
;;;1062   				LPC_CANAF_RAM->mask[cnt1]   = entry1;
;;;1063   				LPC_CANAF_RAM->mask[++cnt1] = entry2;
;;;1064   			}
;;;1065   			//remove all remaining entry of this section two place up
;;;1066   			bound1 = total - cnt1 + 1;
;;;1067   			cnt1++;
;;;1068   			while(bound1>0)
;;;1069   			{
;;;1070   				entry1 = LPC_CANAF_RAM->mask[cnt1];
;;;1071   				entry2 = LPC_CANAF_RAM->mask[cnt1+1];
;;;1072   				LPC_CANAF_RAM->mask[cnt1]   = buf0;
;;;1073   				LPC_CANAF_RAM->mask[cnt1+1] = buf1;
;;;1074   				buf0 = entry1;
;;;1075   				buf1 = entry2;
;;;1076   				cnt1   +=2;
;;;1077   				bound1 -=2;
;;;1078   			}
;;;1079   		}
;;;1080   		CANAF_gext_cnt++;
;;;1081   		//update address values
;;;1082   		LPC_CANAF->ENDofTable +=0x08;
;;;1083   	}
;;;1084   	LPC_CANAF->AFMR = 0x04;
;;;1085    	return CAN_OK;
;;;1086   }
000046  b009              ADD      sp,sp,#0x24
000048  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.76|
00004c  49b4              LDR      r1,|L11.800|
00004e  9805              LDR      r0,[sp,#0x14]         ;909
000050  4288              CMP      r0,r1                 ;909
000052  d102              BNE      |L11.90|
000054  f04f0b00          MOV      r11,#0                ;911
000058  e001              B        |L11.94|
                  |L11.90|
00005a  f04f0b01          MOV      r11,#1                ;915
                  |L11.94|
00005e  48bb              LDR      r0,|L11.844|
000060  8800              LDRH     r0,[r0,#0]            ;918  ; CANAF_FullCAN_cnt
000062  eb000140          ADD      r1,r0,r0,LSL #1       ;918
000066  48b9              LDR      r0,|L11.844|
000068  8800              LDRH     r0,[r0,#0]            ;918  ; CANAF_FullCAN_cnt
00006a  1c40              ADDS     r0,r0,#1              ;918
00006c  eb010160          ADD      r1,r1,r0,ASR #1       ;918
000070  48b7              LDR      r0,|L11.848|
000072  8800              LDRH     r0,[r0,#0]            ;918  ; CANAF_std_cnt
000074  1c40              ADDS     r0,r0,#1              ;918
000076  eb010060          ADD      r0,r1,r0,ASR #1       ;918
00007a  49b6              LDR      r1,|L11.852|
00007c  8809              LDRH     r1,[r1,#0]            ;918  ; CANAF_gstd_cnt
00007e  4408              ADD      r0,r0,r1              ;918
000080  49b5              LDR      r1,|L11.856|
000082  8809              LDRH     r1,[r1,#0]            ;918  ; CANAF_ext_cnt
000084  4408              ADD      r0,r0,r1              ;918
000086  49b5              LDR      r1,|L11.860|
000088  8809              LDRH     r1,[r1,#0]            ;918  ; CANAF_gext_cnt
00008a  eb000041          ADD      r0,r0,r1,LSL #1       ;918
00008e  b200              SXTH     r0,r0                 ;918
000090  9001              STR      r0,[sp,#4]            ;918
000092  2001              MOVS     r0,#1                 ;923
000094  49b2              LDR      r1,|L11.864|
000096  6008              STR      r0,[r1,#0]            ;923
000098  9808              LDR      r0,[sp,#0x20]         ;926
00009a  2800              CMP      r0,#0                 ;926
00009c  d17e              BNE      |L11.412|
00009e  9801              LDR      r0,[sp,#4]            ;928
0000a0  f5b07f00          CMP      r0,#0x200             ;928
0000a4  db01              BLT      |L11.170|
0000a6  2002              MOVS     r0,#2                 ;929
0000a8  e7cd              B        |L11.70|
                  |L11.170|
0000aa  f3c7070a          UBFX     r7,r7,#0,#11          ;931
0000ae  f3c8080a          UBFX     r8,r8,#0,#11          ;932
0000b2  ea4f704b          LSL      r0,r11,#29            ;933
0000b6  ea404007          ORR      r0,r0,r7,LSL #16      ;933
0000ba  ea40304b          ORR      r0,r0,r11,LSL #13     ;933
0000be  ea400508          ORR      r5,r0,r8              ;933
0000c2  48a2              LDR      r0,|L11.844|
0000c4  8800              LDRH     r0,[r0,#0]            ;934  ; CANAF_FullCAN_cnt
0000c6  1c40              ADDS     r0,r0,#1              ;934
0000c8  1041              ASRS     r1,r0,#1              ;934
0000ca  48a1              LDR      r0,|L11.848|
0000cc  8800              LDRH     r0,[r0,#0]            ;934  ; CANAF_std_cnt
0000ce  1c40              ADDS     r0,r0,#1              ;934
0000d0  eb010060          ADD      r0,r1,r0,ASR #1       ;934
0000d4  b204              SXTH     r4,r0                 ;934
0000d6  489f              LDR      r0,|L11.852|
0000d8  8800              LDRH     r0,[r0,#0]            ;937  ; CANAF_gstd_cnt
0000da  b918              CBNZ     r0,|L11.228|
0000dc  49a1              LDR      r1,|L11.868|
0000de  f8415024          STR      r5,[r1,r4,LSL #2]     ;939
0000e2  e054              B        |L11.398|
                  |L11.228|
0000e4  4899              LDR      r0,|L11.844|
0000e6  8800              LDRH     r0,[r0,#0]            ;944  ; CANAF_FullCAN_cnt
0000e8  1c40              ADDS     r0,r0,#1              ;944
0000ea  1041              ASRS     r1,r0,#1              ;944
0000ec  4898              LDR      r0,|L11.848|
0000ee  8800              LDRH     r0,[r0,#0]            ;944  ; CANAF_std_cnt
0000f0  1c40              ADDS     r0,r0,#1              ;944
0000f2  eb010060          ADD      r0,r1,r0,ASR #1       ;944
0000f6  4997              LDR      r1,|L11.852|
0000f8  8809              LDRH     r1,[r1,#0]            ;944  ; CANAF_gstd_cnt
0000fa  4408              ADD      r0,r0,r1              ;944
0000fc  b206              SXTH     r6,r0                 ;944
0000fe  e029              B        |L11.340|
                  |L11.256|
000100  e001              B        |L11.262|
                  |L11.258|
000102  1c60              ADDS     r0,r4,#1              ;949
000104  b204              SXTH     r4,r0                 ;949
                  |L11.262|
000106  4997              LDR      r1,|L11.868|
000108  f8510024          LDR      r0,[r1,r4,LSL #2]     ;948
00010c  0f40              LSRS     r0,r0,#29             ;948
00010e  ebb07f55          CMP      r0,r5,LSR #29         ;948
000112  d3f6              BCC      |L11.258|
000114  f8519024          LDR      r9,[r1,r4,LSL #2]     ;950
000118  f8510024          LDR      r0,[r1,r4,LSL #2]     ;951
00011c  0f40              LSRS     r0,r0,#29             ;951
00011e  ebb07f55          CMP      r0,r5,LSR #29         ;951
000122  d902              BLS      |L11.298|
000124  f8415024          STR      r5,[r1,r4,LSL #2]     ;954
000128  e016              B        |L11.344|
                  |L11.298|
00012a  f3c9400a          UBFX     r0,r9,#16,#11         ;959
00012e  9003              STR      r0,[sp,#0xc]          ;959
000130  f3c9000a          UBFX     r0,r9,#0,#11          ;960
000134  9002              STR      r0,[sp,#8]            ;960
000136  9803              LDR      r0,[sp,#0xc]          ;961
000138  4580              CMP      r8,r0                 ;961
00013a  d803              BHI      |L11.324|
00013c  4989              LDR      r1,|L11.868|
00013e  f8415024          STR      r5,[r1,r4,LSL #2]     ;964
000142  e009              B        |L11.344|
                  |L11.324|
000144  9802              LDR      r0,[sp,#8]            ;967
000146  4287              CMP      r7,r0                 ;967
000148  d302              BCC      |L11.336|
00014a  1c60              ADDS     r0,r4,#1              ;970
00014c  b204              SXTH     r4,r0                 ;970
00014e  e001              B        |L11.340|
                  |L11.336|
000150  2006              MOVS     r0,#6                 ;973
000152  e778              B        |L11.70|
                  |L11.340|
000154  42b4              CMP      r4,r6                 ;945
000156  dbd3              BLT      |L11.256|
                  |L11.344|
000158  bf00              NOP                            ;955
00015a  42b4              CMP      r4,r6                 ;976
00015c  db04              BLT      |L11.360|
00015e  4981              LDR      r1,|L11.868|
000160  f8519024          LDR      r9,[r1,r4,LSL #2]     ;979
000164  f8415024          STR      r5,[r1,r4,LSL #2]     ;980
                  |L11.360|
000168  9801              LDR      r0,[sp,#4]            ;984
00016a  1b00              SUBS     r0,r0,r4              ;984
00016c  b206              SXTH     r6,r0                 ;984
00016e  e009              B        |L11.388|
                  |L11.368|
000170  1c60              ADDS     r0,r4,#1              ;987
000172  b204              SXTH     r4,r0                 ;987
000174  497b              LDR      r1,|L11.868|
000176  f8510024          LDR      r0,[r1,r4,LSL #2]     ;988
00017a  9004              STR      r0,[sp,#0x10]         ;988
00017c  f8419024          STR      r9,[r1,r4,LSL #2]     ;989
000180  f8dd9010          LDR      r9,[sp,#0x10]         ;990
                  |L11.388|
000184  1e30              SUBS     r0,r6,#0              ;985
000186  f1a60101          SUB      r1,r6,#1              ;985
00018a  b20e              SXTH     r6,r1                 ;985
00018c  d1f0              BNE      |L11.368|
                  |L11.398|
00018e  4871              LDR      r0,|L11.852|
000190  8800              LDRH     r0,[r0,#0]            ;993  ; CANAF_gstd_cnt
000192  1c40              ADDS     r0,r0,#1              ;993
000194  496f              LDR      r1,|L11.852|
000196  8008              STRH     r0,[r1,#0]            ;993
000198  4871              LDR      r0,|L11.864|
00019a  e000              B        |L11.414|
                  |L11.412|
00019c  e00c              B        |L11.440|
                  |L11.414|
00019e  68c0              LDR      r0,[r0,#0xc]          ;995
0001a0  1d00              ADDS     r0,r0,#4              ;995
0001a2  496f              LDR      r1,|L11.864|
0001a4  60c8              STR      r0,[r1,#0xc]          ;995
0001a6  4608              MOV      r0,r1                 ;996
0001a8  6900              LDR      r0,[r0,#0x10]         ;996
0001aa  1d00              ADDS     r0,r0,#4              ;996
0001ac  6108              STR      r0,[r1,#0x10]         ;996
0001ae  4608              MOV      r0,r1                 ;997
0001b0  6940              LDR      r0,[r0,#0x14]         ;997
0001b2  1d00              ADDS     r0,r0,#4              ;997
0001b4  6148              STR      r0,[r1,#0x14]         ;997
0001b6  e0ae              B        |L11.790|
                  |L11.440|
0001b8  9801              LDR      r0,[sp,#4]            ;1004
0001ba  f5b07fff          CMP      r0,#0x1fe             ;1004
0001be  dd01              BLE      |L11.452|
0001c0  2002              MOVS     r0,#2                 ;1005
0001c2  e740              B        |L11.70|
                  |L11.452|
0001c4  f0274760          BIC      r7,r7,#0xe0000000     ;1007
0001c8  f0284860          BIC      r8,r8,#0xe0000000     ;1008
0001cc  ea47754b          ORR      r5,r7,r11,LSL #29     ;1009
0001d0  ea487a4b          ORR      r10,r8,r11,LSL #29    ;1010
0001d4  485d              LDR      r0,|L11.844|
0001d6  8800              LDRH     r0,[r0,#0]            ;1012  ; CANAF_FullCAN_cnt
0001d8  1c40              ADDS     r0,r0,#1              ;1012
0001da  1041              ASRS     r1,r0,#1              ;1012
0001dc  485c              LDR      r0,|L11.848|
0001de  8800              LDRH     r0,[r0,#0]            ;1012  ; CANAF_std_cnt
0001e0  1c40              ADDS     r0,r0,#1              ;1012
0001e2  eb010060          ADD      r0,r1,r0,ASR #1       ;1012
0001e6  495b              LDR      r1,|L11.852|
0001e8  8809              LDRH     r1,[r1,#0]            ;1012  ; CANAF_gstd_cnt
0001ea  4408              ADD      r0,r0,r1              ;1012
0001ec  495a              LDR      r1,|L11.856|
0001ee  8809              LDRH     r1,[r1,#0]            ;1012  ; CANAF_ext_cnt
0001f0  4408              ADD      r0,r0,r1              ;1012
0001f2  b204              SXTH     r4,r0                 ;1012
0001f4  4859              LDR      r0,|L11.860|
0001f6  8800              LDRH     r0,[r0,#0]            ;1014  ; CANAF_gext_cnt
0001f8  b930              CBNZ     r0,|L11.520|
0001fa  495a              LDR      r1,|L11.868|
0001fc  f8415024          STR      r5,[r1,r4,LSL #2]     ;1016
000200  1c60              ADDS     r0,r4,#1              ;1017
000202  f841a020          STR      r10,[r1,r0,LSL #2]    ;1017
000206  e07c              B        |L11.770|
                  |L11.520|
000208  4850              LDR      r0,|L11.844|
00020a  8800              LDRH     r0,[r0,#0]            ;1022  ; CANAF_FullCAN_cnt
00020c  1c40              ADDS     r0,r0,#1              ;1022
00020e  1041              ASRS     r1,r0,#1              ;1022
000210  484f              LDR      r0,|L11.848|
000212  8800              LDRH     r0,[r0,#0]            ;1022  ; CANAF_std_cnt
000214  1c40              ADDS     r0,r0,#1              ;1022
000216  eb010060          ADD      r0,r1,r0,ASR #1       ;1022
00021a  494e              LDR      r1,|L11.852|
00021c  8809              LDRH     r1,[r1,#0]            ;1022  ; CANAF_gstd_cnt
00021e  4408              ADD      r0,r0,r1              ;1022
000220  494d              LDR      r1,|L11.856|
000222  8809              LDRH     r1,[r1,#0]            ;1022  ; CANAF_ext_cnt
000224  4408              ADD      r0,r0,r1              ;1022
000226  494d              LDR      r1,|L11.860|
000228  8809              LDRH     r1,[r1,#0]            ;1022  ; CANAF_gext_cnt
00022a  eb000041          ADD      r0,r0,r1,LSL #1       ;1022
00022e  b206              SXTH     r6,r0                 ;1022
000230  e037              B        |L11.674|
                  |L11.562|
000232  e001              B        |L11.568|
                  |L11.564|
000234  1c60              ADDS     r0,r4,#1              ;1027
000236  b204              SXTH     r4,r0                 ;1027
                  |L11.568|
000238  494a              LDR      r1,|L11.868|
00023a  f8510024          LDR      r0,[r1,r4,LSL #2]     ;1026
00023e  ebbb7f50          CMP      r11,r0,LSR #29        ;1026
000242  d8f7              BHI      |L11.564|
000244  f8519024          LDR      r9,[r1,r4,LSL #2]     ;1028
000248  1c60              ADDS     r0,r4,#1              ;1029
00024a  f8510020          LDR      r0,[r1,r0,LSL #2]     ;1029
00024e  9004              STR      r0,[sp,#0x10]         ;1029
000250  f8510024          LDR      r0,[r1,r4,LSL #2]     ;1030
000254  0f40              LSRS     r0,r0,#29             ;1030
000256  ebb07f55          CMP      r0,r5,LSR #29         ;1030
00025a  d907              BLS      |L11.620|
00025c  f8415024          STR      r5,[r1,r4,LSL #2]     ;1033
000260  1c60              ADDS     r0,r4,#1              ;1034
000262  b200              SXTH     r0,r0                 ;1034
000264  4604              MOV      r4,r0                 ;1034
000266  f841a020          STR      r10,[r1,r0,LSL #2]    ;1034
00026a  e01c              B        |L11.678|
                  |L11.620|
00026c  f0294060          BIC      r0,r9,#0xe0000000     ;1039
000270  9003              STR      r0,[sp,#0xc]          ;1039
000272  9804              LDR      r0,[sp,#0x10]         ;1040
000274  f0204060          BIC      r0,r0,#0xe0000000     ;1040
000278  9002              STR      r0,[sp,#8]            ;1040
00027a  9803              LDR      r0,[sp,#0xc]          ;1041
00027c  4580              CMP      r8,r0                 ;1041
00027e  d808              BHI      |L11.658|
000280  4938              LDR      r1,|L11.868|
000282  f8415024          STR      r5,[r1,r4,LSL #2]     ;1044
000286  1c60              ADDS     r0,r4,#1              ;1045
000288  b200              SXTH     r0,r0                 ;1045
00028a  4604              MOV      r4,r0                 ;1045
00028c  f841a020          STR      r10,[r1,r0,LSL #2]    ;1045
000290  e009              B        |L11.678|
                  |L11.658|
000292  9802              LDR      r0,[sp,#8]            ;1048
000294  4287              CMP      r7,r0                 ;1048
000296  d302              BCC      |L11.670|
000298  1ca0              ADDS     r0,r4,#2              ;1051
00029a  b204              SXTH     r4,r0                 ;1051
00029c  e001              B        |L11.674|
                  |L11.670|
00029e  2006              MOVS     r0,#6                 ;1054
0002a0  e6d1              B        |L11.70|
                  |L11.674|
0002a2  42b4              CMP      r4,r6                 ;1024
0002a4  dbc5              BLT      |L11.562|
                  |L11.678|
0002a6  bf00              NOP                            ;1035
0002a8  42b4              CMP      r4,r6                 ;1057
0002aa  db0d              BLT      |L11.712|
0002ac  492d              LDR      r1,|L11.868|
0002ae  f8519024          LDR      r9,[r1,r4,LSL #2]     ;1060
0002b2  1c60              ADDS     r0,r4,#1              ;1061
0002b4  f8510020          LDR      r0,[r1,r0,LSL #2]     ;1061
0002b8  9004              STR      r0,[sp,#0x10]         ;1061
0002ba  f8415024          STR      r5,[r1,r4,LSL #2]     ;1062
0002be  1c60              ADDS     r0,r4,#1              ;1063
0002c0  b200              SXTH     r0,r0                 ;1063
0002c2  4604              MOV      r4,r0                 ;1063
0002c4  f841a020          STR      r10,[r1,r0,LSL #2]    ;1063
                  |L11.712|
0002c8  9801              LDR      r0,[sp,#4]            ;1066
0002ca  1b00              SUBS     r0,r0,r4              ;1066
0002cc  1c40              ADDS     r0,r0,#1              ;1066
0002ce  b206              SXTH     r6,r0                 ;1066
0002d0  1c60              ADDS     r0,r4,#1              ;1067
0002d2  b204              SXTH     r4,r0                 ;1067
0002d4  e013              B        |L11.766|
                  |L11.726|
0002d6  4923              LDR      r1,|L11.868|
0002d8  f8515024          LDR      r5,[r1,r4,LSL #2]     ;1070
0002dc  1c60              ADDS     r0,r4,#1              ;1071
0002de  f851a020          LDR      r10,[r1,r0,LSL #2]    ;1071
0002e2  f8419024          STR      r9,[r1,r4,LSL #2]     ;1072
0002e6  1c61              ADDS     r1,r4,#1              ;1073
0002e8  4a1e              LDR      r2,|L11.868|
0002ea  9804              LDR      r0,[sp,#0x10]         ;1073
0002ec  f8420021          STR      r0,[r2,r1,LSL #2]     ;1073
0002f0  46a9              MOV      r9,r5                 ;1074
0002f2  f8cda010          STR      r10,[sp,#0x10]        ;1075
0002f6  1ca0              ADDS     r0,r4,#2              ;1076
0002f8  b204              SXTH     r4,r0                 ;1076
0002fa  1eb0              SUBS     r0,r6,#2              ;1077
0002fc  b206              SXTH     r6,r0                 ;1077
                  |L11.766|
0002fe  2e00              CMP      r6,#0                 ;1068
000300  dce9              BGT      |L11.726|
                  |L11.770|
000302  4816              LDR      r0,|L11.860|
000304  8800              LDRH     r0,[r0,#0]            ;1080  ; CANAF_gext_cnt
000306  1c40              ADDS     r0,r0,#1              ;1080
000308  4914              LDR      r1,|L11.860|
00030a  8008              STRH     r0,[r1,#0]            ;1080
00030c  4814              LDR      r0,|L11.864|
00030e  6940              LDR      r0,[r0,#0x14]         ;1082
000310  3008              ADDS     r0,r0,#8              ;1082
000312  4913              LDR      r1,|L11.864|
000314  6148              STR      r0,[r1,#0x14]         ;1082
                  |L11.790|
000316  2004              MOVS     r0,#4                 ;1084
000318  4911              LDR      r1,|L11.864|
00031a  6008              STR      r0,[r1,#0]            ;1084
00031c  2001              MOVS     r0,#1                 ;1085
00031e  e692              B        |L11.70|
;;;1087   
                          ENDP

                  |L11.800|
                          DCD      0x40044000
                  |L11.804|
                          DCD      0x40048000
                  |L11.808|
000328  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
00032c  44726976
000330  6572735c
000334  736f7572
000338  63655c6c
00033c  70633137
000340  78785f63
000344  616e2e63
000348  00      
000349  00                DCB      0
00034a  00                DCB      0
00034b  00                DCB      0
                  |L11.844|
                          DCD      CANAF_FullCAN_cnt
                  |L11.848|
                          DCD      CANAF_std_cnt
                  |L11.852|
                          DCD      CANAF_gstd_cnt
                  |L11.856|
                          DCD      CANAF_ext_cnt
                  |L11.860|
                          DCD      CANAF_gext_cnt
                  |L11.864|
                          DCD      0x4003c000
                  |L11.868|
                          DCD      0x40038000

                          AREA ||i.CAN_ModeConfig||, CODE, READONLY, ALIGN=2

                  CAN_ModeConfig PROC
;;;1799    *********************************************************************/
;;;1800   void CAN_ModeConfig(LPC_CAN_TypeDef* CANx, CAN_MODE_Type mode, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;1801   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1802   	CHECK_PARAM(PARAM_CANx(CANx));
000008  484d              LDR      r0,|L12.320|
00000a  4284              CMP      r4,r0
00000c  d002              BEQ      |L12.20|
00000e  484d              LDR      r0,|L12.324|
000010  4284              CMP      r4,r0
000012  d100              BNE      |L12.22|
                  |L12.20|
000014  e004              B        |L12.32|
                  |L12.22|
000016  f240710a          MOV      r1,#0x70a
00001a  a04b              ADR      r0,|L12.328|
00001c  f7fffffe          BL       check_failed
                  |L12.32|
;;;1803   	CHECK_PARAM(PARAM_MODE_TYPE(mode));
000020  b16d              CBZ      r5,|L12.62|
000022  2d01              CMP      r5,#1
000024  d00b              BEQ      |L12.62|
000026  2d02              CMP      r5,#2
000028  d009              BEQ      |L12.62|
00002a  2d03              CMP      r5,#3
00002c  d007              BEQ      |L12.62|
00002e  2d04              CMP      r5,#4
000030  d005              BEQ      |L12.62|
000032  2d05              CMP      r5,#5
000034  d003              BEQ      |L12.62|
000036  2d06              CMP      r5,#6
000038  d001              BEQ      |L12.62|
00003a  2d07              CMP      r5,#7
00003c  d100              BNE      |L12.64|
                  |L12.62|
00003e  e004              B        |L12.74|
                  |L12.64|
000040  f240710b          MOV      r1,#0x70b
000044  a040              ADR      r0,|L12.328|
000046  f7fffffe          BL       check_failed
                  |L12.74|
;;;1804   	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
00004a  b10e              CBZ      r6,|L12.80|
00004c  2e01              CMP      r6,#1
00004e  d100              BNE      |L12.82|
                  |L12.80|
000050  e004              B        |L12.92|
                  |L12.82|
000052  f240710c          MOV      r1,#0x70c
000056  a03c              ADR      r0,|L12.328|
000058  f7fffffe          BL       check_failed
                  |L12.92|
;;;1805   
;;;1806   	switch(mode)
00005c  2d08              CMP      r5,#8
00005e  d26c              BCS      |L12.314|
000060  e8dff005          TBB      [pc,r5]
000064  04071327          DCB      0x04,0x07,0x13,0x27
000068  3b47535f          DCB      0x3b,0x47,0x53,0x5f
;;;1807   	{
;;;1808   	case CAN_OPERATING_MODE:
;;;1809   		CANx->MOD = 0x00;
00006c  2000              MOVS     r0,#0
00006e  6020              STR      r0,[r4,#0]
;;;1810   		break;
000070  e063              B        |L12.314|
;;;1811   	case CAN_RESET_MODE:
;;;1812   		if(NewState == ENABLE)
000072  2e01              CMP      r6,#1
000074  d104              BNE      |L12.128|
;;;1813   			CANx->MOD |=CAN_MOD_RM;
000076  6820              LDR      r0,[r4,#0]
000078  f0400001          ORR      r0,r0,#1
00007c  6020              STR      r0,[r4,#0]
00007e  e003              B        |L12.136|
                  |L12.128|
;;;1814   		else
;;;1815   			CANx->MOD &= ~CAN_MOD_RM;
000080  6820              LDR      r0,[r4,#0]
000082  f0200001          BIC      r0,r0,#1
000086  6020              STR      r0,[r4,#0]
                  |L12.136|
;;;1816   		break;
000088  e057              B        |L12.314|
;;;1817   	case CAN_LISTENONLY_MODE:
;;;1818   		CANx->MOD |=CAN_MOD_RM;//Enter Reset mode
00008a  6820              LDR      r0,[r4,#0]
00008c  f0400001          ORR      r0,r0,#1
000090  6020              STR      r0,[r4,#0]
;;;1819   		if(NewState == ENABLE)
000092  2e01              CMP      r6,#1
000094  d104              BNE      |L12.160|
;;;1820   			CANx->MOD |=CAN_MOD_LOM;
000096  6820              LDR      r0,[r4,#0]
000098  f0400002          ORR      r0,r0,#2
00009c  6020              STR      r0,[r4,#0]
00009e  e003              B        |L12.168|
                  |L12.160|
;;;1821   		else
;;;1822   			CANx->MOD &=~CAN_MOD_LOM;
0000a0  6820              LDR      r0,[r4,#0]
0000a2  f0200002          BIC      r0,r0,#2
0000a6  6020              STR      r0,[r4,#0]
                  |L12.168|
;;;1823   		CANx->MOD &=~CAN_MOD_RM;//Release Reset mode
0000a8  6820              LDR      r0,[r4,#0]
0000aa  f0200001          BIC      r0,r0,#1
0000ae  6020              STR      r0,[r4,#0]
;;;1824   		break;
0000b0  e043              B        |L12.314|
;;;1825   	case CAN_SELFTEST_MODE:
;;;1826   		CANx->MOD |=CAN_MOD_RM;//Enter Reset mode
0000b2  6820              LDR      r0,[r4,#0]
0000b4  f0400001          ORR      r0,r0,#1
0000b8  6020              STR      r0,[r4,#0]
;;;1827   		if(NewState == ENABLE)
0000ba  2e01              CMP      r6,#1
0000bc  d104              BNE      |L12.200|
;;;1828   			CANx->MOD |=CAN_MOD_STM;
0000be  6820              LDR      r0,[r4,#0]
0000c0  f0400004          ORR      r0,r0,#4
0000c4  6020              STR      r0,[r4,#0]
0000c6  e003              B        |L12.208|
                  |L12.200|
;;;1829   		else
;;;1830   			CANx->MOD &=~CAN_MOD_STM;
0000c8  6820              LDR      r0,[r4,#0]
0000ca  f0200004          BIC      r0,r0,#4
0000ce  6020              STR      r0,[r4,#0]
                  |L12.208|
;;;1831   		CANx->MOD &=~CAN_MOD_RM;//Release Reset mode
0000d0  6820              LDR      r0,[r4,#0]
0000d2  f0200001          BIC      r0,r0,#1
0000d6  6020              STR      r0,[r4,#0]
;;;1832   		break;
0000d8  e02f              B        |L12.314|
;;;1833   	case CAN_TXPRIORITY_MODE:
;;;1834   		if(NewState == ENABLE)
0000da  2e01              CMP      r6,#1
0000dc  d104              BNE      |L12.232|
;;;1835   			CANx->MOD |=CAN_MOD_TPM;
0000de  6820              LDR      r0,[r4,#0]
0000e0  f0400008          ORR      r0,r0,#8
0000e4  6020              STR      r0,[r4,#0]
0000e6  e003              B        |L12.240|
                  |L12.232|
;;;1836   		else
;;;1837   			CANx->MOD &=~CAN_MOD_TPM;
0000e8  6820              LDR      r0,[r4,#0]
0000ea  f0200008          BIC      r0,r0,#8
0000ee  6020              STR      r0,[r4,#0]
                  |L12.240|
;;;1838   		break;
0000f0  e023              B        |L12.314|
;;;1839   	case CAN_SLEEP_MODE:
;;;1840   		if(NewState == ENABLE)
0000f2  2e01              CMP      r6,#1
0000f4  d104              BNE      |L12.256|
;;;1841   			CANx->MOD |=CAN_MOD_SM;
0000f6  6820              LDR      r0,[r4,#0]
0000f8  f0400010          ORR      r0,r0,#0x10
0000fc  6020              STR      r0,[r4,#0]
0000fe  e003              B        |L12.264|
                  |L12.256|
;;;1842   		else
;;;1843   			CANx->MOD &=~CAN_MOD_SM;
000100  6820              LDR      r0,[r4,#0]
000102  f0200010          BIC      r0,r0,#0x10
000106  6020              STR      r0,[r4,#0]
                  |L12.264|
;;;1844   		break;
000108  e017              B        |L12.314|
;;;1845   	case CAN_RXPOLARITY_MODE:
;;;1846   		if(NewState == ENABLE)
00010a  2e01              CMP      r6,#1
00010c  d104              BNE      |L12.280|
;;;1847   			CANx->MOD |=CAN_MOD_RPM;
00010e  6820              LDR      r0,[r4,#0]
000110  f0400020          ORR      r0,r0,#0x20
000114  6020              STR      r0,[r4,#0]
000116  e003              B        |L12.288|
                  |L12.280|
;;;1848   		else
;;;1849   			CANx->MOD &=~CAN_MOD_RPM;
000118  6820              LDR      r0,[r4,#0]
00011a  f0200020          BIC      r0,r0,#0x20
00011e  6020              STR      r0,[r4,#0]
                  |L12.288|
;;;1850   		break;
000120  e00b              B        |L12.314|
;;;1851   	case CAN_TEST_MODE:
;;;1852   		if(NewState == ENABLE)
000122  2e01              CMP      r6,#1
000124  d104              BNE      |L12.304|
;;;1853   			CANx->MOD |=CAN_MOD_TM;
000126  6820              LDR      r0,[r4,#0]
000128  f0400080          ORR      r0,r0,#0x80
00012c  6020              STR      r0,[r4,#0]
00012e  e003              B        |L12.312|
                  |L12.304|
;;;1854   		else
;;;1855   			CANx->MOD &=~CAN_MOD_TM;
000130  6820              LDR      r0,[r4,#0]
000132  f0200080          BIC      r0,r0,#0x80
000136  6020              STR      r0,[r4,#0]
                  |L12.312|
;;;1856   		break;
000138  bf00              NOP      
                  |L12.314|
00013a  bf00              NOP                            ;1810
;;;1857   	}
;;;1858   }
00013c  bd70              POP      {r4-r6,pc}
;;;1859   /*********************************************************************//**
                          ENDP

00013e  0000              DCW      0x0000
                  |L12.320|
                          DCD      0x40044000
                  |L12.324|
                          DCD      0x40048000
                  |L12.328|
000148  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
00014c  44726976
000150  6572735c
000154  736f7572
000158  63655c6c
00015c  70633137
000160  78785f63
000164  616e2e63
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0

                          AREA ||i.CAN_ReceiveMsg||, CODE, READONLY, ALIGN=2

                  CAN_ReceiveMsg PROC
;;;1494    *********************************************************************/
;;;1495   Status CAN_ReceiveMsg (LPC_CAN_TypeDef *CANx, CAN_MSG_Type *CAN_Msg)
000000  b570              PUSH     {r4-r6,lr}
;;;1496   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1497   	uint32_t data;
;;;1498   
;;;1499   	CHECK_PARAM(PARAM_CANx(CANx));
000006  481d              LDR      r0,|L13.124|
000008  4285              CMP      r5,r0
00000a  d002              BEQ      |L13.18|
00000c  481c              LDR      r0,|L13.128|
00000e  4285              CMP      r5,r0
000010  d100              BNE      |L13.20|
                  |L13.18|
000012  e004              B        |L13.30|
                  |L13.20|
000014  f24051db          MOV      r1,#0x5db
000018  a01a              ADR      r0,|L13.132|
00001a  f7fffffe          BL       check_failed
                  |L13.30|
;;;1500   
;;;1501   	//check status of Receive Buffer
;;;1502   	if((CANx->SR &0x00000001))
00001e  69e8              LDR      r0,[r5,#0x1c]
000020  f0000001          AND      r0,r0,#1
000024  2800              CMP      r0,#0
000026  d025              BEQ      |L13.116|
;;;1503   	{
;;;1504   		/* Receive message is available */
;;;1505   		/* Read frame informations */
;;;1506   		CAN_Msg->format   = (uint8_t)(((CANx->RFS) & 0x80000000)>>31);
000028  6a28              LDR      r0,[r5,#0x20]
00002a  0fc0              LSRS     r0,r0,#31
00002c  7360              STRB     r0,[r4,#0xd]
;;;1507   		CAN_Msg->type     = (uint8_t)(((CANx->RFS) & 0x40000000)>>30);
00002e  6a28              LDR      r0,[r5,#0x20]
000030  f3c07080          UBFX     r0,r0,#30,#1
000034  73a0              STRB     r0,[r4,#0xe]
;;;1508   		CAN_Msg->len      = (uint8_t)(((CANx->RFS) & 0x000F0000)>>16);
000036  6a28              LDR      r0,[r5,#0x20]
000038  f3c04003          UBFX     r0,r0,#16,#4
00003c  7320              STRB     r0,[r4,#0xc]
;;;1509   
;;;1510   
;;;1511   		/* Read CAN message identifier */
;;;1512   		CAN_Msg->id = CANx->RID;
00003e  6a68              LDR      r0,[r5,#0x24]
000040  6020              STR      r0,[r4,#0]
;;;1513   
;;;1514   		/* Read the data if received message was DATA FRAME */
;;;1515   		if (CAN_Msg->type == DATA_FRAME)
000042  7ba0              LDRB     r0,[r4,#0xe]
000044  b990              CBNZ     r0,|L13.108|
;;;1516   		{
;;;1517   			/* Read first 4 data bytes */
;;;1518   			data = CANx->RDA;
000046  6aae              LDR      r6,[r5,#0x28]
;;;1519   			*((uint8_t *) &CAN_Msg->dataA[0])= data & 0x000000FF;
000048  7126              STRB     r6,[r4,#4]
;;;1520   			*((uint8_t *) &CAN_Msg->dataA[1])= (data & 0x0000FF00)>>8;;
00004a  0a31              LSRS     r1,r6,#8
00004c  7161              STRB     r1,[r4,#5]
;;;1521   			*((uint8_t *) &CAN_Msg->dataA[2])= (data & 0x00FF0000)>>16;
00004e  0c31              LSRS     r1,r6,#16
000050  71a1              STRB     r1,[r4,#6]
;;;1522   			*((uint8_t *) &CAN_Msg->dataA[3])= (data & 0xFF000000)>>24;
000052  0e31              LSRS     r1,r6,#24
000054  71e1              STRB     r1,[r4,#7]
;;;1523   
;;;1524   			/* Read second 4 data bytes */
;;;1525   			data = CANx->RDB;
000056  6aee              LDR      r6,[r5,#0x2c]
;;;1526   			*((uint8_t *) &CAN_Msg->dataB[0])= data & 0x000000FF;
000058  7226              STRB     r6,[r4,#8]
;;;1527   			*((uint8_t *) &CAN_Msg->dataB[1])= (data & 0x0000FF00)>>8;
00005a  0a31              LSRS     r1,r6,#8
00005c  7261              STRB     r1,[r4,#9]
;;;1528   			*((uint8_t *) &CAN_Msg->dataB[2])= (data & 0x00FF0000)>>16;
00005e  0c31              LSRS     r1,r6,#16
000060  72a1              STRB     r1,[r4,#0xa]
;;;1529   			*((uint8_t *) &CAN_Msg->dataB[3])= (data & 0xFF000000)>>24;
000062  0e31              LSRS     r1,r6,#24
000064  72e1              STRB     r1,[r4,#0xb]
;;;1530   
;;;1531   		/*release receive buffer*/
;;;1532   		CANx->CMR = 0x04;
000066  2004              MOVS     r0,#4
000068  6068              STR      r0,[r5,#4]
00006a  e005              B        |L13.120|
                  |L13.108|
;;;1533   		}
;;;1534   		else
;;;1535   		{
;;;1536   			/* Received Frame is a Remote Frame, not have data, we just receive
;;;1537   			 * message information only */
;;;1538   			CANx->CMR = 0x04; /*release receive buffer*/
00006c  2004              MOVS     r0,#4
00006e  6068              STR      r0,[r5,#4]
;;;1539   			return SUCCESS;
000070  2001              MOVS     r0,#1
                  |L13.114|
;;;1540   		}
;;;1541   	}
;;;1542   	else
;;;1543   	{
;;;1544   		// no receive message available
;;;1545   		return ERROR;
;;;1546   	}
;;;1547   	return SUCCESS;
;;;1548   }
000072  bd70              POP      {r4-r6,pc}
                  |L13.116|
000074  2000              MOVS     r0,#0                 ;1545
000076  e7fc              B        |L13.114|
                  |L13.120|
000078  2001              MOVS     r0,#1                 ;1547
00007a  e7fa              B        |L13.114|
;;;1549   
                          ENDP

                  |L13.124|
                          DCD      0x40044000
                  |L13.128|
                          DCD      0x40048000
                  |L13.132|
000084  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
000088  44726976
00008c  6572735c
000090  736f7572
000094  63655c6c
000098  70633137
00009c  78785f63
0000a0  616e2e63
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0

                          AREA ||i.CAN_RemoveEntry||, CODE, READONLY, ALIGN=2

                  CAN_RemoveEntry PROC
;;;1101    *********************************************************************/
;;;1102   CAN_ERROR CAN_RemoveEntry(AFLUT_ENTRY_Type EntryType, uint16_t position)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1103   {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;1104   	uint16_t cnt, bound, total;
;;;1105   	uint32_t buf0, buf1;
;;;1106   	CHECK_PARAM(PARAM_AFLUT_ENTRY_TYPE(EntryType));
000008  f1b80f00          CMP      r8,#0
00000c  d00b              BEQ      |L14.38|
00000e  f1b80f01          CMP      r8,#1
000012  d008              BEQ      |L14.38|
000014  f1b80f02          CMP      r8,#2
000018  d005              BEQ      |L14.38|
00001a  f1b80f03          CMP      r8,#3
00001e  d002              BEQ      |L14.38|
000020  f1b80f04          CMP      r8,#4
000024  d100              BNE      |L14.40|
                  |L14.38|
000026  e004              B        |L14.50|
                  |L14.40|
000028  f2404152          MOV      r1,#0x452
00002c  a0f4              ADR      r0,|L14.1024|
00002e  f7fffffe          BL       check_failed
                  |L14.50|
;;;1107   	CHECK_PARAM(PARAM_POSITION(position));
000032  f5b57f00          CMP      r5,#0x200
000036  da00              BGE      |L14.58|
000038  e004              B        |L14.68|
                  |L14.58|
00003a  f2404153          MOV      r1,#0x453
00003e  a0f0              ADR      r0,|L14.1024|
000040  f7fffffe          BL       check_failed
                  |L14.68|
;;;1108   
;;;1109   	/* Setup Acceptance Filter Configuration
;;;1110   	Acceptance Filter Mode Register = Off */
;;;1111   	LPC_CANAF->AFMR = 0x00000001;
000044  2001              MOVS     r0,#1
000046  49f7              LDR      r1,|L14.1060|
000048  6008              STR      r0,[r1,#0]
;;;1112   	total = ((CANAF_FullCAN_cnt+1)>>1)+((CANAF_std_cnt + 1) >> 1) + \
00004a  48f7              LDR      r0,|L14.1064|
00004c  8800              LDRH     r0,[r0,#0]  ; CANAF_FullCAN_cnt
00004e  1c40              ADDS     r0,r0,#1
000050  1041              ASRS     r1,r0,#1
000052  48f6              LDR      r0,|L14.1068|
000054  8800              LDRH     r0,[r0,#0]  ; CANAF_std_cnt
000056  1c40              ADDS     r0,r0,#1
000058  eb010060          ADD      r0,r1,r0,ASR #1
00005c  49f4              LDR      r1,|L14.1072|
00005e  8809              LDRH     r1,[r1,#0]  ; CANAF_gstd_cnt
000060  4408              ADD      r0,r0,r1
000062  49f4              LDR      r1,|L14.1076|
000064  8809              LDRH     r1,[r1,#0]  ; CANAF_ext_cnt
000066  4408              ADD      r0,r0,r1
000068  49f3              LDR      r1,|L14.1080|
00006a  8809              LDRH     r1,[r1,#0]  ; CANAF_gext_cnt
00006c  eb000041          ADD      r0,r0,r1,LSL #1
000070  fa1ffa80          UXTH     r10,r0
;;;1113   			CANAF_gstd_cnt + CANAF_ext_cnt + (CANAF_gext_cnt<<1);
;;;1114   
;;;1115   
;;;1116   /************** Remove FullCAN Entry *************/
;;;1117   	if(EntryType == FULLCAN_ENTRY)
000074  f1b80f00          CMP      r8,#0
000078  d17e              BNE      |L14.376|
;;;1118   	{
;;;1119   		if((CANAF_FullCAN_cnt==0)||(position >= CANAF_FullCAN_cnt))
00007a  48eb              LDR      r0,|L14.1064|
00007c  8800              LDRH     r0,[r0,#0]  ; CANAF_FullCAN_cnt
00007e  b118              CBZ      r0,|L14.136|
000080  48e9              LDR      r0,|L14.1064|
000082  8800              LDRH     r0,[r0,#0]  ; CANAF_FullCAN_cnt
000084  4285              CMP      r5,r0
000086  db02              BLT      |L14.142|
                  |L14.136|
;;;1120   		{
;;;1121   			return CAN_ENTRY_NOT_EXIT_ERROR;
000088  2007              MOVS     r0,#7
                  |L14.138|
;;;1122   		}
;;;1123   		else
;;;1124   		{
;;;1125   			cnt = position >> 1;
;;;1126   			buf0 = LPC_CANAF_RAM->mask[cnt];
;;;1127   			bound = (CANAF_FullCAN_cnt - position -1)>>1;
;;;1128   			if((position & 0x0001) == 0) //event position
;;;1129   			{
;;;1130   				while(bound--)
;;;1131   				{
;;;1132   					//remove all remaining FullCAN entry one place down
;;;1133   					buf1  = LPC_CANAF_RAM->mask[cnt+1];
;;;1134   					LPC_CANAF_RAM->mask[cnt] = (buf1 >> 16) | (buf0 << 16);
;;;1135   					buf0  = buf1;
;;;1136   					cnt++;
;;;1137   				}
;;;1138   			}
;;;1139   			else //odd position
;;;1140   			{
;;;1141   				while(bound--)
;;;1142   				{
;;;1143   					//remove all remaining FullCAN entry one place down
;;;1144   					buf1  = LPC_CANAF_RAM->mask[cnt+1];
;;;1145   					LPC_CANAF_RAM->mask[cnt] = (buf0 & 0xFFFF0000)|(buf1 >> 16);
;;;1146   					LPC_CANAF_RAM->mask[cnt+1] = LPC_CANAF_RAM->mask[cnt+1] << 16;
;;;1147   					buf0  = buf1<<16;
;;;1148   					cnt++;
;;;1149   				}
;;;1150   			}
;;;1151   			if((CANAF_FullCAN_cnt & 0x0001) == 0)
;;;1152   			{
;;;1153   				if((position & 0x0001)==0)
;;;1154   					LPC_CANAF_RAM->mask[cnt] = (buf0 << 16) | (0x0000FFFF);
;;;1155   				else
;;;1156   					LPC_CANAF_RAM->mask[cnt] = buf0 | 0x0000FFFF;
;;;1157   			}
;;;1158   			else
;;;1159   			{
;;;1160   				//remove all remaining section one place down
;;;1161   				cnt = (CANAF_FullCAN_cnt + 1)>>1;
;;;1162   				bound = total + CANAF_FullCAN_cnt * 3;
;;;1163   				while(bound>cnt)
;;;1164   				{
;;;1165   					LPC_CANAF_RAM->mask[cnt-1] = LPC_CANAF_RAM->mask[cnt];
;;;1166   					cnt++;
;;;1167   				}
;;;1168   				LPC_CANAF_RAM->mask[cnt-1]=0x00;
;;;1169   				//update address values
;;;1170   				LPC_CANAF->SFF_sa 	  -=0x04;
;;;1171   				LPC_CANAF->SFF_GRP_sa -=0x04 ;
;;;1172   				LPC_CANAF->EFF_sa     -=0x04 ;
;;;1173   				LPC_CANAF->EFF_GRP_sa -=0x04;
;;;1174   				LPC_CANAF->ENDofTable -=0x04;
;;;1175   			}
;;;1176   			CANAF_FullCAN_cnt--;
;;;1177   
;;;1178   			//delete its FullCAN Object in the FullCAN Object section
;;;1179   			//remove all remaining FullCAN Object three place down
;;;1180   			cnt = total + position * 3;
;;;1181   			bound = (CANAF_FullCAN_cnt - position + 1) * 3;
;;;1182   
;;;1183   			while(bound)
;;;1184   			{
;;;1185   				LPC_CANAF_RAM->mask[cnt]=LPC_CANAF_RAM->mask[cnt+3];;
;;;1186   				LPC_CANAF_RAM->mask[cnt+1]=LPC_CANAF_RAM->mask[cnt+4];
;;;1187   				LPC_CANAF_RAM->mask[cnt+2]=LPC_CANAF_RAM->mask[cnt+5];
;;;1188   				bound -=3;
;;;1189   				cnt   +=3;
;;;1190   			}
;;;1191   		}
;;;1192   	}
;;;1193   
;;;1194   /************** Remove Explicit Standard ID Entry *************/
;;;1195   	else if(EntryType == EXPLICIT_STANDARD_ENTRY)
;;;1196   	{
;;;1197   		if((CANAF_std_cnt==0)||(position >= CANAF_std_cnt))
;;;1198   		{
;;;1199   			return CAN_ENTRY_NOT_EXIT_ERROR;
;;;1200   		}
;;;1201   		else
;;;1202   		{
;;;1203   			cnt = ((CANAF_FullCAN_cnt+1)>>1)+ (position >> 1);
;;;1204   			buf0 = LPC_CANAF_RAM->mask[cnt];
;;;1205   			bound = (CANAF_std_cnt - position - 1)>>1;
;;;1206   			if((position & 0x0001) == 0) //event position
;;;1207   			{
;;;1208   				while(bound--)
;;;1209   				{
;;;1210   					//remove all remaining FullCAN entry one place down
;;;1211   					buf1  = LPC_CANAF_RAM->mask[cnt+1];
;;;1212   					LPC_CANAF_RAM->mask[cnt] = (buf1 >> 16) | (buf0 << 16);
;;;1213   					buf0  = buf1;
;;;1214   					cnt++;
;;;1215   				}
;;;1216   			}
;;;1217   			else //odd position
;;;1218   			{
;;;1219   				while(bound--)
;;;1220   				{
;;;1221   					//remove all remaining FullCAN entry one place down
;;;1222   					buf1  = LPC_CANAF_RAM->mask[cnt+1];
;;;1223   					LPC_CANAF_RAM->mask[cnt] = (buf0 & 0xFFFF0000)|(buf1 >> 16);
;;;1224   					LPC_CANAF_RAM->mask[cnt+1] = LPC_CANAF_RAM->mask[cnt+1] << 16;
;;;1225   					buf0  = buf1<<16;
;;;1226   					cnt++;
;;;1227   				}
;;;1228   			}
;;;1229   			if((CANAF_std_cnt & 0x0001) == 0)
;;;1230   			{
;;;1231   				if((position & 0x0001)==0)
;;;1232   					LPC_CANAF_RAM->mask[cnt] = (buf0 << 16) | (0x0000FFFF);
;;;1233   				else
;;;1234   					LPC_CANAF_RAM->mask[cnt] = buf0 | 0x0000FFFF;
;;;1235   			}
;;;1236   			else
;;;1237   			{
;;;1238   				//remove all remaining section one place down
;;;1239   				cnt = ((CANAF_FullCAN_cnt + 1)>>1) + ((CANAF_std_cnt + 1) >> 1);
;;;1240   				bound = total + CANAF_FullCAN_cnt * 3;
;;;1241   				while(bound>cnt)
;;;1242   				{
;;;1243   					LPC_CANAF_RAM->mask[cnt-1] = LPC_CANAF_RAM->mask[cnt];
;;;1244   					cnt++;
;;;1245   				}
;;;1246   				LPC_CANAF_RAM->mask[cnt-1]=0x00;
;;;1247   				//update address value
;;;1248   				LPC_CANAF->SFF_GRP_sa -=0x04 ;
;;;1249   				LPC_CANAF->EFF_sa     -=0x04 ;
;;;1250   				LPC_CANAF->EFF_GRP_sa -=0x04;
;;;1251   				LPC_CANAF->ENDofTable -=0x04;
;;;1252   			}
;;;1253   			CANAF_std_cnt--;
;;;1254   		}
;;;1255   	}
;;;1256   
;;;1257   /************** Remove Group of Standard ID Entry *************/
;;;1258   	else if(EntryType == GROUP_STANDARD_ENTRY)
;;;1259   	{
;;;1260   		if((CANAF_gstd_cnt==0)||(position >= CANAF_gstd_cnt))
;;;1261   		{
;;;1262   			return CAN_ENTRY_NOT_EXIT_ERROR;
;;;1263   		}
;;;1264   		else
;;;1265   		{
;;;1266   			cnt = ((CANAF_FullCAN_cnt + 1)>>1) + ((CANAF_std_cnt + 1) >> 1)+ position + 1;
;;;1267   			bound = total + CANAF_FullCAN_cnt * 3;
;;;1268   			while (cnt<bound)
;;;1269   			{
;;;1270   				LPC_CANAF_RAM->mask[cnt-1] = LPC_CANAF_RAM->mask[cnt];
;;;1271   				cnt++;
;;;1272   			}
;;;1273   			LPC_CANAF_RAM->mask[cnt-1]=0x00;
;;;1274   		}
;;;1275   		CANAF_gstd_cnt--;
;;;1276   		//update address value
;;;1277   		LPC_CANAF->EFF_sa     -=0x04;
;;;1278   		LPC_CANAF->EFF_GRP_sa -=0x04;
;;;1279   		LPC_CANAF->ENDofTable -=0x04;
;;;1280   	}
;;;1281   
;;;1282   /************** Remove Explicit Extended ID Entry *************/
;;;1283   	else if(EntryType == EXPLICIT_EXTEND_ENTRY)
;;;1284   	{
;;;1285   		if((CANAF_ext_cnt==0)||(position >= CANAF_ext_cnt))
;;;1286   		{
;;;1287   			return CAN_ENTRY_NOT_EXIT_ERROR;
;;;1288   		}
;;;1289   		else
;;;1290   		{
;;;1291   			cnt = ((CANAF_FullCAN_cnt + 1)>>1) + ((CANAF_std_cnt + 1) >> 1)+ CANAF_gstd_cnt + position + 1;
;;;1292   			bound = total + CANAF_FullCAN_cnt * 3;
;;;1293   			while (cnt<bound)
;;;1294   			{
;;;1295   				LPC_CANAF_RAM->mask[cnt-1] = LPC_CANAF_RAM->mask[cnt];
;;;1296   				cnt++;
;;;1297   			}
;;;1298   			LPC_CANAF_RAM->mask[cnt-1]=0x00;
;;;1299   		}
;;;1300   		CANAF_ext_cnt--;
;;;1301   		LPC_CANAF->EFF_GRP_sa -=0x04;
;;;1302   		LPC_CANAF->ENDofTable -=0x04;
;;;1303   	}
;;;1304   
;;;1305   /************** Remove Group of Extended ID Entry *************/
;;;1306   	else
;;;1307   	{
;;;1308   		if((CANAF_gext_cnt==0)||(position >= CANAF_gext_cnt))
;;;1309   		{
;;;1310   			return CAN_ENTRY_NOT_EXIT_ERROR;
;;;1311   		}
;;;1312   		else
;;;1313   		{
;;;1314   			cnt = total - (CANAF_gext_cnt<<1) + (position<<1);
;;;1315   			bound = total + CANAF_FullCAN_cnt * 3;
;;;1316   			while (cnt<bound)
;;;1317   			{
;;;1318   				//remove all remaining entry two place up
;;;1319   				LPC_CANAF_RAM->mask[cnt] = LPC_CANAF_RAM->mask[cnt+2];
;;;1320   				LPC_CANAF_RAM->mask[cnt+1] = LPC_CANAF_RAM->mask[cnt+3];
;;;1321   				cnt+=2;
;;;1322   			}
;;;1323   		}
;;;1324   		CANAF_gext_cnt--;
;;;1325   		LPC_CANAF->ENDofTable -=0x08;
;;;1326   	}
;;;1327   	LPC_CANAF->AFMR = 0x04;
;;;1328   	return CAN_OK;
;;;1329   }
00008a  e8bd87f0          POP      {r4-r10,pc}
                  |L14.142|
00008e  106c              ASRS     r4,r5,#1              ;1125
000090  49ea              LDR      r1,|L14.1084|
000092  f8519024          LDR      r9,[r1,r4,LSL #2]     ;1126
000096  48e4              LDR      r0,|L14.1064|
000098  8800              LDRH     r0,[r0,#0]            ;1127  ; CANAF_FullCAN_cnt
00009a  1b40              SUBS     r0,r0,r5              ;1127
00009c  1e40              SUBS     r0,r0,#1              ;1127
00009e  f3c0064f          UBFX     r6,r0,#1,#16          ;1127
0000a2  f0050001          AND      r0,r5,#1              ;1128
0000a6  b998              CBNZ     r0,|L14.208|
0000a8  e00c              B        |L14.196|
                  |L14.170|
0000aa  1c60              ADDS     r0,r4,#1              ;1133
0000ac  49e3              LDR      r1,|L14.1084|
0000ae  f8517020          LDR      r7,[r1,r0,LSL #2]     ;1133
0000b2  0c38              LSRS     r0,r7,#16             ;1134
0000b4  ea404009          ORR      r0,r0,r9,LSL #16      ;1134
0000b8  460a              MOV      r2,r1                 ;1134
0000ba  f8420024          STR      r0,[r2,r4,LSL #2]     ;1134
0000be  46b9              MOV      r9,r7                 ;1135
0000c0  1c60              ADDS     r0,r4,#1              ;1136
0000c2  b284              UXTH     r4,r0                 ;1136
                  |L14.196|
0000c4  1e30              SUBS     r0,r6,#0              ;1130
0000c6  f1a60101          SUB      r1,r6,#1              ;1130
0000ca  b28e              UXTH     r6,r1                 ;1130
0000cc  d1ed              BNE      |L14.170|
0000ce  e01c              B        |L14.266|
                  |L14.208|
0000d0  e016              B        |L14.256|
                  |L14.210|
0000d2  1c60              ADDS     r0,r4,#1              ;1144
0000d4  49d9              LDR      r1,|L14.1084|
0000d6  f8517020          LDR      r7,[r1,r0,LSL #2]     ;1144
0000da  ea4f4019          LSR      r0,r9,#16             ;1145
0000de  ea4f4000          LSL      r0,r0,#16             ;1145
0000e2  ea404017          ORR      r0,r0,r7,LSR #16      ;1145
0000e6  460a              MOV      r2,r1                 ;1145
0000e8  f8420024          STR      r0,[r2,r4,LSL #2]     ;1145
0000ec  1c60              ADDS     r0,r4,#1              ;1146
0000ee  f8510020          LDR      r0,[r1,r0,LSL #2]     ;1146
0000f2  0401              LSLS     r1,r0,#16             ;1146
0000f4  1c60              ADDS     r0,r4,#1              ;1146
0000f6  f8421020          STR      r1,[r2,r0,LSL #2]     ;1146
0000fa  ea4f4907          LSL      r9,r7,#16             ;1147
0000fe  b284              UXTH     r4,r0                 ;1148
                  |L14.256|
000100  1e30              SUBS     r0,r6,#0              ;1141
000102  f1a60101          SUB      r1,r6,#1              ;1141
000106  b28e              UXTH     r6,r1                 ;1141
000108  d1e3              BNE      |L14.210|
                  |L14.266|
00010a  48c7              LDR      r0,|L14.1064|
00010c  7800              LDRB     r0,[r0,#0]            ;1151  ; CANAF_FullCAN_cnt
00010e  f0000001          AND      r0,r0,#1              ;1151
000112  b990              CBNZ     r0,|L14.314|
000114  f0050001          AND      r0,r5,#1              ;1153
000118  b938              CBNZ     r0,|L14.298|
00011a  f64f70ff          MOV      r0,#0xffff            ;1154
00011e  eb004009          ADD      r0,r0,r9,LSL #16      ;1154
000122  4ac6              LDR      r2,|L14.1084|
000124  f8420024          STR      r0,[r2,r4,LSL #2]     ;1154
000128  e039              B        |L14.414|
                  |L14.298|
00012a  f64f70ff          MOV      r0,#0xffff            ;1156
00012e  ea490000          ORR      r0,r9,r0              ;1156
000132  4ac2              LDR      r2,|L14.1084|
000134  f8420024          STR      r0,[r2,r4,LSL #2]     ;1156
000138  e031              B        |L14.414|
                  |L14.314|
00013a  48bb              LDR      r0,|L14.1064|
00013c  8800              LDRH     r0,[r0,#0]            ;1161  ; CANAF_FullCAN_cnt
00013e  1c40              ADDS     r0,r0,#1              ;1161
000140  1044              ASRS     r4,r0,#1              ;1161
000142  48b9              LDR      r0,|L14.1064|
000144  8800              LDRH     r0,[r0,#0]            ;1162  ; CANAF_FullCAN_cnt
000146  eb000040          ADD      r0,r0,r0,LSL #1       ;1162
00014a  4450              ADD      r0,r0,r10             ;1162
00014c  b286              UXTH     r6,r0                 ;1162
00014e  e008              B        |L14.354|
                  |L14.336|
000150  49ba              LDR      r1,|L14.1084|
000152  f8511024          LDR      r1,[r1,r4,LSL #2]     ;1165
000156  1e60              SUBS     r0,r4,#1              ;1165
000158  4ab8              LDR      r2,|L14.1084|
00015a  f8421020          STR      r1,[r2,r0,LSL #2]     ;1165
00015e  1c60              ADDS     r0,r4,#1              ;1166
000160  b284              UXTH     r4,r0                 ;1166
                  |L14.354|
000162  42a6              CMP      r6,r4                 ;1163
000164  dcf4              BGT      |L14.336|
000166  2100              MOVS     r1,#0                 ;1168
000168  1e60              SUBS     r0,r4,#1              ;1168
00016a  4ab4              LDR      r2,|L14.1084|
00016c  f8421020          STR      r1,[r2,r0,LSL #2]     ;1168
000170  48ac              LDR      r0,|L14.1060|
000172  6840              LDR      r0,[r0,#4]            ;1170
000174  1f00              SUBS     r0,r0,#4              ;1170
000176  e000              B        |L14.378|
                  |L14.376|
000178  e03d              B        |L14.502|
                  |L14.378|
00017a  49aa              LDR      r1,|L14.1060|
00017c  6048              STR      r0,[r1,#4]            ;1170
00017e  4608              MOV      r0,r1                 ;1171
000180  6880              LDR      r0,[r0,#8]            ;1171
000182  1f00              SUBS     r0,r0,#4              ;1171
000184  6088              STR      r0,[r1,#8]            ;1171
000186  4608              MOV      r0,r1                 ;1172
000188  68c0              LDR      r0,[r0,#0xc]          ;1172
00018a  1f00              SUBS     r0,r0,#4              ;1172
00018c  60c8              STR      r0,[r1,#0xc]          ;1172
00018e  4608              MOV      r0,r1                 ;1173
000190  6900              LDR      r0,[r0,#0x10]         ;1173
000192  1f00              SUBS     r0,r0,#4              ;1173
000194  6108              STR      r0,[r1,#0x10]         ;1173
000196  4608              MOV      r0,r1                 ;1174
000198  6940              LDR      r0,[r0,#0x14]         ;1174
00019a  1f00              SUBS     r0,r0,#4              ;1174
00019c  6148              STR      r0,[r1,#0x14]         ;1174
                  |L14.414|
00019e  48a2              LDR      r0,|L14.1064|
0001a0  8800              LDRH     r0,[r0,#0]            ;1176  ; CANAF_FullCAN_cnt
0001a2  1e40              SUBS     r0,r0,#1              ;1176
0001a4  49a0              LDR      r1,|L14.1064|
0001a6  8008              STRH     r0,[r1,#0]            ;1176
0001a8  eb050045          ADD      r0,r5,r5,LSL #1       ;1180
0001ac  4450              ADD      r0,r0,r10             ;1180
0001ae  b284              UXTH     r4,r0                 ;1180
0001b0  4608              MOV      r0,r1                 ;1181
0001b2  8800              LDRH     r0,[r0,#0]            ;1181  ; CANAF_FullCAN_cnt
0001b4  1b40              SUBS     r0,r0,r5              ;1181
0001b6  1c40              ADDS     r0,r0,#1              ;1181
0001b8  eb000040          ADD      r0,r0,r0,LSL #1       ;1181
0001bc  b286              UXTH     r6,r0                 ;1181
0001be  e017              B        |L14.496|
                  |L14.448|
0001c0  1ce0              ADDS     r0,r4,#3              ;1185
0001c2  499e              LDR      r1,|L14.1084|
0001c4  f8510020          LDR      r0,[r1,r0,LSL #2]     ;1185
0001c8  460a              MOV      r2,r1                 ;1185
0001ca  f8420024          STR      r0,[r2,r4,LSL #2]     ;1185
0001ce  1d20              ADDS     r0,r4,#4              ;1186
0001d0  f8511020          LDR      r1,[r1,r0,LSL #2]     ;1186
0001d4  1c60              ADDS     r0,r4,#1              ;1186
0001d6  f8421020          STR      r1,[r2,r0,LSL #2]     ;1186
0001da  1d60              ADDS     r0,r4,#5              ;1187
0001dc  4611              MOV      r1,r2                 ;1187
0001de  f8511020          LDR      r1,[r1,r0,LSL #2]     ;1187
0001e2  1ca0              ADDS     r0,r4,#2              ;1187
0001e4  f8421020          STR      r1,[r2,r0,LSL #2]     ;1187
0001e8  1ef0              SUBS     r0,r6,#3              ;1188
0001ea  b286              UXTH     r6,r0                 ;1188
0001ec  1ce0              ADDS     r0,r4,#3              ;1189
0001ee  b284              UXTH     r4,r0                 ;1189
                  |L14.496|
0001f0  2e00              CMP      r6,#0                 ;1183
0001f2  d1e5              BNE      |L14.448|
0001f4  e175              B        |L14.1250|
                  |L14.502|
0001f6  f1b80f01          CMP      r8,#1                 ;1195
0001fa  d175              BNE      |L14.744|
0001fc  488b              LDR      r0,|L14.1068|
0001fe  8800              LDRH     r0,[r0,#0]            ;1197  ; CANAF_std_cnt
000200  b118              CBZ      r0,|L14.522|
000202  488a              LDR      r0,|L14.1068|
000204  8800              LDRH     r0,[r0,#0]            ;1197  ; CANAF_std_cnt
000206  4285              CMP      r5,r0                 ;1197
000208  db01              BLT      |L14.526|
                  |L14.522|
00020a  2007              MOVS     r0,#7                 ;1199
00020c  e73d              B        |L14.138|
                  |L14.526|
00020e  4886              LDR      r0,|L14.1064|
000210  8800              LDRH     r0,[r0,#0]            ;1203  ; CANAF_FullCAN_cnt
000212  1c40              ADDS     r0,r0,#1              ;1203
000214  1040              ASRS     r0,r0,#1              ;1203
000216  eb000065          ADD      r0,r0,r5,ASR #1       ;1203
00021a  b284              UXTH     r4,r0                 ;1203
00021c  4987              LDR      r1,|L14.1084|
00021e  f8519024          LDR      r9,[r1,r4,LSL #2]     ;1204
000222  4882              LDR      r0,|L14.1068|
000224  8800              LDRH     r0,[r0,#0]            ;1205  ; CANAF_std_cnt
000226  1b40              SUBS     r0,r0,r5              ;1205
000228  1e40              SUBS     r0,r0,#1              ;1205
00022a  f3c0064f          UBFX     r6,r0,#1,#16          ;1205
00022e  f0050001          AND      r0,r5,#1              ;1206
000232  b998              CBNZ     r0,|L14.604|
000234  e00c              B        |L14.592|
                  |L14.566|
000236  1c60              ADDS     r0,r4,#1              ;1211
000238  4980              LDR      r1,|L14.1084|
00023a  f8517020          LDR      r7,[r1,r0,LSL #2]     ;1211
00023e  0c38              LSRS     r0,r7,#16             ;1212
000240  ea404009          ORR      r0,r0,r9,LSL #16      ;1212
000244  460a              MOV      r2,r1                 ;1212
000246  f8420024          STR      r0,[r2,r4,LSL #2]     ;1212
00024a  46b9              MOV      r9,r7                 ;1213
00024c  1c60              ADDS     r0,r4,#1              ;1214
00024e  b284              UXTH     r4,r0                 ;1214
                  |L14.592|
000250  1e30              SUBS     r0,r6,#0              ;1208
000252  f1a60101          SUB      r1,r6,#1              ;1208
000256  b28e              UXTH     r6,r1                 ;1208
000258  d1ed              BNE      |L14.566|
00025a  e01c              B        |L14.662|
                  |L14.604|
00025c  e016              B        |L14.652|
                  |L14.606|
00025e  1c60              ADDS     r0,r4,#1              ;1222
000260  4976              LDR      r1,|L14.1084|
000262  f8517020          LDR      r7,[r1,r0,LSL #2]     ;1222
000266  ea4f4019          LSR      r0,r9,#16             ;1223
00026a  ea4f4000          LSL      r0,r0,#16             ;1223
00026e  ea404017          ORR      r0,r0,r7,LSR #16      ;1223
000272  460a              MOV      r2,r1                 ;1223
000274  f8420024          STR      r0,[r2,r4,LSL #2]     ;1223
000278  1c60              ADDS     r0,r4,#1              ;1224
00027a  f8510020          LDR      r0,[r1,r0,LSL #2]     ;1224
00027e  0401              LSLS     r1,r0,#16             ;1224
000280  1c60              ADDS     r0,r4,#1              ;1224
000282  f8421020          STR      r1,[r2,r0,LSL #2]     ;1224
000286  ea4f4907          LSL      r9,r7,#16             ;1225
00028a  b284              UXTH     r4,r0                 ;1226
                  |L14.652|
00028c  1e30              SUBS     r0,r6,#0              ;1219
00028e  f1a60101          SUB      r1,r6,#1              ;1219
000292  b28e              UXTH     r6,r1                 ;1219
000294  d1e3              BNE      |L14.606|
                  |L14.662|
000296  4865              LDR      r0,|L14.1068|
000298  7800              LDRB     r0,[r0,#0]            ;1229  ; CANAF_std_cnt
00029a  f0000001          AND      r0,r0,#1              ;1229
00029e  b990              CBNZ     r0,|L14.710|
0002a0  f0050001          AND      r0,r5,#1              ;1231
0002a4  b938              CBNZ     r0,|L14.694|
0002a6  f64f70ff          MOV      r0,#0xffff            ;1232
0002aa  eb004009          ADD      r0,r0,r9,LSL #16      ;1232
0002ae  4a63              LDR      r2,|L14.1084|
0002b0  f8420024          STR      r0,[r2,r4,LSL #2]     ;1232
0002b4  e03a              B        |L14.812|
                  |L14.694|
0002b6  f64f70ff          MOV      r0,#0xffff            ;1234
0002ba  ea490000          ORR      r0,r9,r0              ;1234
0002be  4a5f              LDR      r2,|L14.1084|
0002c0  f8420024          STR      r0,[r2,r4,LSL #2]     ;1234
0002c4  e032              B        |L14.812|
                  |L14.710|
0002c6  4858              LDR      r0,|L14.1064|
0002c8  8800              LDRH     r0,[r0,#0]            ;1239  ; CANAF_FullCAN_cnt
0002ca  1c40              ADDS     r0,r0,#1              ;1239
0002cc  1041              ASRS     r1,r0,#1              ;1239
0002ce  4857              LDR      r0,|L14.1068|
0002d0  8800              LDRH     r0,[r0,#0]            ;1239  ; CANAF_std_cnt
0002d2  1c40              ADDS     r0,r0,#1              ;1239
0002d4  eb010060          ADD      r0,r1,r0,ASR #1       ;1239
0002d8  b284              UXTH     r4,r0                 ;1239
0002da  4853              LDR      r0,|L14.1064|
0002dc  8800              LDRH     r0,[r0,#0]            ;1240  ; CANAF_FullCAN_cnt
0002de  eb000040          ADD      r0,r0,r0,LSL #1       ;1240
0002e2  4450              ADD      r0,r0,r10             ;1240
0002e4  b286              UXTH     r6,r0                 ;1240
0002e6  e009              B        |L14.764|
                  |L14.744|
0002e8  e026              B        |L14.824|
                  |L14.746|
0002ea  4954              LDR      r1,|L14.1084|
0002ec  f8511024          LDR      r1,[r1,r4,LSL #2]     ;1243
0002f0  1e60              SUBS     r0,r4,#1              ;1243
0002f2  4a52              LDR      r2,|L14.1084|
0002f4  f8421020          STR      r1,[r2,r0,LSL #2]     ;1243
0002f8  1c60              ADDS     r0,r4,#1              ;1244
0002fa  b284              UXTH     r4,r0                 ;1244
                  |L14.764|
0002fc  42a6              CMP      r6,r4                 ;1241
0002fe  dcf4              BGT      |L14.746|
000300  2100              MOVS     r1,#0                 ;1246
000302  1e60              SUBS     r0,r4,#1              ;1246
000304  4a4d              LDR      r2,|L14.1084|
000306  f8421020          STR      r1,[r2,r0,LSL #2]     ;1246
00030a  4846              LDR      r0,|L14.1060|
00030c  6880              LDR      r0,[r0,#8]            ;1248
00030e  1f00              SUBS     r0,r0,#4              ;1248
000310  4944              LDR      r1,|L14.1060|
000312  6088              STR      r0,[r1,#8]            ;1248
000314  4608              MOV      r0,r1                 ;1249
000316  68c0              LDR      r0,[r0,#0xc]          ;1249
000318  1f00              SUBS     r0,r0,#4              ;1249
00031a  60c8              STR      r0,[r1,#0xc]          ;1249
00031c  4608              MOV      r0,r1                 ;1250
00031e  6900              LDR      r0,[r0,#0x10]         ;1250
000320  1f00              SUBS     r0,r0,#4              ;1250
000322  6108              STR      r0,[r1,#0x10]         ;1250
000324  4608              MOV      r0,r1                 ;1251
000326  6940              LDR      r0,[r0,#0x14]         ;1251
000328  1f00              SUBS     r0,r0,#4              ;1251
00032a  6148              STR      r0,[r1,#0x14]         ;1251
                  |L14.812|
00032c  483f              LDR      r0,|L14.1068|
00032e  8800              LDRH     r0,[r0,#0]            ;1253  ; CANAF_std_cnt
000330  1e40              SUBS     r0,r0,#1              ;1253
000332  493e              LDR      r1,|L14.1068|
000334  8008              STRH     r0,[r1,#0]            ;1253
000336  e0d4              B        |L14.1250|
                  |L14.824|
000338  f1b80f02          CMP      r8,#2                 ;1258
00033c  d13e              BNE      |L14.956|
00033e  483c              LDR      r0,|L14.1072|
000340  8800              LDRH     r0,[r0,#0]            ;1260  ; CANAF_gstd_cnt
000342  b118              CBZ      r0,|L14.844|
000344  483a              LDR      r0,|L14.1072|
000346  8800              LDRH     r0,[r0,#0]            ;1260  ; CANAF_gstd_cnt
000348  4285              CMP      r5,r0                 ;1260
00034a  db01              BLT      |L14.848|
                  |L14.844|
00034c  2007              MOVS     r0,#7                 ;1262
00034e  e69c              B        |L14.138|
                  |L14.848|
000350  4835              LDR      r0,|L14.1064|
000352  8800              LDRH     r0,[r0,#0]            ;1266  ; CANAF_FullCAN_cnt
000354  1c40              ADDS     r0,r0,#1              ;1266
000356  1041              ASRS     r1,r0,#1              ;1266
000358  4834              LDR      r0,|L14.1068|
00035a  8800              LDRH     r0,[r0,#0]            ;1266  ; CANAF_std_cnt
00035c  1c40              ADDS     r0,r0,#1              ;1266
00035e  eb010060          ADD      r0,r1,r0,ASR #1       ;1266
000362  4428              ADD      r0,r0,r5              ;1266
000364  1c40              ADDS     r0,r0,#1              ;1266
000366  b284              UXTH     r4,r0                 ;1266
000368  482f              LDR      r0,|L14.1064|
00036a  8800              LDRH     r0,[r0,#0]            ;1267  ; CANAF_FullCAN_cnt
00036c  eb000040          ADD      r0,r0,r0,LSL #1       ;1267
000370  4450              ADD      r0,r0,r10             ;1267
000372  b286              UXTH     r6,r0                 ;1267
000374  e008              B        |L14.904|
                  |L14.886|
000376  4931              LDR      r1,|L14.1084|
000378  f8511024          LDR      r1,[r1,r4,LSL #2]     ;1270
00037c  1e60              SUBS     r0,r4,#1              ;1270
00037e  4a2f              LDR      r2,|L14.1084|
000380  f8421020          STR      r1,[r2,r0,LSL #2]     ;1270
000384  1c60              ADDS     r0,r4,#1              ;1271
000386  b284              UXTH     r4,r0                 ;1271
                  |L14.904|
000388  42b4              CMP      r4,r6                 ;1268
00038a  dbf4              BLT      |L14.886|
00038c  2100              MOVS     r1,#0                 ;1273
00038e  1e60              SUBS     r0,r4,#1              ;1273
000390  4a2a              LDR      r2,|L14.1084|
000392  f8421020          STR      r1,[r2,r0,LSL #2]     ;1273
000396  4826              LDR      r0,|L14.1072|
000398  8800              LDRH     r0,[r0,#0]            ;1275  ; CANAF_gstd_cnt
00039a  1e40              SUBS     r0,r0,#1              ;1275
00039c  4924              LDR      r1,|L14.1072|
00039e  8008              STRH     r0,[r1,#0]            ;1275
0003a0  4820              LDR      r0,|L14.1060|
0003a2  68c0              LDR      r0,[r0,#0xc]          ;1277
0003a4  1f00              SUBS     r0,r0,#4              ;1277
0003a6  491f              LDR      r1,|L14.1060|
0003a8  60c8              STR      r0,[r1,#0xc]          ;1277
0003aa  4608              MOV      r0,r1                 ;1278
0003ac  6900              LDR      r0,[r0,#0x10]         ;1278
0003ae  1f00              SUBS     r0,r0,#4              ;1278
0003b0  6108              STR      r0,[r1,#0x10]         ;1278
0003b2  4608              MOV      r0,r1                 ;1279
0003b4  6940              LDR      r0,[r0,#0x14]         ;1279
0003b6  1f00              SUBS     r0,r0,#4              ;1279
0003b8  6148              STR      r0,[r1,#0x14]         ;1279
0003ba  e092              B        |L14.1250|
                  |L14.956|
0003bc  f1b80f03          CMP      r8,#3                 ;1283
0003c0  d15d              BNE      |L14.1150|
0003c2  481c              LDR      r0,|L14.1076|
0003c4  8800              LDRH     r0,[r0,#0]            ;1285  ; CANAF_ext_cnt
0003c6  b118              CBZ      r0,|L14.976|
0003c8  481a              LDR      r0,|L14.1076|
0003ca  8800              LDRH     r0,[r0,#0]            ;1285  ; CANAF_ext_cnt
0003cc  4285              CMP      r5,r0                 ;1285
0003ce  db01              BLT      |L14.980|
                  |L14.976|
0003d0  2007              MOVS     r0,#7                 ;1287
0003d2  e65a              B        |L14.138|
                  |L14.980|
0003d4  4814              LDR      r0,|L14.1064|
0003d6  8800              LDRH     r0,[r0,#0]            ;1291  ; CANAF_FullCAN_cnt
0003d8  1c40              ADDS     r0,r0,#1              ;1291
0003da  1041              ASRS     r1,r0,#1              ;1291
0003dc  4813              LDR      r0,|L14.1068|
0003de  8800              LDRH     r0,[r0,#0]            ;1291  ; CANAF_std_cnt
0003e0  1c40              ADDS     r0,r0,#1              ;1291
0003e2  eb010060          ADD      r0,r1,r0,ASR #1       ;1291
0003e6  4912              LDR      r1,|L14.1072|
0003e8  8809              LDRH     r1,[r1,#0]            ;1291  ; CANAF_gstd_cnt
0003ea  4408              ADD      r0,r0,r1              ;1291
0003ec  4428              ADD      r0,r0,r5              ;1291
0003ee  1c40              ADDS     r0,r0,#1              ;1291
0003f0  b284              UXTH     r4,r0                 ;1291
0003f2  480d              LDR      r0,|L14.1064|
0003f4  8800              LDRH     r0,[r0,#0]            ;1292  ; CANAF_FullCAN_cnt
0003f6  eb000040          ADD      r0,r0,r0,LSL #1       ;1292
0003fa  4450              ADD      r0,r0,r10             ;1292
0003fc  b286              UXTH     r6,r0                 ;1292
0003fe  e028              B        |L14.1106|
                  |L14.1024|
000400  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
000404  44726976
000408  6572735c
00040c  736f7572
000410  63655c6c
000414  70633137
000418  78785f63
00041c  616e2e63
000420  00      
000421  00                DCB      0
000422  00                DCB      0
000423  00                DCB      0
                  |L14.1060|
                          DCD      0x4003c000
                  |L14.1064|
                          DCD      CANAF_FullCAN_cnt
                  |L14.1068|
                          DCD      CANAF_std_cnt
                  |L14.1072|
                          DCD      CANAF_gstd_cnt
                  |L14.1076|
                          DCD      CANAF_ext_cnt
                  |L14.1080|
                          DCD      CANAF_gext_cnt
                  |L14.1084|
                          DCD      0x40038000
                  |L14.1088|
000440  492a              LDR      r1,|L14.1260|
000442  f8511024          LDR      r1,[r1,r4,LSL #2]     ;1295
000446  1e60              SUBS     r0,r4,#1              ;1295
000448  4a28              LDR      r2,|L14.1260|
00044a  f8421020          STR      r1,[r2,r0,LSL #2]     ;1295
00044e  1c60              ADDS     r0,r4,#1              ;1296
000450  b284              UXTH     r4,r0                 ;1296
                  |L14.1106|
000452  42b4              CMP      r4,r6                 ;1293
000454  dbf4              BLT      |L14.1088|
000456  2100              MOVS     r1,#0                 ;1298
000458  1e60              SUBS     r0,r4,#1              ;1298
00045a  4a24              LDR      r2,|L14.1260|
00045c  f8421020          STR      r1,[r2,r0,LSL #2]     ;1298
000460  4823              LDR      r0,|L14.1264|
000462  8800              LDRH     r0,[r0,#0]            ;1300  ; CANAF_ext_cnt
000464  1e40              SUBS     r0,r0,#1              ;1300
000466  4922              LDR      r1,|L14.1264|
000468  8008              STRH     r0,[r1,#0]            ;1300
00046a  4822              LDR      r0,|L14.1268|
00046c  6900              LDR      r0,[r0,#0x10]         ;1301
00046e  1f00              SUBS     r0,r0,#4              ;1301
000470  4920              LDR      r1,|L14.1268|
000472  6108              STR      r0,[r1,#0x10]         ;1301
000474  4608              MOV      r0,r1                 ;1302
000476  6940              LDR      r0,[r0,#0x14]         ;1302
000478  1f00              SUBS     r0,r0,#4              ;1302
00047a  6148              STR      r0,[r1,#0x14]         ;1302
00047c  e031              B        |L14.1250|
                  |L14.1150|
00047e  481e              LDR      r0,|L14.1272|
000480  8800              LDRH     r0,[r0,#0]            ;1308  ; CANAF_gext_cnt
000482  b118              CBZ      r0,|L14.1164|
000484  481c              LDR      r0,|L14.1272|
000486  8800              LDRH     r0,[r0,#0]            ;1308  ; CANAF_gext_cnt
000488  4285              CMP      r5,r0                 ;1308
00048a  db01              BLT      |L14.1168|
                  |L14.1164|
00048c  2007              MOVS     r0,#7                 ;1310
00048e  e5fc              B        |L14.138|
                  |L14.1168|
000490  4819              LDR      r0,|L14.1272|
000492  8800              LDRH     r0,[r0,#0]            ;1314  ; CANAF_gext_cnt
000494  ebaa0040          SUB      r0,r10,r0,LSL #1      ;1314
000498  eb000045          ADD      r0,r0,r5,LSL #1       ;1314
00049c  b284              UXTH     r4,r0                 ;1314
00049e  4817              LDR      r0,|L14.1276|
0004a0  8800              LDRH     r0,[r0,#0]            ;1315  ; CANAF_FullCAN_cnt
0004a2  eb000040          ADD      r0,r0,r0,LSL #1       ;1315
0004a6  4450              ADD      r0,r0,r10             ;1315
0004a8  b286              UXTH     r6,r0                 ;1315
0004aa  e00e              B        |L14.1226|
                  |L14.1196|
0004ac  1ca0              ADDS     r0,r4,#2              ;1319
0004ae  490f              LDR      r1,|L14.1260|
0004b0  f8510020          LDR      r0,[r1,r0,LSL #2]     ;1319
0004b4  460a              MOV      r2,r1                 ;1319
0004b6  f8420024          STR      r0,[r2,r4,LSL #2]     ;1319
0004ba  1ce0              ADDS     r0,r4,#3              ;1320
0004bc  f8511020          LDR      r1,[r1,r0,LSL #2]     ;1320
0004c0  1c60              ADDS     r0,r4,#1              ;1320
0004c2  f8421020          STR      r1,[r2,r0,LSL #2]     ;1320
0004c6  1ca0              ADDS     r0,r4,#2              ;1321
0004c8  b284              UXTH     r4,r0                 ;1321
                  |L14.1226|
0004ca  42b4              CMP      r4,r6                 ;1316
0004cc  dbee              BLT      |L14.1196|
0004ce  480a              LDR      r0,|L14.1272|
0004d0  8800              LDRH     r0,[r0,#0]            ;1324  ; CANAF_gext_cnt
0004d2  1e40              SUBS     r0,r0,#1              ;1324
0004d4  4908              LDR      r1,|L14.1272|
0004d6  8008              STRH     r0,[r1,#0]            ;1324
0004d8  4806              LDR      r0,|L14.1268|
0004da  6940              LDR      r0,[r0,#0x14]         ;1325
0004dc  3808              SUBS     r0,r0,#8              ;1325
0004de  4905              LDR      r1,|L14.1268|
0004e0  6148              STR      r0,[r1,#0x14]         ;1325
                  |L14.1250|
0004e2  2004              MOVS     r0,#4                 ;1327
0004e4  4903              LDR      r1,|L14.1268|
0004e6  6008              STR      r0,[r1,#0]            ;1327
0004e8  2001              MOVS     r0,#1                 ;1328
0004ea  e5ce              B        |L14.138|
;;;1330   
                          ENDP

                  |L14.1260|
                          DCD      0x40038000
                  |L14.1264|
                          DCD      CANAF_ext_cnt
                  |L14.1268|
                          DCD      0x4003c000
                  |L14.1272|
                          DCD      CANAF_gext_cnt
                  |L14.1276|
                          DCD      CANAF_FullCAN_cnt

                          AREA ||i.CAN_SendMsg||, CODE, READONLY, ALIGN=2

                  CAN_SendMsg PROC
;;;1341    *********************************************************************/
;;;1342   Status CAN_SendMsg (LPC_CAN_TypeDef *CANx, CAN_MSG_Type *CAN_Msg)
000000  b570              PUSH     {r4-r6,lr}
;;;1343   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1344   	uint32_t data;
;;;1345   	CHECK_PARAM(PARAM_CANx(CANx));
000006  4884              LDR      r0,|L15.536|
000008  4284              CMP      r4,r0
00000a  d002              BEQ      |L15.18|
00000c  4883              LDR      r0,|L15.540|
00000e  4284              CMP      r4,r0
000010  d100              BNE      |L15.20|
                  |L15.18|
000012  e004              B        |L15.30|
                  |L15.20|
000014  f2405141          MOV      r1,#0x541
000018  a081              ADR      r0,|L15.544|
00001a  f7fffffe          BL       check_failed
                  |L15.30|
;;;1346   	CHECK_PARAM(PARAM_ID_FORMAT(CAN_Msg->format));
00001e  7b68              LDRB     r0,[r5,#0xd]
000020  b110              CBZ      r0,|L15.40|
000022  7b68              LDRB     r0,[r5,#0xd]
000024  2801              CMP      r0,#1
000026  d100              BNE      |L15.42|
                  |L15.40|
000028  e004              B        |L15.52|
                  |L15.42|
00002a  f2405142          MOV      r1,#0x542
00002e  a07c              ADR      r0,|L15.544|
000030  f7fffffe          BL       check_failed
                  |L15.52|
;;;1347   	if(CAN_Msg->format==STD_ID_FORMAT)
000034  7b68              LDRB     r0,[r5,#0xd]
000036  b948              CBNZ     r0,|L15.76|
;;;1348   	{
;;;1349   		CHECK_PARAM(PARAM_ID_11(CAN_Msg->id));
000038  6828              LDR      r0,[r5,#0]
00003a  0ac0              LSRS     r0,r0,#11
00003c  b900              CBNZ     r0,|L15.64|
00003e  e00e              B        |L15.94|
                  |L15.64|
000040  f2405145          MOV      r1,#0x545
000044  a076              ADR      r0,|L15.544|
000046  f7fffffe          BL       check_failed
00004a  e008              B        |L15.94|
                  |L15.76|
;;;1350   	}
;;;1351   	else
;;;1352   	{
;;;1353   		CHECK_PARAM(PARAM_ID_29(CAN_Msg->id));
00004c  6828              LDR      r0,[r5,#0]
00004e  0f40              LSRS     r0,r0,#29
000050  b900              CBNZ     r0,|L15.84|
000052  e004              B        |L15.94|
                  |L15.84|
000054  f2405149          MOV      r1,#0x549
000058  a071              ADR      r0,|L15.544|
00005a  f7fffffe          BL       check_failed
                  |L15.94|
;;;1354   	}
;;;1355   	CHECK_PARAM(PARAM_DLC(CAN_Msg->len));
00005e  7b28              LDRB     r0,[r5,#0xc]
000060  1100              ASRS     r0,r0,#4
000062  b900              CBNZ     r0,|L15.102|
000064  e004              B        |L15.112|
                  |L15.102|
000066  f240514b          MOV      r1,#0x54b
00006a  a06d              ADR      r0,|L15.544|
00006c  f7fffffe          BL       check_failed
                  |L15.112|
;;;1356   	CHECK_PARAM(PARAM_FRAME_TYPE(CAN_Msg->type));
000070  7ba8              LDRB     r0,[r5,#0xe]
000072  b110              CBZ      r0,|L15.122|
000074  7ba8              LDRB     r0,[r5,#0xe]
000076  2801              CMP      r0,#1
000078  d100              BNE      |L15.124|
                  |L15.122|
00007a  e004              B        |L15.134|
                  |L15.124|
00007c  f240514c          MOV      r1,#0x54c
000080  a067              ADR      r0,|L15.544|
000082  f7fffffe          BL       check_failed
                  |L15.134|
;;;1357   
;;;1358   	//Check status of Transmit Buffer 1
;;;1359   	if (CANx->SR & (1<<2))
000086  69e0              LDR      r0,[r4,#0x1c]
000088  f0000004          AND      r0,r0,#4
00008c  b3e0              CBZ      r0,|L15.264|
;;;1360   	{
;;;1361   		/* Transmit Channel 1 is available */
;;;1362   		/* Write frame informations and frame data into its CANxTFI1,
;;;1363   		 * CANxTID1, CANxTDA1, CANxTDB1 register */
;;;1364   		CANx->TFI1 &= ~0x000F0000;
00008e  6b20              LDR      r0,[r4,#0x30]
000090  f4202070          BIC      r0,r0,#0xf0000
000094  6320              STR      r0,[r4,#0x30]
;;;1365   		CANx->TFI1 |= (CAN_Msg->len)<<16;
000096  6b20              LDR      r0,[r4,#0x30]
000098  7b29              LDRB     r1,[r5,#0xc]
00009a  ea404001          ORR      r0,r0,r1,LSL #16
00009e  6320              STR      r0,[r4,#0x30]
;;;1366   		if(CAN_Msg->type == REMOTE_FRAME)
0000a0  7ba8              LDRB     r0,[r5,#0xe]
0000a2  2801              CMP      r0,#1
0000a4  d104              BNE      |L15.176|
;;;1367   		{
;;;1368   			CANx->TFI1 |= (1<<30); //set bit RTR
0000a6  6b20              LDR      r0,[r4,#0x30]
0000a8  f0404080          ORR      r0,r0,#0x40000000
0000ac  6320              STR      r0,[r4,#0x30]
0000ae  e003              B        |L15.184|
                  |L15.176|
;;;1369   		}
;;;1370   		else
;;;1371   		{
;;;1372   			CANx->TFI1 &= ~(1<<30);
0000b0  6b20              LDR      r0,[r4,#0x30]
0000b2  f0204080          BIC      r0,r0,#0x40000000
0000b6  6320              STR      r0,[r4,#0x30]
                  |L15.184|
;;;1373   		}
;;;1374   		if(CAN_Msg->format == EXT_ID_FORMAT)
0000b8  7b68              LDRB     r0,[r5,#0xd]
0000ba  2801              CMP      r0,#1
0000bc  d104              BNE      |L15.200|
;;;1375   		{
;;;1376   			CANx->TFI1 |= (0x80000000); //set bit FF
0000be  6b20              LDR      r0,[r4,#0x30]
0000c0  f0404000          ORR      r0,r0,#0x80000000
0000c4  6320              STR      r0,[r4,#0x30]
0000c6  e003              B        |L15.208|
                  |L15.200|
;;;1377   		}
;;;1378   		else
;;;1379   		{
;;;1380   			CANx->TFI1 &= ~(0x80000000);
0000c8  6b20              LDR      r0,[r4,#0x30]
0000ca  f0204000          BIC      r0,r0,#0x80000000
0000ce  6320              STR      r0,[r4,#0x30]
                  |L15.208|
;;;1381   		}
;;;1382   
;;;1383   		/* Write CAN ID*/
;;;1384   		CANx->TID1 = CAN_Msg->id;
0000d0  6828              LDR      r0,[r5,#0]
0000d2  6360              STR      r0,[r4,#0x34]
;;;1385   
;;;1386   		/*Write first 4 data bytes*/
;;;1387   		data = (CAN_Msg->dataA[0])|(((CAN_Msg->dataA[1]))<<8)|((CAN_Msg->dataA[2])<<16)|((CAN_Msg->dataA[3])<<24);
0000d4  7929              LDRB     r1,[r5,#4]
0000d6  7968              LDRB     r0,[r5,#5]
0000d8  ea412100          ORR      r1,r1,r0,LSL #8
0000dc  79a8              LDRB     r0,[r5,#6]
0000de  ea414100          ORR      r1,r1,r0,LSL #16
0000e2  79e8              LDRB     r0,[r5,#7]
0000e4  ea416600          ORR      r6,r1,r0,LSL #24
;;;1388   		CANx->TDA1 = data;
0000e8  63a6              STR      r6,[r4,#0x38]
;;;1389   
;;;1390   		/*Write second 4 data bytes*/
;;;1391   		data = (CAN_Msg->dataB[0])|(((CAN_Msg->dataB[1]))<<8)|((CAN_Msg->dataB[2])<<16)|((CAN_Msg->dataB[3])<<24);
0000ea  7a29              LDRB     r1,[r5,#8]
0000ec  7a68              LDRB     r0,[r5,#9]
0000ee  ea412100          ORR      r1,r1,r0,LSL #8
0000f2  7aa8              LDRB     r0,[r5,#0xa]
0000f4  ea414100          ORR      r1,r1,r0,LSL #16
0000f8  7ae8              LDRB     r0,[r5,#0xb]
0000fa  ea416600          ORR      r6,r1,r0,LSL #24
;;;1392   		CANx->TDB1 = data;
0000fe  63e6              STR      r6,[r4,#0x3c]
;;;1393   
;;;1394   		 /*Write transmission request*/
;;;1395   		 CANx->CMR = 0x21;
000100  2021              MOVS     r0,#0x21
000102  6060              STR      r0,[r4,#4]
;;;1396   		 return SUCCESS;
000104  2001              MOVS     r0,#1
                  |L15.262|
;;;1397   	}
;;;1398   	//check status of Transmit Buffer 2
;;;1399   	else if(CANx->SR & (1<<10))
;;;1400   	{
;;;1401   		/* Transmit Channel 2 is available */
;;;1402   		/* Write frame informations and frame data into its CANxTFI2,
;;;1403   		 * CANxTID2, CANxTDA2, CANxTDB2 register */
;;;1404   		CANx->TFI2 &= ~0x000F0000;
;;;1405   		CANx->TFI2 |= (CAN_Msg->len)<<16;
;;;1406   		if(CAN_Msg->type == REMOTE_FRAME)
;;;1407   		{
;;;1408   			CANx->TFI2 |= (1<<30); //set bit RTR
;;;1409   		}
;;;1410   		else
;;;1411   		{
;;;1412   			CANx->TFI2 &= ~(1<<30);
;;;1413   		}
;;;1414   		if(CAN_Msg->format == EXT_ID_FORMAT)
;;;1415   		{
;;;1416   			CANx->TFI2 |= (0x80000000); //set bit FF
;;;1417   		}
;;;1418   		else
;;;1419   		{
;;;1420   			CANx->TFI2 &= ~(0x80000000);
;;;1421   		}
;;;1422   
;;;1423   		/* Write CAN ID*/
;;;1424   		CANx->TID2 = CAN_Msg->id;
;;;1425   
;;;1426   		/*Write first 4 data bytes*/
;;;1427   		data = (CAN_Msg->dataA[0])|(((CAN_Msg->dataA[1]))<<8)|((CAN_Msg->dataA[2])<<16)|((CAN_Msg->dataA[3])<<24);
;;;1428   		CANx->TDA2 = data;
;;;1429   
;;;1430   		/*Write second 4 data bytes*/
;;;1431   		data = (CAN_Msg->dataB[0])|(((CAN_Msg->dataB[1]))<<8)|((CAN_Msg->dataB[2])<<16)|((CAN_Msg->dataB[3])<<24);
;;;1432   		CANx->TDB2 = data;
;;;1433   
;;;1434   		/*Write transmission request*/
;;;1435   		CANx->CMR = 0x41;
;;;1436   		return SUCCESS;
;;;1437   	}
;;;1438   	//check status of Transmit Buffer 3
;;;1439   	else if (CANx->SR & (1<<18))
;;;1440   	{
;;;1441   		/* Transmit Channel 3 is available */
;;;1442   		/* Write frame informations and frame data into its CANxTFI3,
;;;1443   		 * CANxTID3, CANxTDA3, CANxTDB3 register */
;;;1444   		CANx->TFI3 &= ~0x000F0000;
;;;1445   		CANx->TFI3 |= (CAN_Msg->len)<<16;
;;;1446   		if(CAN_Msg->type == REMOTE_FRAME)
;;;1447   		{
;;;1448   			CANx->TFI3 |= (1<<30); //set bit RTR
;;;1449   		}
;;;1450   		else
;;;1451   		{
;;;1452   			CANx->TFI3 &= ~(1<<30);
;;;1453   		}
;;;1454   		if(CAN_Msg->format == EXT_ID_FORMAT)
;;;1455   		{
;;;1456   			CANx->TFI3 |= (0x80000000); //set bit FF
;;;1457   		}
;;;1458   		else
;;;1459   		{
;;;1460   			CANx->TFI3 &= ~(0x80000000);
;;;1461   		}
;;;1462   
;;;1463   		/* Write CAN ID*/
;;;1464   		CANx->TID3 = CAN_Msg->id;
;;;1465   
;;;1466   		/*Write first 4 data bytes*/
;;;1467   		data = (CAN_Msg->dataA[0])|(((CAN_Msg->dataA[1]))<<8)|((CAN_Msg->dataA[2])<<16)|((CAN_Msg->dataA[3])<<24);
;;;1468   		CANx->TDA3 = data;
;;;1469   
;;;1470   		/*Write second 4 data bytes*/
;;;1471   		data = (CAN_Msg->dataB[0])|(((CAN_Msg->dataB[1]))<<8)|((CAN_Msg->dataB[2])<<16)|((CAN_Msg->dataB[3])<<24);
;;;1472   		CANx->TDB3 = data;
;;;1473   
;;;1474   		/*Write transmission request*/
;;;1475   		CANx->CMR = 0x81;
;;;1476   		return SUCCESS;
;;;1477   	}
;;;1478   	else
;;;1479   	{
;;;1480   		return ERROR;
;;;1481   	}
;;;1482   }
000106  bd70              POP      {r4-r6,pc}
                  |L15.264|
000108  e7ff              B        |L15.266|
                  |L15.266|
00010a  69e0              LDR      r0,[r4,#0x1c]         ;1399
00010c  f4006080          AND      r0,r0,#0x400          ;1399
000110  b3e0              CBZ      r0,|L15.396|
000112  6c20              LDR      r0,[r4,#0x40]         ;1404
000114  f4202070          BIC      r0,r0,#0xf0000        ;1404
000118  6420              STR      r0,[r4,#0x40]         ;1404
00011a  6c20              LDR      r0,[r4,#0x40]         ;1405
00011c  7b29              LDRB     r1,[r5,#0xc]          ;1405
00011e  ea404001          ORR      r0,r0,r1,LSL #16      ;1405
000122  6420              STR      r0,[r4,#0x40]         ;1405
000124  7ba8              LDRB     r0,[r5,#0xe]          ;1406
000126  2801              CMP      r0,#1                 ;1406
000128  d104              BNE      |L15.308|
00012a  6c20              LDR      r0,[r4,#0x40]         ;1408
00012c  f0404080          ORR      r0,r0,#0x40000000     ;1408
000130  6420              STR      r0,[r4,#0x40]         ;1408
000132  e003              B        |L15.316|
                  |L15.308|
000134  6c20              LDR      r0,[r4,#0x40]         ;1412
000136  f0204080          BIC      r0,r0,#0x40000000     ;1412
00013a  6420              STR      r0,[r4,#0x40]         ;1412
                  |L15.316|
00013c  7b68              LDRB     r0,[r5,#0xd]          ;1414
00013e  2801              CMP      r0,#1                 ;1414
000140  d104              BNE      |L15.332|
000142  6c20              LDR      r0,[r4,#0x40]         ;1416
000144  f0404000          ORR      r0,r0,#0x80000000     ;1416
000148  6420              STR      r0,[r4,#0x40]         ;1416
00014a  e003              B        |L15.340|
                  |L15.332|
00014c  6c20              LDR      r0,[r4,#0x40]         ;1420
00014e  f0204000          BIC      r0,r0,#0x80000000     ;1420
000152  6420              STR      r0,[r4,#0x40]         ;1420
                  |L15.340|
000154  6828              LDR      r0,[r5,#0]            ;1424
000156  6460              STR      r0,[r4,#0x44]         ;1424
000158  7929              LDRB     r1,[r5,#4]            ;1427
00015a  7968              LDRB     r0,[r5,#5]            ;1427
00015c  ea412100          ORR      r1,r1,r0,LSL #8       ;1427
000160  79a8              LDRB     r0,[r5,#6]            ;1427
000162  ea414100          ORR      r1,r1,r0,LSL #16      ;1427
000166  79e8              LDRB     r0,[r5,#7]            ;1427
000168  ea416600          ORR      r6,r1,r0,LSL #24      ;1427
00016c  64a6              STR      r6,[r4,#0x48]         ;1428
00016e  7a29              LDRB     r1,[r5,#8]            ;1431
000170  7a68              LDRB     r0,[r5,#9]            ;1431
000172  ea412100          ORR      r1,r1,r0,LSL #8       ;1431
000176  7aa8              LDRB     r0,[r5,#0xa]          ;1431
000178  ea414100          ORR      r1,r1,r0,LSL #16      ;1431
00017c  7ae8              LDRB     r0,[r5,#0xb]          ;1431
00017e  ea416600          ORR      r6,r1,r0,LSL #24      ;1431
000182  64e6              STR      r6,[r4,#0x4c]         ;1432
000184  2041              MOVS     r0,#0x41              ;1435
000186  6060              STR      r0,[r4,#4]            ;1435
000188  2001              MOVS     r0,#1                 ;1436
00018a  e7bc              B        |L15.262|
                  |L15.396|
00018c  e7ff              B        |L15.398|
                  |L15.398|
00018e  69e0              LDR      r0,[r4,#0x1c]         ;1439
000190  f4002080          AND      r0,r0,#0x40000        ;1439
000194  b3e0              CBZ      r0,|L15.528|
000196  6d20              LDR      r0,[r4,#0x50]         ;1444
000198  f4202070          BIC      r0,r0,#0xf0000        ;1444
00019c  6520              STR      r0,[r4,#0x50]         ;1444
00019e  6d20              LDR      r0,[r4,#0x50]         ;1445
0001a0  7b29              LDRB     r1,[r5,#0xc]          ;1445
0001a2  ea404001          ORR      r0,r0,r1,LSL #16      ;1445
0001a6  6520              STR      r0,[r4,#0x50]         ;1445
0001a8  7ba8              LDRB     r0,[r5,#0xe]          ;1446
0001aa  2801              CMP      r0,#1                 ;1446
0001ac  d104              BNE      |L15.440|
0001ae  6d20              LDR      r0,[r4,#0x50]         ;1448
0001b0  f0404080          ORR      r0,r0,#0x40000000     ;1448
0001b4  6520              STR      r0,[r4,#0x50]         ;1448
0001b6  e003              B        |L15.448|
                  |L15.440|
0001b8  6d20              LDR      r0,[r4,#0x50]         ;1452
0001ba  f0204080          BIC      r0,r0,#0x40000000     ;1452
0001be  6520              STR      r0,[r4,#0x50]         ;1452
                  |L15.448|
0001c0  7b68              LDRB     r0,[r5,#0xd]          ;1454
0001c2  2801              CMP      r0,#1                 ;1454
0001c4  d104              BNE      |L15.464|
0001c6  6d20              LDR      r0,[r4,#0x50]         ;1456
0001c8  f0404000          ORR      r0,r0,#0x80000000     ;1456
0001cc  6520              STR      r0,[r4,#0x50]         ;1456
0001ce  e003              B        |L15.472|
                  |L15.464|
0001d0  6d20              LDR      r0,[r4,#0x50]         ;1460
0001d2  f0204000          BIC      r0,r0,#0x80000000     ;1460
0001d6  6520              STR      r0,[r4,#0x50]         ;1460
                  |L15.472|
0001d8  6828              LDR      r0,[r5,#0]            ;1464
0001da  6560              STR      r0,[r4,#0x54]         ;1464
0001dc  7929              LDRB     r1,[r5,#4]            ;1467
0001de  7968              LDRB     r0,[r5,#5]            ;1467
0001e0  ea412100          ORR      r1,r1,r0,LSL #8       ;1467
0001e4  79a8              LDRB     r0,[r5,#6]            ;1467
0001e6  ea414100          ORR      r1,r1,r0,LSL #16      ;1467
0001ea  79e8              LDRB     r0,[r5,#7]            ;1467
0001ec  ea416600          ORR      r6,r1,r0,LSL #24      ;1467
0001f0  65a6              STR      r6,[r4,#0x58]         ;1468
0001f2  7a29              LDRB     r1,[r5,#8]            ;1471
0001f4  7a68              LDRB     r0,[r5,#9]            ;1471
0001f6  ea412100          ORR      r1,r1,r0,LSL #8       ;1471
0001fa  7aa8              LDRB     r0,[r5,#0xa]          ;1471
0001fc  ea414100          ORR      r1,r1,r0,LSL #16      ;1471
000200  7ae8              LDRB     r0,[r5,#0xb]          ;1471
000202  ea416600          ORR      r6,r1,r0,LSL #24      ;1471
000206  65e6              STR      r6,[r4,#0x5c]         ;1472
000208  2081              MOVS     r0,#0x81              ;1475
00020a  6060              STR      r0,[r4,#4]            ;1475
00020c  2001              MOVS     r0,#1                 ;1476
00020e  e77a              B        |L15.262|
                  |L15.528|
000210  e7ff              B        |L15.530|
                  |L15.530|
000212  2000              MOVS     r0,#0                 ;1480
000214  e777              B        |L15.262|
;;;1483   
                          ENDP

000216  0000              DCW      0x0000
                  |L15.536|
                          DCD      0x40044000
                  |L15.540|
                          DCD      0x40048000
                  |L15.544|
000220  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
000224  44726976
000228  6572735c
00022c  736f7572
000230  63655c6c
000234  70633137
000238  78785f63
00023c  616e2e63
000240  00      
000241  00                DCB      0
000242  00                DCB      0
000243  00                DCB      0

                          AREA ||i.CAN_SetAFMode||, CODE, READONLY, ALIGN=2

                  CAN_SetAFMode PROC
;;;1758    *********************************************************************/
;;;1759   void CAN_SetAFMode (LPC_CANAF_TypeDef* CANAFx, CAN_AFMODE_Type AFMode)
000000  b570              PUSH     {r4-r6,lr}
;;;1760   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1761   	CHECK_PARAM(PARAM_CANAFx(CANAFx));
000006  4816              LDR      r0,|L16.96|
000008  4285              CMP      r5,r0
00000a  d100              BNE      |L16.14|
00000c  e004              B        |L16.24|
                  |L16.14|
00000e  f24061e1          MOV      r1,#0x6e1
000012  a014              ADR      r0,|L16.100|
000014  f7fffffe          BL       check_failed
                  |L16.24|
;;;1762   	CHECK_PARAM(PARAM_AFMODE_TYPE(AFMode));
000018  b12c              CBZ      r4,|L16.38|
00001a  2c01              CMP      r4,#1
00001c  d003              BEQ      |L16.38|
00001e  2c02              CMP      r4,#2
000020  d001              BEQ      |L16.38|
000022  2c03              CMP      r4,#3
000024  d100              BNE      |L16.40|
                  |L16.38|
000026  e004              B        |L16.50|
                  |L16.40|
000028  f24061e2          MOV      r1,#0x6e2
00002c  a00d              ADR      r0,|L16.100|
00002e  f7fffffe          BL       check_failed
                  |L16.50|
;;;1763   
;;;1764   	switch(AFMode)
000032  b134              CBZ      r4,|L16.66|
000034  2c01              CMP      r4,#1
000036  d007              BEQ      |L16.72|
000038  2c02              CMP      r4,#2
00003a  d008              BEQ      |L16.78|
00003c  2c03              CMP      r4,#3
00003e  d10c              BNE      |L16.90|
000040  e008              B        |L16.84|
                  |L16.66|
;;;1765   	{
;;;1766   	case CAN_Normal:
;;;1767   		CANAFx->AFMR = 0x00;
000042  2000              MOVS     r0,#0
000044  6028              STR      r0,[r5,#0]
;;;1768   		break;
000046  e008              B        |L16.90|
                  |L16.72|
;;;1769   	case CAN_AccOff:
;;;1770   		CANAFx->AFMR = 0x01;
000048  2001              MOVS     r0,#1
00004a  6028              STR      r0,[r5,#0]
;;;1771   		break;
00004c  e005              B        |L16.90|
                  |L16.78|
;;;1772   	case CAN_AccBP:
;;;1773   		CANAFx->AFMR = 0x02;
00004e  2002              MOVS     r0,#2
000050  6028              STR      r0,[r5,#0]
;;;1774   		break;
000052  e002              B        |L16.90|
                  |L16.84|
;;;1775   	case CAN_eFCAN:
;;;1776   		CANAFx->AFMR = 0x04;
000054  2004              MOVS     r0,#4
000056  6028              STR      r0,[r5,#0]
;;;1777   		break;
000058  bf00              NOP      
                  |L16.90|
00005a  bf00              NOP                            ;1768
;;;1778   	}
;;;1779   }
00005c  bd70              POP      {r4-r6,pc}
;;;1780   
                          ENDP

00005e  0000              DCW      0x0000
                  |L16.96|
                          DCD      0x4003c000
                  |L16.100|
000064  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
000068  44726976
00006c  6572735c
000070  736f7572
000074  63655c6c
000078  70633137
00007c  78785f63
000080  616e2e63
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.CAN_SetCommand||, CODE, READONLY, ALIGN=2

                  CAN_SetCommand PROC
;;;1874    **********************************************************************/
;;;1875   void CAN_SetCommand(LPC_CAN_TypeDef* CANx, uint32_t CMRType)
000000  b570              PUSH     {r4-r6,lr}
;;;1876   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1877   	CHECK_PARAM(PARAM_CANx(CANx));
000006  4808              LDR      r0,|L17.40|
000008  4284              CMP      r4,r0
00000a  d002              BEQ      |L17.18|
00000c  4807              LDR      r0,|L17.44|
00000e  4284              CMP      r4,r0
000010  d100              BNE      |L17.20|
                  |L17.18|
000012  e004              B        |L17.30|
                  |L17.20|
000014  f2407155          MOV      r1,#0x755
000018  a005              ADR      r0,|L17.48|
00001a  f7fffffe          BL       check_failed
                  |L17.30|
;;;1878   	CANx->CMR |= CMRType;
00001e  6860              LDR      r0,[r4,#4]
000020  4328              ORRS     r0,r0,r5
000022  6060              STR      r0,[r4,#4]
;;;1879   }
000024  bd70              POP      {r4-r6,pc}
;;;1880   
                          ENDP

000026  0000              DCW      0x0000
                  |L17.40|
                          DCD      0x40044000
                  |L17.44|
                          DCD      0x40048000
                  |L17.48|
000030  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
000034  44726976
000038  6572735c
00003c  736f7572
000040  63655c6c
000044  70633137
000048  78785f63
00004c  616e2e63
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.CAN_SetupAFLUT||, CODE, READONLY, ALIGN=2

                  CAN_SetupAFLUT PROC
;;;231     *********************************************************************/
;;;232    CAN_ERROR CAN_SetupAFLUT(LPC_CANAF_TypeDef* CANAFx, AF_SectionDef* AFSection)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;233    {
000004  b089              SUB      sp,sp,#0x24
000006  460c              MOV      r4,r1
;;;234    	uint8_t ctrl1,ctrl2;
;;;235    	uint8_t dis1, dis2;
;;;236    	uint16_t SID, ID_temp,i, count = 0;
000008  2500              MOVS     r5,#0
;;;237    	uint32_t EID, entry, buf;
;;;238    	uint16_t lowerSID, upperSID;
;;;239    	uint32_t lowerEID, upperEID;
;;;240    
;;;241    	CHECK_PARAM(PARAM_CANAFx(CANAFx));
00000a  49fa              LDR      r1,|L18.1012|
00000c  9809              LDR      r0,[sp,#0x24]
00000e  4288              CMP      r0,r1
000010  d100              BNE      |L18.20|
000012  e003              B        |L18.28|
                  |L18.20|
000014  21f1              MOVS     r1,#0xf1
000016  a0f8              ADR      r0,|L18.1016|
000018  f7fffffe          BL       check_failed
                  |L18.28|
;;;242    	CANAFx->AFMR = 0x01;
00001c  2101              MOVS     r1,#1
00001e  9809              LDR      r0,[sp,#0x24]
000020  6001              STR      r1,[r0,#0]
;;;243    
;;;244    /***** setup FullCAN Table *****/
;;;245    	if(AFSection->FullCAN_Sec == NULL)
000022  6820              LDR      r0,[r4,#0]
000024  b918              CBNZ     r0,|L18.46|
;;;246    	{
;;;247    		FULLCAN_ENABLE = DISABLE;
000026  2000              MOVS     r0,#0
000028  49fc              LDR      r1,|L18.1052|
00002a  7008              STRB     r0,[r1,#0]
00002c  e0b0              B        |L18.400|
                  |L18.46|
;;;248    	}
;;;249    	else
;;;250    	{
;;;251    		FULLCAN_ENABLE = ENABLE;
00002e  2001              MOVS     r0,#1
000030  49fa              LDR      r1,|L18.1052|
000032  7008              STRB     r0,[r1,#0]
;;;252    		for(i=0;i<(AFSection->FC_NumEntry);i++)
000034  f04f0900          MOV      r9,#0
000038  e0a6              B        |L18.392|
                  |L18.58|
;;;253    		{
;;;254    			if(count + 1 > 64)
00003a  1c68              ADDS     r0,r5,#1
00003c  2840              CMP      r0,#0x40
00003e  dd03              BLE      |L18.72|
;;;255    			{
;;;256    				return CAN_OBJECTS_FULL_ERROR;
000040  2002              MOVS     r0,#2
                  |L18.66|
;;;257    			}
;;;258    			ctrl1 = AFSection->FullCAN_Sec->controller;
;;;259    			SID = AFSection->FullCAN_Sec->id_11;
;;;260    			dis1 = AFSection->FullCAN_Sec->disable;
;;;261    
;;;262    			CHECK_PARAM(PARAM_CTRL(ctrl1));
;;;263    			CHECK_PARAM(PARAM_ID_11(SID));
;;;264    			CHECK_PARAM(PARAM_MSG_DISABLE(dis1));
;;;265    			entry = 0x00; //reset entry value
;;;266    			if((CANAF_FullCAN_cnt & 0x00000001)==0)
;;;267    			{
;;;268    				if(count!=0x00)
;;;269    				{
;;;270    					buf = LPC_CANAF_RAM->mask[count-1];
;;;271    					ID_temp = (buf & 0xE7FF); //mask controller & identifier bits
;;;272    					if(ID_temp > ((ctrl1<<13)|SID))
;;;273    					{
;;;274    						return CAN_AF_ENTRY_ERROR;
;;;275    					}
;;;276    				}
;;;277    				entry = (ctrl1<<29)|(dis1<<28)|(SID<<16)|(1<<27);
;;;278    				LPC_CANAF_RAM->mask[count] &= 0x0000FFFF;
;;;279    				LPC_CANAF_RAM->mask[count] |= entry;
;;;280    				CANAF_FullCAN_cnt++;
;;;281    				if(CANAF_FullCAN_cnt == AFSection->FC_NumEntry) //this is the lastest FullCAN entry
;;;282    					count++;
;;;283    			}
;;;284    			else
;;;285    			{
;;;286    				buf = LPC_CANAF_RAM->mask[count];
;;;287    				ID_temp = (buf >>16) & 0xE7FF;
;;;288    				if(ID_temp > ((ctrl1<<13)|SID))
;;;289    				{
;;;290    					return CAN_AF_ENTRY_ERROR;
;;;291    				}
;;;292    				entry = (ctrl1<<13)|(dis1<<12)|(SID<<0)|(1<<11);
;;;293    				LPC_CANAF_RAM->mask[count] &= 0xFFFF0000;
;;;294    				LPC_CANAF_RAM->mask[count]|= entry;
;;;295    				count++;
;;;296    				CANAF_FullCAN_cnt++;
;;;297    			}
;;;298    			AFSection->FullCAN_Sec = (FullCAN_Entry *)((uint32_t)(AFSection->FullCAN_Sec)+ sizeof(FullCAN_Entry));
;;;299    		}
;;;300    	}
;;;301    
;;;302    /***** Setup Explicit Standard Frame Format Section *****/
;;;303    	if(AFSection->SFF_Sec != NULL)
;;;304    	{
;;;305    		for(i=0;i<(AFSection->SFF_NumEntry);i++)
;;;306    		{
;;;307    			if(count + 1 > 512)
;;;308    			{
;;;309    				return CAN_OBJECTS_FULL_ERROR;
;;;310    			}
;;;311    			ctrl1 = AFSection->SFF_Sec->controller;
;;;312    			SID = AFSection->SFF_Sec->id_11;
;;;313    			dis1 = AFSection->SFF_Sec->disable;
;;;314    
;;;315    			//check parameter
;;;316    			CHECK_PARAM(PARAM_CTRL(ctrl1));
;;;317    			CHECK_PARAM(PARAM_ID_11(SID));
;;;318    			CHECK_PARAM(PARAM_MSG_DISABLE(dis1));
;;;319    
;;;320    			entry = 0x00; //reset entry value
;;;321    			if((CANAF_std_cnt & 0x00000001)==0)
;;;322    			{
;;;323    				if(CANAF_std_cnt !=0 )
;;;324    				{
;;;325    					buf = LPC_CANAF_RAM->mask[count-1];
;;;326    					ID_temp = (buf & 0xE7FF); //mask controller & identifier bits
;;;327    					if(ID_temp > ((ctrl1<<13)|SID))
;;;328    					{
;;;329    						return CAN_AF_ENTRY_ERROR;
;;;330    					}
;;;331    				}
;;;332    				entry = (ctrl1<<29)|(dis1<<28)|(SID<<16);
;;;333    				LPC_CANAF_RAM->mask[count] &= 0x0000FFFF;
;;;334    				LPC_CANAF_RAM->mask[count] |= entry;
;;;335    				CANAF_std_cnt++;
;;;336    				if(CANAF_std_cnt == AFSection->SFF_NumEntry)//if this is the last SFF entry
;;;337    					count++;
;;;338    			}
;;;339    			else
;;;340    			{
;;;341    				buf = LPC_CANAF_RAM->mask[count];
;;;342    				ID_temp = (buf >>16) & 0xE7FF;
;;;343    				if(ID_temp > ((ctrl1<<13)|SID))
;;;344    				{
;;;345    					return CAN_AF_ENTRY_ERROR;
;;;346    				}
;;;347    				entry = (ctrl1<<13)|(dis1<<12)|(SID<<0);
;;;348    				LPC_CANAF_RAM->mask[count] &= 0xFFFF0000;
;;;349    				LPC_CANAF_RAM->mask[count] |= entry;
;;;350    				count++;
;;;351    				CANAF_std_cnt++;
;;;352    			}
;;;353    			AFSection->SFF_Sec = (SFF_Entry *)((uint32_t)(AFSection->SFF_Sec)+ sizeof(SFF_Entry));
;;;354    		}
;;;355    	}
;;;356    
;;;357    /***** Setup Group of Standard Frame Format Identifier Section *****/
;;;358    	if(AFSection->SFF_GPR_Sec != NULL)
;;;359    	{
;;;360    		for(i=0;i<(AFSection->SFF_GPR_NumEntry);i++)
;;;361    		{
;;;362    			if(count + 1 > 512)
;;;363    			{
;;;364    				return CAN_OBJECTS_FULL_ERROR;
;;;365    			}
;;;366    			ctrl1 = AFSection->SFF_GPR_Sec->controller1;
;;;367    			ctrl2 = AFSection->SFF_GPR_Sec->controller2;
;;;368    			dis1 = AFSection->SFF_GPR_Sec->disable1;
;;;369    			dis2 = AFSection->SFF_GPR_Sec->disable2;
;;;370    			lowerSID = AFSection->SFF_GPR_Sec->lowerID;
;;;371    			upperSID = AFSection->SFF_GPR_Sec->upperID;
;;;372    
;;;373    			/* check parameter */
;;;374    			CHECK_PARAM(PARAM_CTRL(ctrl1));
;;;375    			CHECK_PARAM(PARAM_CTRL(ctrl2));
;;;376    			CHECK_PARAM(PARAM_MSG_DISABLE(dis1));
;;;377    			CHECK_PARAM(PARAM_MSG_DISABLE(dis2));
;;;378    			CHECK_PARAM(PARAM_ID_11(lowerSID));
;;;379    			CHECK_PARAM(PARAM_ID_11(upperSID));
;;;380    
;;;381    			entry = 0x00;
;;;382    			if(CANAF_gstd_cnt!=0)
;;;383    			{
;;;384    				buf = LPC_CANAF_RAM->mask[count-1];
;;;385    				ID_temp = buf & 0xE7FF;
;;;386    				if((ctrl1 != ctrl2)||(lowerSID > upperSID)||(ID_temp > ((ctrl1<<13)|lowerSID)))
;;;387    				{
;;;388    					return CAN_AF_ENTRY_ERROR;
;;;389    				}
;;;390    			}
;;;391    			entry = (ctrl1 << 29)|(dis1 << 28)|(lowerSID << 16)|  \
;;;392    					(ctrl2 << 13)|(dis2 << 12)|(upperSID << 0);
;;;393    			LPC_CANAF_RAM->mask[count] = entry;
;;;394    			CANAF_gstd_cnt++;
;;;395    			count++;
;;;396    			AFSection->SFF_GPR_Sec = (SFF_GPR_Entry *)((uint32_t)(AFSection->SFF_GPR_Sec)+ sizeof(SFF_GPR_Entry));
;;;397    		}
;;;398    	}
;;;399    
;;;400    /***** Setup Explicit Extend Frame Format Identifier Section *****/
;;;401    	if(AFSection->EFF_Sec != NULL)
;;;402    	{
;;;403    		for(i=0;i<(AFSection->EFF_NumEntry);i++)
;;;404    		{
;;;405    			if(count + 1 > 512)
;;;406    			{
;;;407    				return CAN_OBJECTS_FULL_ERROR;
;;;408    			}
;;;409    			EID = AFSection->EFF_Sec->ID_29;
;;;410    			ctrl1 = AFSection->EFF_Sec->controller;
;;;411    
;;;412    			// check parameter
;;;413    			CHECK_PARAM(PARAM_ID_29(EID));
;;;414    			CHECK_PARAM(PARAM_CTRL(ctrl1));
;;;415    
;;;416    			entry = (ctrl1 << 29)|(EID << 0);
;;;417    			if(CANAF_ext_cnt != 0)
;;;418    			{
;;;419    				buf = LPC_CANAF_RAM->mask[count-1];
;;;420    //				EID_temp = buf & 0x0FFFFFFF;
;;;421    				if(buf > entry)
;;;422    				{
;;;423    					return CAN_AF_ENTRY_ERROR;
;;;424    				}
;;;425    			}
;;;426    			LPC_CANAF_RAM->mask[count] = entry;
;;;427    			CANAF_ext_cnt ++;
;;;428    			count++;
;;;429    			AFSection->EFF_Sec = (EFF_Entry *)((uint32_t)(AFSection->EFF_Sec)+ sizeof(EFF_Entry));
;;;430    		}
;;;431    	}
;;;432    
;;;433    /***** Setup Group of Extended Frame Format Identifier Section *****/
;;;434    	if(AFSection->EFF_GPR_Sec != NULL)
;;;435    	{
;;;436    		for(i=0;i<(AFSection->EFF_GPR_NumEntry);i++)
;;;437    		{
;;;438    			if(count + 2 > 512)
;;;439    			{
;;;440    				return CAN_OBJECTS_FULL_ERROR;
;;;441    			}
;;;442    			ctrl1 = AFSection->EFF_GPR_Sec->controller1;
;;;443    			ctrl2 = AFSection->EFF_GPR_Sec->controller2;
;;;444    			lowerEID = AFSection->EFF_GPR_Sec->lowerEID;
;;;445    			upperEID = AFSection->EFF_GPR_Sec->upperEID;
;;;446    
;;;447    			//check parameter
;;;448    			CHECK_PARAM(PARAM_CTRL(ctrl1));
;;;449    			CHECK_PARAM(PARAM_CTRL(ctrl2));
;;;450    			CHECK_PARAM(PARAM_ID_29(lowerEID));
;;;451    			CHECK_PARAM(PARAM_ID_29(upperEID));
;;;452    
;;;453    			entry = 0x00;
;;;454    			if(CANAF_gext_cnt != 0)
;;;455    			{
;;;456    				buf = LPC_CANAF_RAM->mask[count-1];
;;;457    //				EID_temp = buf & 0x0FFFFFFF;
;;;458    				if((ctrl1 != ctrl2) || (lowerEID > upperEID) || (buf > ((ctrl1 << 29)|(lowerEID << 0))))
;;;459    				{
;;;460    					return CAN_AF_ENTRY_ERROR;
;;;461    				}
;;;462    			}
;;;463    			entry = (ctrl1 << 29)|(lowerEID << 0);
;;;464    			LPC_CANAF_RAM->mask[count++] = entry;
;;;465    			entry = (ctrl2 << 29)|(upperEID << 0);
;;;466    			LPC_CANAF_RAM->mask[count++] = entry;
;;;467    			CANAF_gext_cnt++;
;;;468    			AFSection->EFF_GPR_Sec = (EFF_GPR_Entry *)((uint32_t)(AFSection->EFF_GPR_Sec)+ sizeof(EFF_GPR_Entry));
;;;469    		}
;;;470    	}
;;;471    	//update address values
;;;472    	LPC_CANAF->SFF_sa = ((CANAF_FullCAN_cnt + 1)>>1)<<2;
;;;473    	LPC_CANAF->SFF_GRP_sa = LPC_CANAF->SFF_sa + (((CANAF_std_cnt+1)>>1)<< 2);
;;;474    	LPC_CANAF->EFF_sa = LPC_CANAF->SFF_GRP_sa + (CANAF_gstd_cnt << 2);
;;;475    	LPC_CANAF->EFF_GRP_sa = LPC_CANAF->EFF_sa + (CANAF_ext_cnt << 2);
;;;476    	LPC_CANAF->ENDofTable = LPC_CANAF->EFF_GRP_sa + (CANAF_gext_cnt << 3);
;;;477    
;;;478    	if(FULLCAN_ENABLE == DISABLE)
;;;479    	{
;;;480    		LPC_CANAF->AFMR = 0x00; // Normal mode
;;;481    	}
;;;482    	else
;;;483    	{
;;;484    		LPC_CANAF->AFMR = 0x04;
;;;485    	}
;;;486    	return CAN_OK;
;;;487    }
000042  b00b              ADD      sp,sp,#0x2c
000044  e8bd8ff0          POP      {r4-r11,pc}
                  |L18.72|
000048  6820              LDR      r0,[r4,#0]            ;258
00004a  7806              LDRB     r6,[r0,#0]            ;258
00004c  6820              LDR      r0,[r4,#0]            ;259
00004e  f8b08002          LDRH     r8,[r0,#2]            ;259
000052  6820              LDR      r0,[r4,#0]            ;260
000054  7847              LDRB     r7,[r0,#1]            ;260
000056  b90e              CBNZ     r6,|L18.92|
000058  2001              MOVS     r0,#1                 ;262
00005a  e000              B        |L18.94|
                  |L18.92|
00005c  2000              MOVS     r0,#0                 ;262
                  |L18.94|
00005e  2e01              CMP      r6,#1                 ;262
000060  d101              BNE      |L18.102|
000062  2101              MOVS     r1,#1                 ;262
000064  e000              B        |L18.104|
                  |L18.102|
000066  2100              MOVS     r1,#0                 ;262
                  |L18.104|
000068  4308              ORRS     r0,r0,r1              ;262
00006a  b100              CBZ      r0,|L18.110|
00006c  e004              B        |L18.120|
                  |L18.110|
00006e  f44f7183          MOV      r1,#0x106             ;262
000072  a0e1              ADR      r0,|L18.1016|
000074  f7fffffe          BL       check_failed
                  |L18.120|
000078  ea4f20e8          ASR      r0,r8,#11             ;263
00007c  b900              CBNZ     r0,|L18.128|
00007e  e004              B        |L18.138|
                  |L18.128|
000080  f2401107          MOV      r1,#0x107             ;263
000084  a0dc              ADR      r0,|L18.1016|
000086  f7fffffe          BL       check_failed
                  |L18.138|
00008a  b90f              CBNZ     r7,|L18.144|
00008c  2001              MOVS     r0,#1                 ;264
00008e  e000              B        |L18.146|
                  |L18.144|
000090  2000              MOVS     r0,#0                 ;264
                  |L18.146|
000092  2f01              CMP      r7,#1                 ;264
000094  d101              BNE      |L18.154|
000096  2101              MOVS     r1,#1                 ;264
000098  e000              B        |L18.156|
                  |L18.154|
00009a  2100              MOVS     r1,#0                 ;264
                  |L18.156|
00009c  4308              ORRS     r0,r0,r1              ;264
00009e  b100              CBZ      r0,|L18.162|
0000a0  e004              B        |L18.172|
                  |L18.162|
0000a2  f44f7184          MOV      r1,#0x108             ;264
0000a6  a0d4              ADR      r0,|L18.1016|
0000a8  f7fffffe          BL       check_failed
                  |L18.172|
0000ac  f04f0b00          MOV      r11,#0                ;265
0000b0  48db              LDR      r0,|L18.1056|
0000b2  7800              LDRB     r0,[r0,#0]            ;266  ; CANAF_FullCAN_cnt
0000b4  f0000001          AND      r0,r0,#1              ;266
0000b8  bb88              CBNZ     r0,|L18.286|
0000ba  b185              CBZ      r5,|L18.222|
0000bc  1e68              SUBS     r0,r5,#1              ;270
0000be  49d9              LDR      r1,|L18.1060|
0000c0  f8510020          LDR      r0,[r1,r0,LSL #2]     ;270
0000c4  9005              STR      r0,[sp,#0x14]         ;270
0000c6  f24e71ff          MOV      r1,#0xe7ff            ;271
0000ca  9805              LDR      r0,[sp,#0x14]         ;271
0000cc  4008              ANDS     r0,r0,r1              ;271
0000ce  9007              STR      r0,[sp,#0x1c]         ;271
0000d0  ea483146          ORR      r1,r8,r6,LSL #13      ;272
0000d4  9807              LDR      r0,[sp,#0x1c]         ;272
0000d6  4281              CMP      r1,r0                 ;272
0000d8  da01              BGE      |L18.222|
0000da  2005              MOVS     r0,#5                 ;274
0000dc  e7b1              B        |L18.66|
                  |L18.222|
0000de  0770              LSLS     r0,r6,#29             ;277
0000e0  ea407007          ORR      r0,r0,r7,LSL #28      ;277
0000e4  ea404008          ORR      r0,r0,r8,LSL #16      ;277
0000e8  f0406b00          ORR      r11,r0,#0x8000000     ;277
0000ec  49cd              LDR      r1,|L18.1060|
0000ee  f8510025          LDR      r0,[r1,r5,LSL #2]     ;278
0000f2  b280              UXTH     r0,r0                 ;278
0000f4  460a              MOV      r2,r1                 ;278
0000f6  f8420025          STR      r0,[r2,r5,LSL #2]     ;278
0000fa  f8510025          LDR      r0,[r1,r5,LSL #2]     ;279
0000fe  ea40000b          ORR      r0,r0,r11             ;279
000102  f8420025          STR      r0,[r2,r5,LSL #2]     ;279
000106  48c6              LDR      r0,|L18.1056|
000108  8800              LDRH     r0,[r0,#0]            ;280  ; CANAF_FullCAN_cnt
00010a  1c40              ADDS     r0,r0,#1              ;280
00010c  49c4              LDR      r1,|L18.1056|
00010e  8008              STRH     r0,[r1,#0]            ;280
000110  7920              LDRB     r0,[r4,#4]            ;281
000112  8809              LDRH     r1,[r1,#0]            ;281  ; CANAF_FullCAN_cnt
000114  4288              CMP      r0,r1                 ;281
000116  d130              BNE      |L18.378|
000118  1c68              ADDS     r0,r5,#1              ;282
00011a  b285              UXTH     r5,r0                 ;282
00011c  e02d              B        |L18.378|
                  |L18.286|
00011e  e7ff              B        |L18.288|
                  |L18.288|
000120  49c0              LDR      r1,|L18.1060|
000122  f8510025          LDR      r0,[r1,r5,LSL #2]     ;286
000126  9005              STR      r0,[sp,#0x14]         ;286
000128  f24e71ff          MOV      r1,#0xe7ff            ;287
00012c  9805              LDR      r0,[sp,#0x14]         ;287
00012e  ea014010          AND      r0,r1,r0,LSR #16      ;287
000132  9007              STR      r0,[sp,#0x1c]         ;287
000134  ea483146          ORR      r1,r8,r6,LSL #13      ;288
000138  9807              LDR      r0,[sp,#0x1c]         ;288
00013a  4281              CMP      r1,r0                 ;288
00013c  da01              BGE      |L18.322|
00013e  2005              MOVS     r0,#5                 ;290
000140  e77f              B        |L18.66|
                  |L18.322|
000142  0370              LSLS     r0,r6,#13             ;292
000144  ea403007          ORR      r0,r0,r7,LSL #12      ;292
000148  ea400008          ORR      r0,r0,r8              ;292
00014c  f4406b00          ORR      r11,r0,#0x800         ;292
000150  49b4              LDR      r1,|L18.1060|
000152  f8510025          LDR      r0,[r1,r5,LSL #2]     ;293
000156  f36f000f          BFC      r0,#0,#16             ;293
00015a  460a              MOV      r2,r1                 ;293
00015c  f8420025          STR      r0,[r2,r5,LSL #2]     ;293
000160  f8510025          LDR      r0,[r1,r5,LSL #2]     ;294
000164  ea40000b          ORR      r0,r0,r11             ;294
000168  f8420025          STR      r0,[r2,r5,LSL #2]     ;294
00016c  1c68              ADDS     r0,r5,#1              ;295
00016e  b285              UXTH     r5,r0                 ;295
000170  48ab              LDR      r0,|L18.1056|
000172  8800              LDRH     r0,[r0,#0]            ;296  ; CANAF_FullCAN_cnt
000174  1c40              ADDS     r0,r0,#1              ;296
000176  49aa              LDR      r1,|L18.1056|
000178  8008              STRH     r0,[r1,#0]            ;296
                  |L18.378|
00017a  6820              LDR      r0,[r4,#0]            ;298
00017c  1d00              ADDS     r0,r0,#4              ;298
00017e  6020              STR      r0,[r4,#0]            ;298
000180  f1090001          ADD      r0,r9,#1              ;252
000184  fa1ff980          UXTH     r9,r0                 ;252
                  |L18.392|
000188  7920              LDRB     r0,[r4,#4]            ;252
00018a  4548              CMP      r0,r9                 ;252
00018c  f73faf55          BGT      |L18.58|
                  |L18.400|
000190  68a0              LDR      r0,[r4,#8]            ;303
000192  2800              CMP      r0,#0                 ;303
000194  d073              BEQ      |L18.638|
000196  f04f0900          MOV      r9,#0                 ;305
00019a  e0a4              B        |L18.742|
                  |L18.412|
00019c  1c68              ADDS     r0,r5,#1              ;307
00019e  f5b07f00          CMP      r0,#0x200             ;307
0001a2  dd01              BLE      |L18.424|
0001a4  2002              MOVS     r0,#2                 ;309
0001a6  e74c              B        |L18.66|
                  |L18.424|
0001a8  68a0              LDR      r0,[r4,#8]            ;311
0001aa  7806              LDRB     r6,[r0,#0]            ;311
0001ac  68a0              LDR      r0,[r4,#8]            ;312
0001ae  f8b08002          LDRH     r8,[r0,#2]            ;312
0001b2  68a0              LDR      r0,[r4,#8]            ;313
0001b4  7847              LDRB     r7,[r0,#1]            ;313
0001b6  b90e              CBNZ     r6,|L18.444|
0001b8  2001              MOVS     r0,#1                 ;316
0001ba  e000              B        |L18.446|
                  |L18.444|
0001bc  2000              MOVS     r0,#0                 ;316
                  |L18.446|
0001be  2e01              CMP      r6,#1                 ;316
0001c0  d101              BNE      |L18.454|
0001c2  2101              MOVS     r1,#1                 ;316
0001c4  e000              B        |L18.456|
                  |L18.454|
0001c6  2100              MOVS     r1,#0                 ;316
                  |L18.456|
0001c8  4308              ORRS     r0,r0,r1              ;316
0001ca  b100              CBZ      r0,|L18.462|
0001cc  e004              B        |L18.472|
                  |L18.462|
0001ce  f44f719e          MOV      r1,#0x13c             ;316
0001d2  a089              ADR      r0,|L18.1016|
0001d4  f7fffffe          BL       check_failed
                  |L18.472|
0001d8  ea4f20e8          ASR      r0,r8,#11             ;317
0001dc  b900              CBNZ     r0,|L18.480|
0001de  e004              B        |L18.490|
                  |L18.480|
0001e0  f240113d          MOV      r1,#0x13d             ;317
0001e4  a084              ADR      r0,|L18.1016|
0001e6  f7fffffe          BL       check_failed
                  |L18.490|
0001ea  b90f              CBNZ     r7,|L18.496|
0001ec  2001              MOVS     r0,#1                 ;318
0001ee  e000              B        |L18.498|
                  |L18.496|
0001f0  2000              MOVS     r0,#0                 ;318
                  |L18.498|
0001f2  2f01              CMP      r7,#1                 ;318
0001f4  d101              BNE      |L18.506|
0001f6  2101              MOVS     r1,#1                 ;318
0001f8  e000              B        |L18.508|
                  |L18.506|
0001fa  2100              MOVS     r1,#0                 ;318
                  |L18.508|
0001fc  4308              ORRS     r0,r0,r1              ;318
0001fe  b100              CBZ      r0,|L18.514|
000200  e004              B        |L18.524|
                  |L18.514|
000202  f44f719f          MOV      r1,#0x13e             ;318
000206  a07c              ADR      r0,|L18.1016|
000208  f7fffffe          BL       check_failed
                  |L18.524|
00020c  f04f0b00          MOV      r11,#0                ;320
000210  4885              LDR      r0,|L18.1064|
000212  7800              LDRB     r0,[r0,#0]            ;321  ; CANAF_std_cnt
000214  f0000001          AND      r0,r0,#1              ;321
000218  bb90              CBNZ     r0,|L18.640|
00021a  4883              LDR      r0,|L18.1064|
00021c  8800              LDRH     r0,[r0,#0]            ;323  ; CANAF_std_cnt
00021e  b180              CBZ      r0,|L18.578|
000220  1e68              SUBS     r0,r5,#1              ;325
000222  4980              LDR      r1,|L18.1060|
000224  f8510020          LDR      r0,[r1,r0,LSL #2]     ;325
000228  9005              STR      r0,[sp,#0x14]         ;325
00022a  f24e71ff          MOV      r1,#0xe7ff            ;326
00022e  9805              LDR      r0,[sp,#0x14]         ;326
000230  4008              ANDS     r0,r0,r1              ;326
000232  9007              STR      r0,[sp,#0x1c]         ;326
000234  ea483146          ORR      r1,r8,r6,LSL #13      ;327
000238  9807              LDR      r0,[sp,#0x1c]         ;327
00023a  4281              CMP      r1,r0                 ;327
00023c  da01              BGE      |L18.578|
00023e  2005              MOVS     r0,#5                 ;329
000240  e6ff              B        |L18.66|
                  |L18.578|
000242  0770              LSLS     r0,r6,#29             ;332
000244  ea407007          ORR      r0,r0,r7,LSL #28      ;332
000248  ea404b08          ORR      r11,r0,r8,LSL #16     ;332
00024c  4975              LDR      r1,|L18.1060|
00024e  f8510025          LDR      r0,[r1,r5,LSL #2]     ;333
000252  b280              UXTH     r0,r0                 ;333
000254  460a              MOV      r2,r1                 ;333
000256  f8420025          STR      r0,[r2,r5,LSL #2]     ;333
00025a  f8510025          LDR      r0,[r1,r5,LSL #2]     ;334
00025e  ea40000b          ORR      r0,r0,r11             ;334
000262  f8420025          STR      r0,[r2,r5,LSL #2]     ;334
000266  4870              LDR      r0,|L18.1064|
000268  8800              LDRH     r0,[r0,#0]            ;335  ; CANAF_std_cnt
00026a  1c40              ADDS     r0,r0,#1              ;335
00026c  496e              LDR      r1,|L18.1064|
00026e  8008              STRH     r0,[r1,#0]            ;335
000270  7b20              LDRB     r0,[r4,#0xc]          ;336
000272  8809              LDRH     r1,[r1,#0]            ;336  ; CANAF_std_cnt
000274  4288              CMP      r0,r1                 ;336
000276  d12f              BNE      |L18.728|
000278  1c68              ADDS     r0,r5,#1              ;337
00027a  b285              UXTH     r5,r0                 ;337
00027c  e02c              B        |L18.728|
                  |L18.638|
00027e  e036              B        |L18.750|
                  |L18.640|
000280  e7ff              B        |L18.642|
                  |L18.642|
000282  4968              LDR      r1,|L18.1060|
000284  f8510025          LDR      r0,[r1,r5,LSL #2]     ;341
000288  9005              STR      r0,[sp,#0x14]         ;341
00028a  f24e71ff          MOV      r1,#0xe7ff            ;342
00028e  9805              LDR      r0,[sp,#0x14]         ;342
000290  ea014010          AND      r0,r1,r0,LSR #16      ;342
000294  9007              STR      r0,[sp,#0x1c]         ;342
000296  ea483146          ORR      r1,r8,r6,LSL #13      ;343
00029a  9807              LDR      r0,[sp,#0x1c]         ;343
00029c  4281              CMP      r1,r0                 ;343
00029e  da01              BGE      |L18.676|
0002a0  2005              MOVS     r0,#5                 ;345
0002a2  e6ce              B        |L18.66|
                  |L18.676|
0002a4  0370              LSLS     r0,r6,#13             ;347
0002a6  ea403007          ORR      r0,r0,r7,LSL #12      ;347
0002aa  ea400b08          ORR      r11,r0,r8             ;347
0002ae  495d              LDR      r1,|L18.1060|
0002b0  f8510025          LDR      r0,[r1,r5,LSL #2]     ;348
0002b4  f36f000f          BFC      r0,#0,#16             ;348
0002b8  460a              MOV      r2,r1                 ;348
0002ba  f8420025          STR      r0,[r2,r5,LSL #2]     ;348
0002be  f8510025          LDR      r0,[r1,r5,LSL #2]     ;349
0002c2  ea40000b          ORR      r0,r0,r11             ;349
0002c6  f8420025          STR      r0,[r2,r5,LSL #2]     ;349
0002ca  1c68              ADDS     r0,r5,#1              ;350
0002cc  b285              UXTH     r5,r0                 ;350
0002ce  4856              LDR      r0,|L18.1064|
0002d0  8800              LDRH     r0,[r0,#0]            ;351  ; CANAF_std_cnt
0002d2  1c40              ADDS     r0,r0,#1              ;351
0002d4  4954              LDR      r1,|L18.1064|
0002d6  8008              STRH     r0,[r1,#0]            ;351
                  |L18.728|
0002d8  68a0              LDR      r0,[r4,#8]            ;353
0002da  1d00              ADDS     r0,r0,#4              ;353
0002dc  60a0              STR      r0,[r4,#8]            ;353
0002de  f1090001          ADD      r0,r9,#1              ;305
0002e2  fa1ff980          UXTH     r9,r0                 ;305
                  |L18.742|
0002e6  7b20              LDRB     r0,[r4,#0xc]          ;305
0002e8  4548              CMP      r0,r9                 ;305
0002ea  f73faf57          BGT      |L18.412|
                  |L18.750|
0002ee  6920              LDR      r0,[r4,#0x10]         ;358
0002f0  2800              CMP      r0,#0                 ;358
0002f2  d07d              BEQ      |L18.1008|
0002f4  f04f0900          MOV      r9,#0                 ;360
0002f8  e0cc              B        |L18.1172|
                  |L18.762|
0002fa  1c68              ADDS     r0,r5,#1              ;362
0002fc  f5b07f00          CMP      r0,#0x200             ;362
000300  dd01              BLE      |L18.774|
000302  2002              MOVS     r0,#2                 ;364
000304  e69d              B        |L18.66|
                  |L18.774|
000306  6920              LDR      r0,[r4,#0x10]         ;366
000308  7806              LDRB     r6,[r0,#0]            ;366
00030a  6920              LDR      r0,[r4,#0x10]         ;367
00030c  f890a004          LDRB     r10,[r0,#4]           ;367
000310  6920              LDR      r0,[r4,#0x10]         ;368
000312  7847              LDRB     r7,[r0,#1]            ;368
000314  6920              LDR      r0,[r4,#0x10]         ;369
000316  7940              LDRB     r0,[r0,#5]            ;369
000318  9008              STR      r0,[sp,#0x20]         ;369
00031a  6920              LDR      r0,[r4,#0x10]         ;370
00031c  8840              LDRH     r0,[r0,#2]            ;370
00031e  9004              STR      r0,[sp,#0x10]         ;370
000320  6920              LDR      r0,[r4,#0x10]         ;371
000322  88c0              LDRH     r0,[r0,#6]            ;371
000324  9003              STR      r0,[sp,#0xc]          ;371
000326  b90e              CBNZ     r6,|L18.812|
000328  2001              MOVS     r0,#1                 ;374
00032a  e000              B        |L18.814|
                  |L18.812|
00032c  2000              MOVS     r0,#0                 ;374
                  |L18.814|
00032e  2e01              CMP      r6,#1                 ;374
000330  d101              BNE      |L18.822|
000332  2101              MOVS     r1,#1                 ;374
000334  e000              B        |L18.824|
                  |L18.822|
000336  2100              MOVS     r1,#0                 ;374
                  |L18.824|
000338  4308              ORRS     r0,r0,r1              ;374
00033a  b100              CBZ      r0,|L18.830|
00033c  e004              B        |L18.840|
                  |L18.830|
00033e  f44f71bb          MOV      r1,#0x176             ;374
000342  a02d              ADR      r0,|L18.1016|
000344  f7fffffe          BL       check_failed
                  |L18.840|
000348  f1ba0f00          CMP      r10,#0                ;375
00034c  d101              BNE      |L18.850|
00034e  2001              MOVS     r0,#1                 ;375
000350  e000              B        |L18.852|
                  |L18.850|
000352  2000              MOVS     r0,#0                 ;375
                  |L18.852|
000354  f1ba0f01          CMP      r10,#1                ;375
000358  d101              BNE      |L18.862|
00035a  2101              MOVS     r1,#1                 ;375
00035c  e000              B        |L18.864|
                  |L18.862|
00035e  2100              MOVS     r1,#0                 ;375
                  |L18.864|
000360  4308              ORRS     r0,r0,r1              ;375
000362  b100              CBZ      r0,|L18.870|
000364  e004              B        |L18.880|
                  |L18.870|
000366  f2401177          MOV      r1,#0x177             ;375
00036a  a023              ADR      r0,|L18.1016|
00036c  f7fffffe          BL       check_failed
                  |L18.880|
000370  b90f              CBNZ     r7,|L18.886|
000372  2001              MOVS     r0,#1                 ;376
000374  e000              B        |L18.888|
                  |L18.886|
000376  2000              MOVS     r0,#0                 ;376
                  |L18.888|
000378  2f01              CMP      r7,#1                 ;376
00037a  d101              BNE      |L18.896|
00037c  2101              MOVS     r1,#1                 ;376
00037e  e000              B        |L18.898|
                  |L18.896|
000380  2100              MOVS     r1,#0                 ;376
                  |L18.898|
000382  4308              ORRS     r0,r0,r1              ;376
000384  b100              CBZ      r0,|L18.904|
000386  e004              B        |L18.914|
                  |L18.904|
000388  f44f71bc          MOV      r1,#0x178             ;376
00038c  a01a              ADR      r0,|L18.1016|
00038e  f7fffffe          BL       check_failed
                  |L18.914|
000392  9808              LDR      r0,[sp,#0x20]         ;377
000394  b908              CBNZ     r0,|L18.922|
000396  2001              MOVS     r0,#1                 ;377
000398  e000              B        |L18.924|
                  |L18.922|
00039a  2000              MOVS     r0,#0                 ;377
                  |L18.924|
00039c  9908              LDR      r1,[sp,#0x20]         ;377
00039e  2901              CMP      r1,#1                 ;377
0003a0  d100              BNE      |L18.932|
0003a2  e000              B        |L18.934|
                  |L18.932|
0003a4  2100              MOVS     r1,#0                 ;377
                  |L18.934|
0003a6  4308              ORRS     r0,r0,r1              ;377
0003a8  b100              CBZ      r0,|L18.940|
0003aa  e004              B        |L18.950|
                  |L18.940|
0003ac  f2401179          MOV      r1,#0x179             ;377
0003b0  a011              ADR      r0,|L18.1016|
0003b2  f7fffffe          BL       check_failed
                  |L18.950|
0003b6  9804              LDR      r0,[sp,#0x10]         ;378
0003b8  12c0              ASRS     r0,r0,#11             ;378
0003ba  b900              CBNZ     r0,|L18.958|
0003bc  e004              B        |L18.968|
                  |L18.958|
0003be  f44f71bd          MOV      r1,#0x17a             ;378
0003c2  a00d              ADR      r0,|L18.1016|
0003c4  f7fffffe          BL       check_failed
                  |L18.968|
0003c8  9803              LDR      r0,[sp,#0xc]          ;379
0003ca  12c0              ASRS     r0,r0,#11             ;379
0003cc  b900              CBNZ     r0,|L18.976|
0003ce  e004              B        |L18.986|
                  |L18.976|
0003d0  f240117b          MOV      r1,#0x17b             ;379
0003d4  a008              ADR      r0,|L18.1016|
0003d6  f7fffffe          BL       check_failed
                  |L18.986|
0003da  f04f0b00          MOV      r11,#0                ;381
0003de  4813              LDR      r0,|L18.1068|
0003e0  8800              LDRH     r0,[r0,#0]            ;382  ; CANAF_gstd_cnt
0003e2  b130              CBZ      r0,|L18.1010|
0003e4  1e68              SUBS     r0,r5,#1              ;384
0003e6  490f              LDR      r1,|L18.1060|
0003e8  f8510020          LDR      r0,[r1,r0,LSL #2]     ;384
0003ec  9005              STR      r0,[sp,#0x14]         ;384
0003ee  e01f              B        |L18.1072|
                  |L18.1008|
0003f0  e054              B        |L18.1180|
                  |L18.1010|
0003f2  e030              B        |L18.1110|
                  |L18.1012|
                          DCD      0x4003c000
                  |L18.1016|
0003f8  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
0003fc  44726976
000400  6572735c
000404  736f7572
000408  63655c6c
00040c  70633137
000410  78785f63
000414  616e2e63
000418  00      
000419  00                DCB      0
00041a  00                DCB      0
00041b  00                DCB      0
                  |L18.1052|
                          DCD      FULLCAN_ENABLE
                  |L18.1056|
                          DCD      CANAF_FullCAN_cnt
                  |L18.1060|
                          DCD      0x40038000
                  |L18.1064|
                          DCD      CANAF_std_cnt
                  |L18.1068|
                          DCD      CANAF_gstd_cnt
                  |L18.1072|
000430  f24e71ff          MOV      r1,#0xe7ff            ;385
000434  9805              LDR      r0,[sp,#0x14]         ;385
000436  4008              ANDS     r0,r0,r1              ;385
000438  9007              STR      r0,[sp,#0x1c]         ;385
00043a  4556              CMP      r6,r10                ;386
00043c  d109              BNE      |L18.1106|
00043e  e9dd1003          LDRD     r1,r0,[sp,#0xc]       ;386
000442  4288              CMP      r0,r1                 ;386
000444  dc05              BGT      |L18.1106|
000446  9804              LDR      r0,[sp,#0x10]         ;386
000448  ea403146          ORR      r1,r0,r6,LSL #13      ;386
00044c  9807              LDR      r0,[sp,#0x1c]         ;386
00044e  4281              CMP      r1,r0                 ;386
000450  da01              BGE      |L18.1110|
                  |L18.1106|
000452  2005              MOVS     r0,#5                 ;388
000454  e5f5              B        |L18.66|
                  |L18.1110|
000456  0770              LSLS     r0,r6,#29             ;391
000458  ea407107          ORR      r1,r0,r7,LSL #28      ;391
00045c  9804              LDR      r0,[sp,#0x10]         ;391
00045e  ea414000          ORR      r0,r1,r0,LSL #16      ;391
000462  ea40314a          ORR      r1,r0,r10,LSL #13     ;391
000466  9808              LDR      r0,[sp,#0x20]         ;391
000468  ea413000          ORR      r0,r1,r0,LSL #12      ;391
00046c  9903              LDR      r1,[sp,#0xc]          ;391
00046e  ea400b01          ORR      r11,r0,r1             ;391
000472  4994              LDR      r1,|L18.1732|
000474  f841b025          STR      r11,[r1,r5,LSL #2]    ;393
000478  4893              LDR      r0,|L18.1736|
00047a  8800              LDRH     r0,[r0,#0]            ;394  ; CANAF_gstd_cnt
00047c  1c40              ADDS     r0,r0,#1              ;394
00047e  4992              LDR      r1,|L18.1736|
000480  8008              STRH     r0,[r1,#0]            ;394
000482  1c68              ADDS     r0,r5,#1              ;395
000484  b285              UXTH     r5,r0                 ;395
000486  6920              LDR      r0,[r4,#0x10]         ;396
000488  3008              ADDS     r0,r0,#8              ;396
00048a  6120              STR      r0,[r4,#0x10]         ;396
00048c  f1090001          ADD      r0,r9,#1              ;360
000490  fa1ff980          UXTH     r9,r0                 ;360
                  |L18.1172|
000494  7d20              LDRB     r0,[r4,#0x14]         ;360
000496  4548              CMP      r0,r9                 ;360
000498  f73faf2f          BGT      |L18.762|
                  |L18.1180|
00049c  69a0              LDR      r0,[r4,#0x18]         ;401
00049e  b3c8              CBZ      r0,|L18.1300|
0004a0  f04f0900          MOV      r9,#0                 ;403
0004a4  e048              B        |L18.1336|
                  |L18.1190|
0004a6  1c68              ADDS     r0,r5,#1              ;405
0004a8  f5b07f00          CMP      r0,#0x200             ;405
0004ac  dd01              BLE      |L18.1202|
0004ae  2002              MOVS     r0,#2                 ;407
0004b0  e5c7              B        |L18.66|
                  |L18.1202|
0004b2  69a0              LDR      r0,[r4,#0x18]         ;409
0004b4  6840              LDR      r0,[r0,#4]            ;409
0004b6  9006              STR      r0,[sp,#0x18]         ;409
0004b8  69a0              LDR      r0,[r4,#0x18]         ;410
0004ba  7806              LDRB     r6,[r0,#0]            ;410
0004bc  9806              LDR      r0,[sp,#0x18]         ;413
0004be  0f40              LSRS     r0,r0,#29             ;413
0004c0  b900              CBNZ     r0,|L18.1220|
0004c2  e005              B        |L18.1232|
                  |L18.1220|
0004c4  f240119d          MOV      r1,#0x19d             ;413
0004c8  f2af00d4          ADR      r0,|L18.1016|
0004cc  f7fffffe          BL       check_failed
                  |L18.1232|
0004d0  b90e              CBNZ     r6,|L18.1238|
0004d2  2001              MOVS     r0,#1                 ;414
0004d4  e000              B        |L18.1240|
                  |L18.1238|
0004d6  2000              MOVS     r0,#0                 ;414
                  |L18.1240|
0004d8  2e01              CMP      r6,#1                 ;414
0004da  d101              BNE      |L18.1248|
0004dc  2101              MOVS     r1,#1                 ;414
0004de  e000              B        |L18.1250|
                  |L18.1248|
0004e0  2100              MOVS     r1,#0                 ;414
                  |L18.1250|
0004e2  4308              ORRS     r0,r0,r1              ;414
0004e4  b100              CBZ      r0,|L18.1256|
0004e6  e005              B        |L18.1268|
                  |L18.1256|
0004e8  f44f71cf          MOV      r1,#0x19e             ;414
0004ec  f2af00f8          ADR      r0,|L18.1016|
0004f0  f7fffffe          BL       check_failed
                  |L18.1268|
0004f4  9806              LDR      r0,[sp,#0x18]         ;416
0004f6  ea407b46          ORR      r11,r0,r6,LSL #29     ;416
0004fa  4874              LDR      r0,|L18.1740|
0004fc  8800              LDRH     r0,[r0,#0]            ;417  ; CANAF_ext_cnt
0004fe  b150              CBZ      r0,|L18.1302|
000500  1e68              SUBS     r0,r5,#1              ;419
000502  4970              LDR      r1,|L18.1732|
000504  f8510020          LDR      r0,[r1,r0,LSL #2]     ;419
000508  9005              STR      r0,[sp,#0x14]         ;419
00050a  9805              LDR      r0,[sp,#0x14]         ;421
00050c  4558              CMP      r0,r11                ;421
00050e  d902              BLS      |L18.1302|
000510  2005              MOVS     r0,#5                 ;423
000512  e596              B        |L18.66|
                  |L18.1300|
000514  e013              B        |L18.1342|
                  |L18.1302|
000516  496b              LDR      r1,|L18.1732|
000518  f841b025          STR      r11,[r1,r5,LSL #2]    ;426
00051c  486b              LDR      r0,|L18.1740|
00051e  8800              LDRH     r0,[r0,#0]            ;427  ; CANAF_ext_cnt
000520  1c40              ADDS     r0,r0,#1              ;427
000522  496a              LDR      r1,|L18.1740|
000524  8008              STRH     r0,[r1,#0]            ;427
000526  1c68              ADDS     r0,r5,#1              ;428
000528  b285              UXTH     r5,r0                 ;428
00052a  69a0              LDR      r0,[r4,#0x18]         ;429
00052c  3008              ADDS     r0,r0,#8              ;429
00052e  61a0              STR      r0,[r4,#0x18]         ;429
000530  f1090001          ADD      r0,r9,#1              ;403
000534  fa1ff980          UXTH     r9,r0                 ;403
                  |L18.1336|
000538  7f20              LDRB     r0,[r4,#0x1c]         ;403
00053a  4548              CMP      r0,r9                 ;403
00053c  dcb3              BGT      |L18.1190|
                  |L18.1342|
00053e  6a20              LDR      r0,[r4,#0x20]         ;434
000540  2800              CMP      r0,#0                 ;434
000542  d07d              BEQ      |L18.1600|
000544  f04f0900          MOV      r9,#0                 ;436
000548  e083              B        |L18.1618|
                  |L18.1354|
00054a  1ca8              ADDS     r0,r5,#2              ;438
00054c  f5b07f00          CMP      r0,#0x200             ;438
000550  dd01              BLE      |L18.1366|
000552  2002              MOVS     r0,#2                 ;440
000554  e575              B        |L18.66|
                  |L18.1366|
000556  6a20              LDR      r0,[r4,#0x20]         ;442
000558  7806              LDRB     r6,[r0,#0]            ;442
00055a  6a20              LDR      r0,[r4,#0x20]         ;443
00055c  f890a001          LDRB     r10,[r0,#1]           ;443
000560  6a20              LDR      r0,[r4,#0x20]         ;444
000562  6840              LDR      r0,[r0,#4]            ;444
000564  9002              STR      r0,[sp,#8]            ;444
000566  6a20              LDR      r0,[r4,#0x20]         ;445
000568  6880              LDR      r0,[r0,#8]            ;445
00056a  9001              STR      r0,[sp,#4]            ;445
00056c  b90e              CBNZ     r6,|L18.1394|
00056e  2001              MOVS     r0,#1                 ;448
000570  e000              B        |L18.1396|
                  |L18.1394|
000572  2000              MOVS     r0,#0                 ;448
                  |L18.1396|
000574  2e01              CMP      r6,#1                 ;448
000576  d101              BNE      |L18.1404|
000578  2101              MOVS     r1,#1                 ;448
00057a  e000              B        |L18.1406|
                  |L18.1404|
00057c  2100              MOVS     r1,#0                 ;448
                  |L18.1406|
00057e  4308              ORRS     r0,r0,r1              ;448
000580  b100              CBZ      r0,|L18.1412|
000582  e005              B        |L18.1424|
                  |L18.1412|
000584  f44f71e0          MOV      r1,#0x1c0             ;448
000588  f2af1094          ADR      r0,|L18.1016|
00058c  f7fffffe          BL       check_failed
                  |L18.1424|
000590  f1ba0f00          CMP      r10,#0                ;449
000594  d101              BNE      |L18.1434|
000596  2001              MOVS     r0,#1                 ;449
000598  e000              B        |L18.1436|
                  |L18.1434|
00059a  2000              MOVS     r0,#0                 ;449
                  |L18.1436|
00059c  f1ba0f01          CMP      r10,#1                ;449
0005a0  d101              BNE      |L18.1446|
0005a2  2101              MOVS     r1,#1                 ;449
0005a4  e000              B        |L18.1448|
                  |L18.1446|
0005a6  2100              MOVS     r1,#0                 ;449
                  |L18.1448|
0005a8  4308              ORRS     r0,r0,r1              ;449
0005aa  b100              CBZ      r0,|L18.1454|
0005ac  e005              B        |L18.1466|
                  |L18.1454|
0005ae  f24011c1          MOV      r1,#0x1c1             ;449
0005b2  f2af10bc          ADR      r0,|L18.1016|
0005b6  f7fffffe          BL       check_failed
                  |L18.1466|
0005ba  9802              LDR      r0,[sp,#8]            ;450
0005bc  0f40              LSRS     r0,r0,#29             ;450
0005be  b900              CBNZ     r0,|L18.1474|
0005c0  e005              B        |L18.1486|
                  |L18.1474|
0005c2  f44f71e1          MOV      r1,#0x1c2             ;450
0005c6  f2af10d0          ADR      r0,|L18.1016|
0005ca  f7fffffe          BL       check_failed
                  |L18.1486|
0005ce  9801              LDR      r0,[sp,#4]            ;451
0005d0  0f40              LSRS     r0,r0,#29             ;451
0005d2  b900              CBNZ     r0,|L18.1494|
0005d4  e005              B        |L18.1506|
                  |L18.1494|
0005d6  f24011c3          MOV      r1,#0x1c3             ;451
0005da  f2af10e4          ADR      r0,|L18.1016|
0005de  f7fffffe          BL       check_failed
                  |L18.1506|
0005e2  f04f0b00          MOV      r11,#0                ;453
0005e6  483a              LDR      r0,|L18.1744|
0005e8  8800              LDRH     r0,[r0,#0]            ;454  ; CANAF_gext_cnt
0005ea  b190              CBZ      r0,|L18.1554|
0005ec  1e68              SUBS     r0,r5,#1              ;456
0005ee  4935              LDR      r1,|L18.1732|
0005f0  f8510020          LDR      r0,[r1,r0,LSL #2]     ;456
0005f4  9005              STR      r0,[sp,#0x14]         ;456
0005f6  4556              CMP      r6,r10                ;458
0005f8  d109              BNE      |L18.1550|
0005fa  e9dd1001          LDRD     r1,r0,[sp,#4]         ;458
0005fe  4288              CMP      r0,r1                 ;458
000600  d805              BHI      |L18.1550|
000602  9802              LDR      r0,[sp,#8]            ;458
000604  ea407146          ORR      r1,r0,r6,LSL #29      ;458
000608  9805              LDR      r0,[sp,#0x14]         ;458
00060a  4281              CMP      r1,r0                 ;458
00060c  d201              BCS      |L18.1554|
                  |L18.1550|
00060e  2005              MOVS     r0,#5                 ;460
000610  e517              B        |L18.66|
                  |L18.1554|
000612  9802              LDR      r0,[sp,#8]            ;463
000614  ea407b46          ORR      r11,r0,r6,LSL #29     ;463
000618  4628              MOV      r0,r5                 ;464
00061a  1c69              ADDS     r1,r5,#1              ;464
00061c  b28d              UXTH     r5,r1                 ;464
00061e  4929              LDR      r1,|L18.1732|
000620  f841b020          STR      r11,[r1,r0,LSL #2]    ;464
000624  9801              LDR      r0,[sp,#4]            ;465
000626  ea407b4a          ORR      r11,r0,r10,LSL #29    ;465
00062a  4628              MOV      r0,r5                 ;466
00062c  1c69              ADDS     r1,r5,#1              ;466
00062e  b28d              UXTH     r5,r1                 ;466
000630  4924              LDR      r1,|L18.1732|
000632  f841b020          STR      r11,[r1,r0,LSL #2]    ;466
000636  4826              LDR      r0,|L18.1744|
000638  8800              LDRH     r0,[r0,#0]            ;467  ; CANAF_gext_cnt
00063a  1c40              ADDS     r0,r0,#1              ;467
00063c  4924              LDR      r1,|L18.1744|
00063e  e000              B        |L18.1602|
                  |L18.1600|
000640  e00c              B        |L18.1628|
                  |L18.1602|
000642  8008              STRH     r0,[r1,#0]            ;467
000644  6a20              LDR      r0,[r4,#0x20]         ;468
000646  300c              ADDS     r0,r0,#0xc            ;468
000648  6220              STR      r0,[r4,#0x20]         ;468
00064a  f1090001          ADD      r0,r9,#1              ;436
00064e  fa1ff980          UXTH     r9,r0                 ;436
                  |L18.1618|
000652  f8940024          LDRB     r0,[r4,#0x24]         ;436
000656  4548              CMP      r0,r9                 ;436
000658  f73faf77          BGT      |L18.1354|
                  |L18.1628|
00065c  481d              LDR      r0,|L18.1748|
00065e  8800              LDRH     r0,[r0,#0]            ;472  ; CANAF_FullCAN_cnt
000660  1c40              ADDS     r0,r0,#1              ;472
000662  1040              ASRS     r0,r0,#1              ;472
000664  0080              LSLS     r0,r0,#2              ;472
000666  491c              LDR      r1,|L18.1752|
000668  6048              STR      r0,[r1,#4]            ;472
00066a  4608              MOV      r0,r1                 ;473
00066c  6841              LDR      r1,[r0,#4]            ;473
00066e  481b              LDR      r0,|L18.1756|
000670  8800              LDRH     r0,[r0,#0]            ;473  ; CANAF_std_cnt
000672  1c40              ADDS     r0,r0,#1              ;473
000674  1040              ASRS     r0,r0,#1              ;473
000676  eb010080          ADD      r0,r1,r0,LSL #2       ;473
00067a  4917              LDR      r1,|L18.1752|
00067c  6088              STR      r0,[r1,#8]            ;473
00067e  4608              MOV      r0,r1                 ;474
000680  6880              LDR      r0,[r0,#8]            ;474
000682  4911              LDR      r1,|L18.1736|
000684  8809              LDRH     r1,[r1,#0]            ;474  ; CANAF_gstd_cnt
000686  eb000081          ADD      r0,r0,r1,LSL #2       ;474
00068a  4913              LDR      r1,|L18.1752|
00068c  60c8              STR      r0,[r1,#0xc]          ;474
00068e  4608              MOV      r0,r1                 ;475
000690  68c0              LDR      r0,[r0,#0xc]          ;475
000692  490e              LDR      r1,|L18.1740|
000694  8809              LDRH     r1,[r1,#0]            ;475  ; CANAF_ext_cnt
000696  eb000081          ADD      r0,r0,r1,LSL #2       ;475
00069a  490f              LDR      r1,|L18.1752|
00069c  6108              STR      r0,[r1,#0x10]         ;475
00069e  4608              MOV      r0,r1                 ;476
0006a0  6900              LDR      r0,[r0,#0x10]         ;476
0006a2  490b              LDR      r1,|L18.1744|
0006a4  8809              LDRH     r1,[r1,#0]            ;476  ; CANAF_gext_cnt
0006a6  eb0000c1          ADD      r0,r0,r1,LSL #3       ;476
0006aa  490b              LDR      r1,|L18.1752|
0006ac  6148              STR      r0,[r1,#0x14]         ;476
0006ae  480c              LDR      r0,|L18.1760|
0006b0  7800              LDRB     r0,[r0,#0]            ;478  ; FULLCAN_ENABLE
0006b2  b910              CBNZ     r0,|L18.1722|
0006b4  2000              MOVS     r0,#0                 ;480
0006b6  6008              STR      r0,[r1,#0]            ;480
0006b8  e002              B        |L18.1728|
                  |L18.1722|
0006ba  2004              MOVS     r0,#4                 ;484
0006bc  4906              LDR      r1,|L18.1752|
0006be  6008              STR      r0,[r1,#0]            ;484
                  |L18.1728|
0006c0  2001              MOVS     r0,#1                 ;486
0006c2  e4be              B        |L18.66|
;;;488    /********************************************************************//**
                          ENDP

                  |L18.1732|
                          DCD      0x40038000
                  |L18.1736|
                          DCD      CANAF_gstd_cnt
                  |L18.1740|
                          DCD      CANAF_ext_cnt
                  |L18.1744|
                          DCD      CANAF_gext_cnt
                  |L18.1748|
                          DCD      CANAF_FullCAN_cnt
                  |L18.1752|
                          DCD      0x4003c000
                  |L18.1756|
                          DCD      CANAF_std_cnt
                  |L18.1760|
                          DCD      FULLCAN_ENABLE

                          AREA ||i.FCAN_ReadObj||, CODE, READONLY, ALIGN=2

                  FCAN_ReadObj PROC
;;;1559    *********************************************************************/
;;;1560   CAN_ERROR FCAN_ReadObj (LPC_CANAF_TypeDef* CANAFx, CAN_MSG_Type *CAN_Msg)
000000  e92d5ff3          PUSH     {r0,r1,r4-r12,lr}
;;;1561   {
000004  460c              MOV      r4,r1
;;;1562   	uint32_t *pSrc, data;
;;;1563   	uint32_t interrut_word, msg_idx, test_bit, head_idx, tail_idx;
;;;1564   
;;;1565   	CHECK_PARAM(PARAM_CANAFx(CANAFx));
000006  4935              LDR      r1,|L19.220|
000008  9800              LDR      r0,[sp,#0]
00000a  4288              CMP      r0,r1
00000c  d100              BNE      |L19.16|
00000e  e004              B        |L19.26|
                  |L19.16|
000010  f240611d          MOV      r1,#0x61d
000014  a032              ADR      r0,|L19.224|
000016  f7fffffe          BL       check_failed
                  |L19.26|
;;;1566   
;;;1567   	interrut_word = 0;
00001a  2700              MOVS     r7,#0
;;;1568   
;;;1569   	if (LPC_CANAF->FCANIC0 != 0)
00001c  482f              LDR      r0,|L19.220|
00001e  6a40              LDR      r0,[r0,#0x24]
000020  b130              CBZ      r0,|L19.48|
;;;1570   	{
;;;1571   		interrut_word = LPC_CANAF->FCANIC0;
000022  482e              LDR      r0,|L19.220|
000024  6a47              LDR      r7,[r0,#0x24]
;;;1572   		head_idx = 0;
000026  f04f0900          MOV      r9,#0
;;;1573   		tail_idx = 31;
00002a  f04f0a1f          MOV      r10,#0x1f
00002e  e008              B        |L19.66|
                  |L19.48|
;;;1574   	}
;;;1575   	else if (LPC_CANAF->FCANIC1 != 0)
000030  482a              LDR      r0,|L19.220|
000032  6a80              LDR      r0,[r0,#0x28]
000034  b128              CBZ      r0,|L19.66|
;;;1576   	{
;;;1577   		interrut_word = LPC_CANAF->FCANIC1;
000036  4829              LDR      r0,|L19.220|
000038  6a87              LDR      r7,[r0,#0x28]
;;;1578   		head_idx = 32;
00003a  f04f0920          MOV      r9,#0x20
;;;1579   		tail_idx = 63;
00003e  f04f0a3f          MOV      r10,#0x3f
                  |L19.66|
;;;1580   	}
;;;1581   
;;;1582   	if (interrut_word != 0)
000042  2f00              CMP      r7,#0
000044  d047              BEQ      |L19.214|
;;;1583   	{
;;;1584   		/* Detect for interrupt pending */
;;;1585   		msg_idx = 0;
000046  f04f0800          MOV      r8,#0
;;;1586   		for (msg_idx = head_idx; msg_idx <= tail_idx; msg_idx++)
00004a  46c8              MOV      r8,r9
00004c  e041              B        |L19.210|
                  |L19.78|
;;;1587   		{
;;;1588   			test_bit = interrut_word & 0x1;
00004e  f0070b01          AND      r11,r7,#1
;;;1589   			interrut_word = interrut_word >> 1;
000052  087f              LSRS     r7,r7,#1
;;;1590   
;;;1591   			if (test_bit)
000054  f1bb0f00          CMP      r11,#0
000058  d039              BEQ      |L19.206|
;;;1592   			{
;;;1593   				pSrc = (uint32_t *) (LPC_CANAF->ENDofTable + LPC_CANAF_RAM_BASE + msg_idx * 12);
00005a  4820              LDR      r0,|L19.220|
00005c  6940              LDR      r0,[r0,#0x14]
00005e  4929              LDR      r1,|L19.260|
000060  4408              ADD      r0,r0,r1
000062  eb080148          ADD      r1,r8,r8,LSL #1
000066  eb000581          ADD      r5,r0,r1,LSL #2
;;;1594   
;;;1595   	    	 	/* Has been finished updating the content */
;;;1596   	    	 	if ((*pSrc & 0x03000000L) == 0x03000000L)
00006a  6828              LDR      r0,[r5,#0]
00006c  f0007040          AND      r0,r0,#0x3000000
000070  f1b07f40          CMP      r0,#0x3000000
000074  d12b              BNE      |L19.206|
;;;1597   	    	 	{
;;;1598   	    	 		/*clear semaphore*/
;;;1599   	    	 		*pSrc &= 0xFCFFFFFF;
000076  6828              LDR      r0,[r5,#0]
000078  f0207040          BIC      r0,r0,#0x3000000
00007c  6028              STR      r0,[r5,#0]
;;;1600   
;;;1601   	    	 		/*Set to DatA*/
;;;1602   	    	 		pSrc++;
00007e  1d2d              ADDS     r5,r5,#4
;;;1603   	    	 		/* Copy to dest buf */
;;;1604   	    	 		data = *pSrc;
000080  682e              LDR      r6,[r5,#0]
;;;1605   	    			*((uint8_t *) &CAN_Msg->dataA[0])= data & 0x000000FF;
000082  7126              STRB     r6,[r4,#4]
;;;1606   	    			*((uint8_t *) &CAN_Msg->dataA[1])= (data & 0x0000FF00)>>8;
000084  0a31              LSRS     r1,r6,#8
000086  7161              STRB     r1,[r4,#5]
;;;1607   	    			*((uint8_t *) &CAN_Msg->dataA[2])= (data & 0x00FF0000)>>16;
000088  0c31              LSRS     r1,r6,#16
00008a  71a1              STRB     r1,[r4,#6]
;;;1608   	    			*((uint8_t *) &CAN_Msg->dataA[3])= (data & 0xFF000000)>>24;
00008c  0e31              LSRS     r1,r6,#24
00008e  71e1              STRB     r1,[r4,#7]
;;;1609   
;;;1610   	    	 		/*Set to DatB*/
;;;1611   	    	 		pSrc++;
000090  1d2d              ADDS     r5,r5,#4
;;;1612   	    	 		/* Copy to dest buf */
;;;1613   	    	 		data = *pSrc;
000092  682e              LDR      r6,[r5,#0]
;;;1614   	    			*((uint8_t *) &CAN_Msg->dataB[0])= data & 0x000000FF;
000094  7226              STRB     r6,[r4,#8]
;;;1615   	    			*((uint8_t *) &CAN_Msg->dataB[1])= (data & 0x0000FF00)>>8;
000096  0a31              LSRS     r1,r6,#8
000098  7261              STRB     r1,[r4,#9]
;;;1616   	    			*((uint8_t *) &CAN_Msg->dataB[2])= (data & 0x00FF0000)>>16;
00009a  0c31              LSRS     r1,r6,#16
00009c  72a1              STRB     r1,[r4,#0xa]
;;;1617   	    			*((uint8_t *) &CAN_Msg->dataB[3])= (data & 0xFF000000)>>24;
00009e  0e31              LSRS     r1,r6,#24
0000a0  72e1              STRB     r1,[r4,#0xb]
;;;1618   	    	 		/*Back to Dat1*/
;;;1619   	    	 		pSrc -= 2;
0000a2  3d08              SUBS     r5,r5,#8
;;;1620   
;;;1621   	    	 		CAN_Msg->id = *pSrc & 0x7FF;
0000a4  8828              LDRH     r0,[r5,#0]
0000a6  f3c0000a          UBFX     r0,r0,#0,#11
0000aa  6020              STR      r0,[r4,#0]
;;;1622   	    	 		CAN_Msg->len = (uint8_t) (*pSrc >> 16) & 0x0F;
0000ac  6828              LDR      r0,[r5,#0]
0000ae  f3c04003          UBFX     r0,r0,#16,#4
0000b2  7320              STRB     r0,[r4,#0xc]
;;;1623   					CAN_Msg->format = 0; //FullCAN Object ID always is 11-bit value
0000b4  2000              MOVS     r0,#0
0000b6  7360              STRB     r0,[r4,#0xd]
;;;1624   					CAN_Msg->type = (uint8_t)(*pSrc >> 30) &0x01;
0000b8  6828              LDR      r0,[r5,#0]
0000ba  f3c07080          UBFX     r0,r0,#30,#1
0000be  73a0              STRB     r0,[r4,#0xe]
;;;1625   	    	 		/*Re-read semaphore*/
;;;1626   	    	 		if ((*pSrc & 0x03000000L) == 0)
0000c0  6828              LDR      r0,[r5,#0]
0000c2  f0007040          AND      r0,r0,#0x3000000
0000c6  b910              CBNZ     r0,|L19.206|
;;;1627   	    	 		{
;;;1628   	    	 			return CAN_OK;
0000c8  2001              MOVS     r0,#1
                  |L19.202|
;;;1629   	    	 		}
;;;1630   	    	 	}
;;;1631   			}
;;;1632   		}
;;;1633   	}
;;;1634   	return CAN_FULL_OBJ_NOT_RCV;
;;;1635   }
0000ca  e8bd9ffc          POP      {r2-r12,pc}
                  |L19.206|
0000ce  f1080801          ADD      r8,r8,#1              ;1586
                  |L19.210|
0000d2  45d0              CMP      r8,r10                ;1586
0000d4  d9bb              BLS      |L19.78|
                  |L19.214|
0000d6  2003              MOVS     r0,#3                 ;1634
0000d8  e7f7              B        |L19.202|
;;;1636   /********************************************************************//**
                          ENDP

0000da  0000              DCW      0x0000
                  |L19.220|
                          DCD      0x4003c000
                  |L19.224|
0000e0  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
0000e4  44726976
0000e8  6572735c
0000ec  736f7572
0000f0  63655c6c
0000f4  70633137
0000f8  78785f63
0000fc  616e2e63
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L19.260|
                          DCD      0x40038000

                          AREA ||i.can_SetBaudrate||, CODE, READONLY, ALIGN=2

                  can_SetBaudrate PROC
;;;84      ***********************************************************************/
;;;85     static void can_SetBaudrate (LPC_CAN_TypeDef *CANx, uint32_t baudrate)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;86     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;87     	uint32_t result = 0;
000008  2700              MOVS     r7,#0
;;;88     	uint8_t NT, TSEG1, TSEG2, BRFail;
;;;89     	uint32_t CANPclk = 0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;90     	uint32_t BRP;
;;;91     	CHECK_PARAM(PARAM_CANx(CANx));
00000e  4829              LDR      r0,|L20.180|
000010  4285              CMP      r5,r0
000012  d002              BEQ      |L20.26|
000014  4828              LDR      r0,|L20.184|
000016  4285              CMP      r5,r0
000018  d100              BNE      |L20.28|
                  |L20.26|
00001a  e003              B        |L20.36|
                  |L20.28|
00001c  215b              MOVS     r1,#0x5b
00001e  a027              ADR      r0,|L20.188|
000020  f7fffffe          BL       check_failed
                  |L20.36|
;;;92     
;;;93     	if (CANx == LPC_CAN1)
000024  4823              LDR      r0,|L20.180|
000026  4285              CMP      r5,r0
000028  d104              BNE      |L20.52|
;;;94     	{
;;;95     		CANPclk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_CAN1);
00002a  201a              MOVS     r0,#0x1a
00002c  f7fffffe          BL       CLKPWR_GetPCLK
000030  9000              STR      r0,[sp,#0]
000032  e003              B        |L20.60|
                  |L20.52|
;;;96     	}
;;;97     	else
;;;98     	{
;;;99     		CANPclk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_CAN2);
000034  201c              MOVS     r0,#0x1c
000036  f7fffffe          BL       CLKPWR_GetPCLK
00003a  9000              STR      r0,[sp,#0]
                  |L20.60|
;;;100    	}
;;;101    	result = CANPclk / baudrate;
00003c  9800              LDR      r0,[sp,#0]
00003e  fbb0f7f6          UDIV     r7,r0,r6
;;;102    	/* Calculate suitable nominal time value
;;;103    	 * NT (nominal time) = (TSEG1 + TSEG2 + 3)
;;;104    	 * NT <= 24
;;;105    	 * TSEG1 >= 2*TSEG2
;;;106    	 */
;;;107    	BRFail = 1;
000042  f04f0a01          MOV      r10,#1
;;;108    	for(NT=24;NT>0;NT=NT-2)
000046  2418              MOVS     r4,#0x18
000048  e01c              B        |L20.132|
                  |L20.74|
;;;109    	{
;;;110    		if ((result%NT)==0)
00004a  fbb7f0f4          UDIV     r0,r7,r4
00004e  fb047010          MLS      r0,r4,r0,r7
000052  b9a8              CBNZ     r0,|L20.128|
;;;111    		{
;;;112    			BRP = result / NT - 1;
000054  fbb7f0f4          UDIV     r0,r7,r4
000058  f1a00b01          SUB      r11,r0,#1
;;;113    			NT--;
00005c  1e60              SUBS     r0,r4,#1
00005e  b2c4              UXTB     r4,r0
;;;114    			TSEG2 = (NT/3) - 1;
000060  2003              MOVS     r0,#3
000062  fb94f0f0          SDIV     r0,r4,r0
000066  1e40              SUBS     r0,r0,#1
000068  f00009ff          AND      r9,r0,#0xff
;;;115    			TSEG1 = NT -(NT/3) - 1;
00006c  2003              MOVS     r0,#3
00006e  fb94f0f0          SDIV     r0,r4,r0
000072  1a20              SUBS     r0,r4,r0
000074  1e40              SUBS     r0,r0,#1
000076  f00008ff          AND      r8,r0,#0xff
;;;116    			BRFail = 0;
00007a  f04f0a00          MOV      r10,#0
;;;117    			break;
00007e  e003              B        |L20.136|
                  |L20.128|
000080  1ea0              SUBS     r0,r4,#2              ;108
000082  b2c4              UXTB     r4,r0                 ;108
                  |L20.132|
000084  2c00              CMP      r4,#0                 ;108
000086  dce0              BGT      |L20.74|
                  |L20.136|
000088  bf00              NOP      
;;;118    		}
;;;119    	}
;;;120    	if(BRFail)
00008a  f1ba0f00          CMP      r10,#0
00008e  d001              BEQ      |L20.148|
;;;121    		while(1); // Failed to calculate exact CAN baud rate
000090  bf00              NOP      
                  |L20.146|
000092  e7fe              B        |L20.146|
                  |L20.148|
;;;122    	/* Enter reset mode */
;;;123    	CANx->MOD = 0x01;
000094  2001              MOVS     r0,#1
000096  6028              STR      r0,[r5,#0]
;;;124    	/* Set bit timing
;;;125    	 * Default: SAM = 0x00;
;;;126    	 *          SJW = 0x03;
;;;127    	 */
;;;128    	CANx->BTR  = (TSEG2<<20)|(TSEG1<<16)|(3<<14)|BRP;
000098  ea4f5009          LSL      r0,r9,#20
00009c  ea404008          ORR      r0,r0,r8,LSL #16
0000a0  f4404040          ORR      r0,r0,#0xc000
0000a4  ea40000b          ORR      r0,r0,r11
0000a8  6168              STR      r0,[r5,#0x14]
;;;129    	/* Return to normal operating */
;;;130    	CANx->MOD = 0;
0000aa  2000              MOVS     r0,#0
0000ac  6028              STR      r0,[r5,#0]
;;;131    }
0000ae  e8bd8ff8          POP      {r3-r11,pc}
;;;132    /* End of Private Functions ----------------------------------------------------*/
                          ENDP

0000b2  0000              DCW      0x0000
                  |L20.180|
                          DCD      0x40044000
                  |L20.184|
                          DCD      0x40048000
                  |L20.188|
0000bc  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_can.c",0
0000c0  44726976
0000c4  6572735c
0000c8  736f7572
0000cc  63655c6c
0000d0  70633137
0000d4  78785f63
0000d8  616e2e63
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=1

                  FULLCAN_ENABLE
000000  0000              DCB      0x00,0x00
                  CANAF_FullCAN_cnt
000002  0000              DCW      0x0000
                  CANAF_std_cnt
000004  0000              DCW      0x0000
                  CANAF_gstd_cnt
000006  0000              DCW      0x0000
                  CANAF_ext_cnt
000008  0000              DCW      0x0000
                  CANAF_gext_cnt
00000a  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "Lib\\Drivers\\source\\lpc17xx_can.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc17xx_can_c_dfdfc592____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_lpc17xx_can_c_dfdfc592____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc17xx_can_c_dfdfc592____REVSH|
#line 144
|__asm___13_lpc17xx_can_c_dfdfc592____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
