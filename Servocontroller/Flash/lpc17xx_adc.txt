; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\lpc17xx_adc.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_adc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\lpc17xx_adc.crf Lib\Drivers\source\lpc17xx_adc.c]
                          THUMB

                          AREA ||i.ADC_BurstCmd||, CODE, READONLY, ALIGN=2

                  ADC_BurstCmd PROC
;;;164    **********************************************************************/
;;;165    void ADC_BurstCmd(LPC_ADC_TypeDef *ADCx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;166    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;167    	CHECK_PARAM(PARAM_ADCx(ADCx));
000006  4809              LDR      r0,|L1.44|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L1.14|
00000c  e003              B        |L1.22|
                  |L1.14|
00000e  21a7              MOVS     r1,#0xa7
000010  a007              ADR      r0,|L1.48|
000012  f7fffffe          BL       check_failed
                  |L1.22|
;;;168    
;;;169    	ADCx->ADCR &= ~ADC_CR_BURST;
000016  6820              LDR      r0,[r4,#0]
000018  f4203080          BIC      r0,r0,#0x10000
00001c  6020              STR      r0,[r4,#0]
;;;170    	if (NewState){
00001e  b11d              CBZ      r5,|L1.40|
;;;171    		ADCx->ADCR |= ADC_CR_BURST;
000020  6820              LDR      r0,[r4,#0]
000022  f4403080          ORR      r0,r0,#0x10000
000026  6020              STR      r0,[r4,#0]
                  |L1.40|
;;;172    	}
;;;173    }
000028  bd70              POP      {r4-r6,pc}
;;;174    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x40034000
                  |L1.48|
000030  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
000034  44726976
000038  6572735c
00003c  736f7572
000040  63655c6c
000044  70633137
000048  78785f61
00004c  64632e63
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.ADC_ChannelCmd||, CODE, READONLY, ALIGN=2

                  ADC_ChannelCmd PROC
;;;244    **********************************************************************/
;;;245    void ADC_ChannelCmd (LPC_ADC_TypeDef *ADCx, uint8_t Channel, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;246    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;247    	CHECK_PARAM(PARAM_ADCx(ADCx));
000008  4810              LDR      r0,|L2.76|
00000a  4284              CMP      r4,r0
00000c  d100              BNE      |L2.16|
00000e  e003              B        |L2.24|
                  |L2.16|
000010  21f7              MOVS     r1,#0xf7
000012  a00f              ADR      r0,|L2.80|
000014  f7fffffe          BL       check_failed
                  |L2.24|
;;;248    	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(Channel));
000018  b105              CBZ      r5,|L2.28|
00001a  bf00              NOP      
                  |L2.28|
00001c  bf00              NOP      
;;;249    
;;;250    	if (NewState == ENABLE) {
00001e  2e01              CMP      r6,#1
000020  d105              BNE      |L2.46|
;;;251    		ADCx->ADCR |= ADC_CR_CH_SEL(Channel);
000022  6820              LDR      r0,[r4,#0]
000024  2101              MOVS     r1,#1
000026  40a9              LSLS     r1,r1,r5
000028  4308              ORRS     r0,r0,r1
00002a  6020              STR      r0,[r4,#0]
00002c  e00c              B        |L2.72|
                  |L2.46|
;;;252    	} else {
;;;253            if (ADCx->ADCR & ADC_CR_START_MASK) //need to stop START bits before disable channel
00002e  6820              LDR      r0,[r4,#0]
000030  f00060e0          AND      r0,r0,#0x7000000
000034  b118              CBZ      r0,|L2.62|
;;;254    		   ADCx->ADCR &= ~ADC_CR_START_MASK;
000036  6820              LDR      r0,[r4,#0]
000038  f02060e0          BIC      r0,r0,#0x7000000
00003c  6020              STR      r0,[r4,#0]
                  |L2.62|
;;;255    		ADCx->ADCR &= ~ADC_CR_CH_SEL(Channel);
00003e  6820              LDR      r0,[r4,#0]
000040  2101              MOVS     r1,#1
000042  40a9              LSLS     r1,r1,r5
000044  4388              BICS     r0,r0,r1
000046  6020              STR      r0,[r4,#0]
                  |L2.72|
;;;256    	}
;;;257    }
000048  bd70              POP      {r4-r6,pc}
;;;258    
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
                          DCD      0x40034000
                  |L2.80|
000050  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
000054  44726976
000058  6572735c
00005c  736f7572
000060  63655c6c
000064  70633137
000068  78785f61
00006c  64632e63
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.ADC_ChannelGetData||, CODE, READONLY, ALIGN=2

                  ADC_ChannelGetData PROC
;;;264    **********************************************************************/
;;;265    uint16_t ADC_ChannelGetData(LPC_ADC_TypeDef *ADCx, uint8_t channel)
000000  b570              PUSH     {r4-r6,lr}
;;;266    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;267    	uint32_t adc_value;
;;;268    
;;;269    	CHECK_PARAM(PARAM_ADCx(ADCx));
000006  4809              LDR      r0,|L3.44|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L3.14|
00000c  e004              B        |L3.24|
                  |L3.14|
00000e  f240110d          MOV      r1,#0x10d
000012  a007              ADR      r0,|L3.48|
000014  f7fffffe          BL       check_failed
                  |L3.24|
;;;270    	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));
000018  b105              CBZ      r5,|L3.28|
00001a  bf00              NOP      
                  |L3.28|
00001c  bf00              NOP      
;;;271    
;;;272    	adc_value = *(uint32_t *) ((&ADCx->ADDR0) + channel);
00001e  f1040010          ADD      r0,r4,#0x10
000022  f8506025          LDR      r6,[r0,r5,LSL #2]
;;;273    	return ADC_DR_RESULT(adc_value);
000026  f3c6100b          UBFX     r0,r6,#4,#12
;;;274    }
00002a  bd70              POP      {r4-r6,pc}
;;;275    
                          ENDP

                  |L3.44|
                          DCD      0x40034000
                  |L3.48|
000030  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
000034  44726976
000038  6572735c
00003c  736f7572
000040  63655c6c
000044  70633137
000048  78785f61
00004c  64632e63
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.ADC_ChannelGetStatus||, CODE, READONLY, ALIGN=2

                  ADC_ChannelGetStatus PROC
;;;284    **********************************************************************/
;;;285    FlagStatus ADC_ChannelGetStatus(LPC_ADC_TypeDef *ADCx, uint8_t channel, uint32_t StatusType)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;286    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;287    	uint32_t temp;
;;;288    
;;;289    	CHECK_PARAM(PARAM_ADCx(ADCx));
00000a  4812              LDR      r0,|L4.84|
00000c  4287              CMP      r7,r0
00000e  d100              BNE      |L4.18|
000010  e004              B        |L4.28|
                  |L4.18|
000012  f2401121          MOV      r1,#0x121
000016  a010              ADR      r0,|L4.88|
000018  f7fffffe          BL       check_failed
                  |L4.28|
;;;290    	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));
00001c  b106              CBZ      r6,|L4.32|
00001e  bf00              NOP      
                  |L4.32|
000020  bf00              NOP      
;;;291    	CHECK_PARAM(PARAM_ADC_DATA_STATUS(StatusType));
000022  b10c              CBZ      r4,|L4.40|
000024  2c01              CMP      r4,#1
000026  d100              BNE      |L4.42|
                  |L4.40|
000028  e004              B        |L4.52|
                  |L4.42|
00002a  f2401123          MOV      r1,#0x123
00002e  a00a              ADR      r0,|L4.88|
000030  f7fffffe          BL       check_failed
                  |L4.52|
;;;292    
;;;293    	temp =  *(uint32_t *) ((&ADCx->ADDR0) + channel);
000034  f1070010          ADD      r0,r7,#0x10
000038  f8505026          LDR      r5,[r0,r6,LSL #2]
;;;294    	if (StatusType) {
00003c  b114              CBZ      r4,|L4.68|
;;;295    		temp &= ADC_DR_DONE_FLAG;
00003e  f0054500          AND      r5,r5,#0x80000000
000042  e001              B        |L4.72|
                  |L4.68|
;;;296    	}else{
;;;297    		temp &= ADC_DR_OVERRUN_FLAG;
000044  f0054580          AND      r5,r5,#0x40000000
                  |L4.72|
;;;298    	}
;;;299    	if (temp) {
000048  b115              CBZ      r5,|L4.80|
;;;300    		return SET;
00004a  2001              MOVS     r0,#1
                  |L4.76|
;;;301    	} else {
;;;302    		return RESET;
;;;303    	}
;;;304    
;;;305    }
00004c  e8bd81f0          POP      {r4-r8,pc}
                  |L4.80|
000050  2000              MOVS     r0,#0                 ;302
000052  e7fb              B        |L4.76|
;;;306    
                          ENDP

                  |L4.84|
                          DCD      0x40034000
                  |L4.88|
000058  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
00005c  44726976
000060  6572735c
000064  736f7572
000068  63655c6c
00006c  70633137
000070  78785f61
000074  64632e63
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0

                          AREA ||i.ADC_DeInit||, CODE, READONLY, ALIGN=2

                  ADC_DeInit PROC
;;;102    **********************************************************************/
;;;103    void ADC_DeInit(LPC_ADC_TypeDef *ADCx)
000000  b510              PUSH     {r4,lr}
;;;104    {
000002  4604              MOV      r4,r0
;;;105    	CHECK_PARAM(PARAM_ADCx(ADCx));
000004  480e              LDR      r0,|L5.64|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L5.12|
00000a  e003              B        |L5.20|
                  |L5.12|
00000c  2169              MOVS     r1,#0x69
00000e  a00d              ADR      r0,|L5.68|
000010  f7fffffe          BL       check_failed
                  |L5.20|
;;;106        if (ADCx->ADCR & ADC_CR_START_MASK) //need to stop START bits before DeInit
000014  6820              LDR      r0,[r4,#0]
000016  f00060e0          AND      r0,r0,#0x7000000
00001a  b118              CBZ      r0,|L5.36|
;;;107            ADCx->ADCR &= ~ADC_CR_START_MASK;
00001c  6820              LDR      r0,[r4,#0]
00001e  f02060e0          BIC      r0,r0,#0x7000000
000022  6020              STR      r0,[r4,#0]
                  |L5.36|
;;;108         // Clear SEL bits
;;;109        ADCx->ADCR &= ~0xFF;
000024  6820              LDR      r0,[r4,#0]
000026  f02000ff          BIC      r0,r0,#0xff
00002a  6020              STR      r0,[r4,#0]
;;;110    	// Clear PDN bit
;;;111    	ADCx->ADCR &= ~ADC_CR_PDN;
00002c  6820              LDR      r0,[r4,#0]
00002e  f4201000          BIC      r0,r0,#0x200000
000032  6020              STR      r0,[r4,#0]
;;;112    	// Turn on power and clock
;;;113    	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCAD, DISABLE);
000034  2100              MOVS     r1,#0
000036  f44f5080          MOV      r0,#0x1000
00003a  f7fffffe          BL       CLKPWR_ConfigPPWR
;;;114    }
00003e  bd10              POP      {r4,pc}
;;;115    
                          ENDP

                  |L5.64|
                          DCD      0x40034000
                  |L5.68|
000044  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
000048  44726976
00004c  6572735c
000050  736f7572
000054  63655c6c
000058  70633137
00005c  78785f61
000060  64632e63
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.ADC_EdgeStartConfig||, CODE, READONLY, ALIGN=2

                  ADC_EdgeStartConfig PROC
;;;200    **********************************************************************/
;;;201    void ADC_EdgeStartConfig(LPC_ADC_TypeDef *ADCx, uint8_t EdgeOption)
000000  b570              PUSH     {r4-r6,lr}
;;;202    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;203    	CHECK_PARAM(PARAM_ADCx(ADCx));
000006  480d              LDR      r0,|L6.60|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L6.14|
00000c  e003              B        |L6.22|
                  |L6.14|
00000e  21cb              MOVS     r1,#0xcb
000010  a00b              ADR      r0,|L6.64|
000012  f7fffffe          BL       check_failed
                  |L6.22|
;;;204    	CHECK_PARAM(PARAM_ADC_START_ON_EDGE_OPT(EdgeOption));
000016  b10d              CBZ      r5,|L6.28|
000018  2d01              CMP      r5,#1
00001a  d100              BNE      |L6.30|
                  |L6.28|
00001c  e003              B        |L6.38|
                  |L6.30|
00001e  21cc              MOVS     r1,#0xcc
000020  a007              ADR      r0,|L6.64|
000022  f7fffffe          BL       check_failed
                  |L6.38|
;;;205    
;;;206    	ADCx->ADCR &= ~ADC_CR_EDGE;
000026  6820              LDR      r0,[r4,#0]
000028  f0206000          BIC      r0,r0,#0x8000000
00002c  6020              STR      r0,[r4,#0]
;;;207    	if (EdgeOption){
00002e  b11d              CBZ      r5,|L6.56|
;;;208    		ADCx->ADCR |= ADC_CR_EDGE;
000030  6820              LDR      r0,[r4,#0]
000032  f0406000          ORR      r0,r0,#0x8000000
000036  6020              STR      r0,[r4,#0]
                  |L6.56|
;;;209    	}
;;;210    }
000038  bd70              POP      {r4-r6,pc}
;;;211    
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      0x40034000
                  |L6.64|
000040  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
000044  44726976
000048  6572735c
00004c  736f7572
000050  63655c6c
000054  70633137
000058  78785f61
00005c  64632e63
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.ADC_GetData||, CODE, READONLY, ALIGN=2

                  ADC_GetData PROC
;;;121    *********************************************************************/
;;;122    uint32_t ADC_GetData(uint32_t channel)
000000  4601              MOV      r1,r0
;;;123    {
;;;124    	uint32_t adc_value;
;;;125    
;;;126    	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));
000002  b101              CBZ      r1,|L7.6|
000004  bf00              NOP      
                  |L7.6|
000006  bf00              NOP      
;;;127    
;;;128    	adc_value = *(uint32_t *)((&LPC_ADC->ADDR0) + channel);
000008  4802              LDR      r0,|L7.20|
00000a  f8502021          LDR      r2,[r0,r1,LSL #2]
;;;129    	return ADC_GDR_RESULT(adc_value);
00000e  f3c2100b          UBFX     r0,r2,#4,#12
;;;130    }
000012  4770              BX       lr
;;;131    
                          ENDP

                  |L7.20|
                          DCD      0x40034010

                          AREA ||i.ADC_GlobalGetData||, CODE, READONLY, ALIGN=2

                  ADC_GlobalGetData PROC
;;;311    **********************************************************************/
;;;312    uint32_t ADC_GlobalGetData(LPC_ADC_TypeDef *ADCx)
000000  b510              PUSH     {r4,lr}
;;;313    {
000002  4604              MOV      r4,r0
;;;314    	CHECK_PARAM(PARAM_ADCx(ADCx));
000004  4805              LDR      r0,|L8.28|
000006  4284              CMP      r4,r0
000008  d100              BNE      |L8.12|
00000a  e004              B        |L8.22|
                  |L8.12|
00000c  f44f719d          MOV      r1,#0x13a
000010  a003              ADR      r0,|L8.32|
000012  f7fffffe          BL       check_failed
                  |L8.22|
;;;315    
;;;316    	return ((uint32_t)(ADCx->ADGDR));
000016  6860              LDR      r0,[r4,#4]
;;;317    }
000018  bd10              POP      {r4,pc}
;;;318    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x40034000
                  |L8.32|
000020  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
000024  44726976
000028  6572735c
00002c  736f7572
000030  63655c6c
000034  70633137
000038  78785f61
00003c  64632e63
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.ADC_GlobalGetStatus||, CODE, READONLY, ALIGN=2

                  ADC_GlobalGetStatus PROC
;;;326    **********************************************************************/
;;;327    FlagStatus	ADC_GlobalGetStatus(LPC_ADC_TypeDef *ADCx, uint32_t StatusType)
000000  b570              PUSH     {r4-r6,lr}
;;;328    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;329    	uint32_t temp;
;;;330    
;;;331    	CHECK_PARAM(PARAM_ADCx(ADCx));
000006  480f              LDR      r0,|L9.68|
000008  4286              CMP      r6,r0
00000a  d100              BNE      |L9.14|
00000c  e004              B        |L9.24|
                  |L9.14|
00000e  f240114b          MOV      r1,#0x14b
000012  a00d              ADR      r0,|L9.72|
000014  f7fffffe          BL       check_failed
                  |L9.24|
;;;332    	CHECK_PARAM(PARAM_ADC_DATA_STATUS(StatusType));
000018  b10c              CBZ      r4,|L9.30|
00001a  2c01              CMP      r4,#1
00001c  d100              BNE      |L9.32|
                  |L9.30|
00001e  e004              B        |L9.42|
                  |L9.32|
000020  f44f71a6          MOV      r1,#0x14c
000024  a008              ADR      r0,|L9.72|
000026  f7fffffe          BL       check_failed
                  |L9.42|
;;;333    
;;;334    	temp =  ADCx->ADGDR;
00002a  6875              LDR      r5,[r6,#4]
;;;335    	if (StatusType){
00002c  b114              CBZ      r4,|L9.52|
;;;336    		temp &= ADC_DR_DONE_FLAG;
00002e  f0054500          AND      r5,r5,#0x80000000
000032  e001              B        |L9.56|
                  |L9.52|
;;;337    	}else{
;;;338    		temp &= ADC_DR_OVERRUN_FLAG;
000034  f0054580          AND      r5,r5,#0x40000000
                  |L9.56|
;;;339    	}
;;;340    	if (temp){
000038  b10d              CBZ      r5,|L9.62|
;;;341    		return SET;
00003a  2001              MOVS     r0,#1
                  |L9.60|
;;;342    	}else{
;;;343    		return RESET;
;;;344    	}
;;;345    }
00003c  bd70              POP      {r4-r6,pc}
                  |L9.62|
00003e  2000              MOVS     r0,#0                 ;343
000040  e7fc              B        |L9.60|
;;;346    
                          ENDP

000042  0000              DCW      0x0000
                  |L9.68|
                          DCD      0x40034000
                  |L9.72|
000048  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
00004c  44726976
000050  6572735c
000054  736f7572
000058  63655c6c
00005c  70633137
000060  78785f61
000064  64632e63
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.ADC_Init||, CODE, READONLY, ALIGN=2

                  ADC_Init PROC
;;;67      **********************************************************************/
;;;68     void ADC_Init(LPC_ADC_TypeDef *ADCx, uint32_t rate)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;69     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;70     	uint32_t ADCPClk, temp, tmp;
;;;71     
;;;72     	CHECK_PARAM(PARAM_ADCx(ADCx));
000008  4815              LDR      r0,|L10.96|
00000a  4284              CMP      r4,r0
00000c  d100              BNE      |L10.16|
00000e  e003              B        |L10.24|
                  |L10.16|
000010  2148              MOVS     r1,#0x48
000012  a014              ADR      r0,|L10.100|
000014  f7fffffe          BL       check_failed
                  |L10.24|
;;;73     	CHECK_PARAM(PARAM_ADC_RATE(rate));
000018  b11d              CBZ      r5,|L10.34|
00001a  481b              LDR      r0,|L10.136|
00001c  4285              CMP      r5,r0
00001e  d800              BHI      |L10.34|
000020  e003              B        |L10.42|
                  |L10.34|
000022  2149              MOVS     r1,#0x49
000024  a00f              ADR      r0,|L10.100|
000026  f7fffffe          BL       check_failed
                  |L10.42|
;;;74     
;;;75     	// Turn on power and clock
;;;76     	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCAD, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  0308              LSLS     r0,r1,#12
00002e  f7fffffe          BL       CLKPWR_ConfigPPWR
;;;77     
;;;78     	ADCx->ADCR = 0;
000032  2000              MOVS     r0,#0
000034  6020              STR      r0,[r4,#0]
;;;79     
;;;80     	//Enable PDN bit
;;;81     	tmp = ADC_CR_PDN;
000036  f44f1800          MOV      r8,#0x200000
;;;82     	// Set clock frequency
;;;83     	ADCPClk = CLKPWR_GetPCLK(CLKPWR_PCLKSEL_ADC);
00003a  2018              MOVS     r0,#0x18
00003c  f7fffffe          BL       CLKPWR_GetPCLK
000040  4606              MOV      r6,r0
;;;84     	/* The APB clock (PCLK_ADC0) is divided by (CLKDIV+1) to produce the clock for
;;;85     	 * A/D converter, which should be less than or equal to 13MHz.
;;;86     	 * A fully conversion requires 65 of these clocks.
;;;87     	 * ADC clock = PCLK_ADC0 / (CLKDIV + 1);
;;;88     	 * ADC rate = ADC clock / 65;
;;;89     	 */
;;;90     	temp = rate * 65;
000042  eb051785          ADD      r7,r5,r5,LSL #6
;;;91     	temp = (ADCPClk * 2 + temp)/(2 * temp) - 1; //get the round value by fomular: (2*A + B)/(2*B)
000046  eb070046          ADD      r0,r7,r6,LSL #1
00004a  0079              LSLS     r1,r7,#1
00004c  fbb0f0f1          UDIV     r0,r0,r1
000050  1e47              SUBS     r7,r0,#1
;;;92     	tmp |=  ADC_CR_CLKDIV(temp);
000052  ea482807          ORR      r8,r8,r7,LSL #8
;;;93     
;;;94     	ADCx->ADCR = tmp;
000056  f8c48000          STR      r8,[r4,#0]
;;;95     }
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;96     
                          ENDP

00005e  0000              DCW      0x0000
                  |L10.96|
                          DCD      0x40034000
                  |L10.100|
000064  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
000068  44726976
00006c  6572735c
000070  736f7572
000074  63655c6c
000078  70633137
00007c  78785f61
000080  64632e63
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L10.136|
                          DCD      0x00030d40

                          AREA ||i.ADC_IntConfig||, CODE, READONLY, ALIGN=2

                  ADC_IntConfig PROC
;;;225    **********************************************************************/
;;;226    void ADC_IntConfig (LPC_ADC_TypeDef *ADCx, ADC_TYPE_INT_OPT IntType, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;227    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;228    	CHECK_PARAM(PARAM_ADCx(ADCx));
000008  4814              LDR      r0,|L11.92|
00000a  4285              CMP      r5,r0
00000c  d100              BNE      |L11.16|
00000e  e003              B        |L11.24|
                  |L11.16|
000010  21e4              MOVS     r1,#0xe4
000012  a013              ADR      r0,|L11.96|
000014  f7fffffe          BL       check_failed
                  |L11.24|
;;;229    	CHECK_PARAM(PARAM_ADC_TYPE_INT_OPT(IntType));
000018  b17c              CBZ      r4,|L11.58|
00001a  2c01              CMP      r4,#1
00001c  d00d              BEQ      |L11.58|
00001e  2c02              CMP      r4,#2
000020  d00b              BEQ      |L11.58|
000022  2c03              CMP      r4,#3
000024  d009              BEQ      |L11.58|
000026  2c04              CMP      r4,#4
000028  d007              BEQ      |L11.58|
00002a  2c05              CMP      r4,#5
00002c  d005              BEQ      |L11.58|
00002e  2c06              CMP      r4,#6
000030  d003              BEQ      |L11.58|
000032  2c07              CMP      r4,#7
000034  d001              BEQ      |L11.58|
000036  2c08              CMP      r4,#8
000038  d100              BNE      |L11.60|
                  |L11.58|
00003a  e003              B        |L11.68|
                  |L11.60|
00003c  21e5              MOVS     r1,#0xe5
00003e  a008              ADR      r0,|L11.96|
000040  f7fffffe          BL       check_failed
                  |L11.68|
;;;230    
;;;231    	ADCx->ADINTEN &= ~ADC_INTEN_CH(IntType);
000044  68e8              LDR      r0,[r5,#0xc]
000046  2101              MOVS     r1,#1
000048  40a1              LSLS     r1,r1,r4
00004a  4388              BICS     r0,r0,r1
00004c  60e8              STR      r0,[r5,#0xc]
;;;232    	if (NewState){
00004e  b126              CBZ      r6,|L11.90|
;;;233    		ADCx->ADINTEN |= ADC_INTEN_CH(IntType);
000050  68e9              LDR      r1,[r5,#0xc]
000052  2001              MOVS     r0,#1
000054  40a0              LSLS     r0,r0,r4
000056  4301              ORRS     r1,r1,r0
000058  60e9              STR      r1,[r5,#0xc]
                  |L11.90|
;;;234    	}
;;;235    }
00005a  bd70              POP      {r4-r6,pc}
;;;236    
                          ENDP

                  |L11.92|
                          DCD      0x40034000
                  |L11.96|
000060  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
000064  44726976
000068  6572735c
00006c  736f7572
000070  63655c6c
000074  70633137
000078  78785f61
00007c  64632e63
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0

                          AREA ||i.ADC_PowerdownCmd||, CODE, READONLY, ALIGN=2

                  ADC_PowerdownCmd PROC
;;;182    **********************************************************************/
;;;183    void ADC_PowerdownCmd(LPC_ADC_TypeDef *ADCx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;184    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;185    	CHECK_PARAM(PARAM_ADCx(ADCx));
000006  4809              LDR      r0,|L12.44|
000008  4284              CMP      r4,r0
00000a  d100              BNE      |L12.14|
00000c  e003              B        |L12.22|
                  |L12.14|
00000e  21b9              MOVS     r1,#0xb9
000010  a007              ADR      r0,|L12.48|
000012  f7fffffe          BL       check_failed
                  |L12.22|
;;;186    
;;;187    	ADCx->ADCR &= ~ADC_CR_PDN;
000016  6820              LDR      r0,[r4,#0]
000018  f4201000          BIC      r0,r0,#0x200000
00001c  6020              STR      r0,[r4,#0]
;;;188    	if (NewState){
00001e  b11d              CBZ      r5,|L12.40|
;;;189    		ADCx->ADCR |= ADC_CR_PDN;
000020  6820              LDR      r0,[r4,#0]
000022  f4401000          ORR      r0,r0,#0x200000
000026  6020              STR      r0,[r4,#0]
                  |L12.40|
;;;190    	}
;;;191    }
000028  bd70              POP      {r4-r6,pc}
;;;192    
                          ENDP

00002a  0000              DCW      0x0000
                  |L12.44|
                          DCD      0x40034000
                  |L12.48|
000030  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
000034  44726976
000038  6572735c
00003c  736f7572
000040  63655c6c
000044  70633137
000048  78785f61
00004c  64632e63
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.ADC_StartCmd||, CODE, READONLY, ALIGN=2

                  ADC_StartCmd PROC
;;;146    *********************************************************************/
;;;147    void ADC_StartCmd(LPC_ADC_TypeDef *ADCx, uint8_t start_mode)
000000  b570              PUSH     {r4-r6,lr}
;;;148    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;149    	CHECK_PARAM(PARAM_ADCx(ADCx));
000006  4812              LDR      r0,|L13.80|
000008  4285              CMP      r5,r0
00000a  d100              BNE      |L13.14|
00000c  e003              B        |L13.22|
                  |L13.14|
00000e  2195              MOVS     r1,#0x95
000010  a010              ADR      r0,|L13.84|
000012  f7fffffe          BL       check_failed
                  |L13.22|
;;;150    	CHECK_PARAM(PARAM_ADC_START_OPT(start_mode));
000016  b16c              CBZ      r4,|L13.52|
000018  2c01              CMP      r4,#1
00001a  d00b              BEQ      |L13.52|
00001c  2c02              CMP      r4,#2
00001e  d009              BEQ      |L13.52|
000020  2c03              CMP      r4,#3
000022  d007              BEQ      |L13.52|
000024  2c04              CMP      r4,#4
000026  d005              BEQ      |L13.52|
000028  2c05              CMP      r4,#5
00002a  d003              BEQ      |L13.52|
00002c  2c06              CMP      r4,#6
00002e  d001              BEQ      |L13.52|
000030  2c07              CMP      r4,#7
000032  d100              BNE      |L13.54|
                  |L13.52|
000034  e003              B        |L13.62|
                  |L13.54|
000036  2196              MOVS     r1,#0x96
000038  a006              ADR      r0,|L13.84|
00003a  f7fffffe          BL       check_failed
                  |L13.62|
;;;151    
;;;152    	ADCx->ADCR &= ~ADC_CR_START_MASK;
00003e  6828              LDR      r0,[r5,#0]
000040  f02060e0          BIC      r0,r0,#0x7000000
000044  6028              STR      r0,[r5,#0]
;;;153    	ADCx->ADCR |=ADC_CR_START_MODE_SEL((uint32_t)start_mode);
000046  6828              LDR      r0,[r5,#0]
000048  ea406004          ORR      r0,r0,r4,LSL #24
00004c  6028              STR      r0,[r5,#0]
;;;154    }
00004e  bd70              POP      {r4-r6,pc}
;;;155    
                          ENDP

                  |L13.80|
                          DCD      0x40034000
                  |L13.84|
000054  4c69625c          DCB      "Lib\\Drivers\\source\\lpc17xx_adc.c",0
000058  44726976
00005c  6572735c
000060  736f7572
000064  63655c6c
000068  70633137
00006c  78785f61
000070  64632e63
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0

;*** Start embedded assembler ***

#line 1 "Lib\\Drivers\\source\\lpc17xx_adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc17xx_adc_c_ADC_Init____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_lpc17xx_adc_c_ADC_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_lpc17xx_adc_c_ADC_Init____REVSH|
#line 144
|__asm___13_lpc17xx_adc_c_ADC_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
