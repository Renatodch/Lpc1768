; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\usbhw.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\usbhw.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\usbhw.crf Lib\Usb_Drivers\Src\usbhw.c]
                          THUMB

                          AREA ||i.EPAdr||, CODE, READONLY, ALIGN=1

                  EPAdr PROC
;;;62     
;;;63     uint32_t EPAdr (uint32_t EPNum) {
000000  4601              MOV      r1,r0
;;;64       uint32_t val;
;;;65     
;;;66       val = (EPNum & 0x0F) << 1;
000002  070a              LSLS     r2,r1,#28
000004  0ed0              LSRS     r0,r2,#27
;;;67       if (EPNum & 0x80) {
000006  f0010280          AND      r2,r1,#0x80
00000a  b102              CBZ      r2,|L1.14|
;;;68         val += 1;
00000c  1c40              ADDS     r0,r0,#1
                  |L1.14|
;;;69       }
;;;70       return (val);
;;;71     }
00000e  4770              BX       lr
;;;72     
                          ENDP


                          AREA ||i.RdCmdDat||, CODE, READONLY, ALIGN=2

                  RdCmdDat PROC
;;;129    
;;;130    uint32_t RdCmdDat (uint32_t cmd) {
000000  4601              MOV      r1,r0
;;;131    
;;;132      LPC_USB->USBDevIntClr = CCEMTY_INT | CDFULL_INT;
000002  2030              MOVS     r0,#0x30
000004  4a08              LDR      r2,|L2.40|
000006  6010              STR      r0,[r2,#0]
;;;133      LPC_USB->USBCmdCode = cmd;
000008  4808              LDR      r0,|L2.44|
00000a  f8c01210          STR      r1,[r0,#0x210]
;;;134      while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0);
00000e  bf00              NOP      
                  |L2.16|
000010  4805              LDR      r0,|L2.40|
000012  3808              SUBS     r0,r0,#8
000014  6800              LDR      r0,[r0,#0]
000016  f0000020          AND      r0,r0,#0x20
00001a  2800              CMP      r0,#0
00001c  d0f8              BEQ      |L2.16|
;;;135      return (LPC_USB->USBCmdData);
00001e  4802              LDR      r0,|L2.40|
000020  300c              ADDS     r0,r0,#0xc
000022  6800              LDR      r0,[r0,#0]
;;;136    }
000024  4770              BX       lr
;;;137    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x5000c208
                  |L2.44|
                          DCD      0x5000c000

                          AREA ||i.USB_ClearEPBuf||, CODE, READONLY, ALIGN=2

                  USB_ClearEPBuf PROC
;;;399    
;;;400    void USB_ClearEPBuf (uint32_t EPNum) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;401      WrCmdEP(EPNum, CMD_CLR_BUF);
000004  4902              LDR      r1,|L3.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       WrCmdEP
;;;402    }
00000c  bd10              POP      {r4,pc}
;;;403    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x00f20500

                          AREA ||i.USB_ClrStallEP||, CODE, READONLY, ALIGN=2

                  USB_ClrStallEP PROC
;;;386    
;;;387    void USB_ClrStallEP (uint32_t EPNum) {
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
;;;388      WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       EPAdr
00000a  4904              LDR      r1,|L4.28|
00000c  ea414500          ORR      r5,r1,r0,LSL #16
000010  1389              ASRS     r1,r1,#14
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       WrCmdDat
;;;389    }
000018  bd30              POP      {r4,r5,pc}
;;;390    
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x00400500

                          AREA ||i.USB_ConfigEP||, CODE, READONLY, ALIGN=2

                  USB_ConfigEP PROC
;;;303    
;;;304    void USB_ConfigEP (USB_ENDPOINT_DESCRIPTOR *pEPD) {
000000  b510              PUSH     {r4,lr}
000002  4603              MOV      r3,r0
;;;305      uint32_t num;
;;;306    
;;;307      num = EPAdr(pEPD->bEndpointAddress);
000004  7898              LDRB     r0,[r3,#2]
000006  f7fffffe          BL       EPAdr
00000a  4604              MOV      r4,r0
;;;308      LPC_USB->USBReEp |= (1 << num);
00000c  480d              LDR      r0,|L5.68|
00000e  6800              LDR      r0,[r0,#0]
000010  2101              MOVS     r1,#1
000012  40a1              LSLS     r1,r1,r4
000014  4308              ORRS     r0,r0,r1
000016  490c              LDR      r1,|L5.72|
000018  f8c10244          STR      r0,[r1,#0x244]
;;;309      LPC_USB->USBEpInd = num;
00001c  4809              LDR      r0,|L5.68|
00001e  1d00              ADDS     r0,r0,#4
000020  6004              STR      r4,[r0,#0]
;;;310      LPC_USB->USBMaxPSize = pEPD->wMaxPacketSize;
000022  8898              LDRH     r0,[r3,#4]
000024  f8c1024c          STR      r0,[r1,#0x24c]
;;;311      while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0);
000028  bf00              NOP      
                  |L5.42|
00002a  4806              LDR      r0,|L5.68|
00002c  3844              SUBS     r0,r0,#0x44
00002e  6800              LDR      r0,[r0,#0]
000030  f4007080          AND      r0,r0,#0x100
000034  2800              CMP      r0,#0
000036  d0f8              BEQ      |L5.42|
;;;312      LPC_USB->USBDevIntClr = EP_RLZED_INT;
000038  f44f7080          MOV      r0,#0x100
00003c  4901              LDR      r1,|L5.68|
00003e  393c              SUBS     r1,r1,#0x3c
000040  6008              STR      r0,[r1,#0]
;;;313    }
000042  bd10              POP      {r4,pc}
;;;314    
                          ENDP

                  |L5.68|
                          DCD      0x5000c244
                  |L5.72|
                          DCD      0x5000c000

                          AREA ||i.USB_Configure||, CODE, READONLY, ALIGN=2

                  USB_Configure PROC
;;;287    
;;;288    void USB_Configure (uint32_t cfg) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;289    
;;;290      WrCmdDat(CMD_CFG_DEV, DAT_WR_BYTE(cfg ? CONF_DVICE : 0));
000004  b10c              CBZ      r4,|L6.10|
000006  2001              MOVS     r0,#1
000008  e000              B        |L6.12|
                  |L6.10|
00000a  2000              MOVS     r0,#0
                  |L6.12|
00000c  f44f7280          MOV      r2,#0x100
000010  ea424100          ORR      r1,r2,r0,LSL #16
000014  4809              LDR      r0,|L6.60|
000016  f7fffffe          BL       WrCmdDat
;;;291    
;;;292      LPC_USB->USBReEp = 0x00000003;
00001a  2003              MOVS     r0,#3
00001c  4908              LDR      r1,|L6.64|
00001e  6008              STR      r0,[r1,#0]
;;;293      while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0);
000020  bf00              NOP      
                  |L6.34|
000022  4807              LDR      r0,|L6.64|
000024  3844              SUBS     r0,r0,#0x44
000026  6800              LDR      r0,[r0,#0]
000028  f4007080          AND      r0,r0,#0x100
00002c  2800              CMP      r0,#0
00002e  d0f8              BEQ      |L6.34|
;;;294      LPC_USB->USBDevIntClr = EP_RLZED_INT;
000030  f44f7080          MOV      r0,#0x100
000034  4902              LDR      r1,|L6.64|
000036  393c              SUBS     r1,r1,#0x3c
000038  6008              STR      r0,[r1,#0]
;;;295    }
00003a  bd10              POP      {r4,pc}
;;;296    
                          ENDP

                  |L6.60|
                          DCD      0x00d80500
                  |L6.64|
                          DCD      0x5000c244

                          AREA ||i.USB_Connect||, CODE, READONLY, ALIGN=2

                  USB_Connect PROC
;;;174    
;;;175    void USB_Connect (uint32_t con) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;176      WrCmdDat(CMD_SET_DEV_STAT, DAT_WR_BYTE(con ? DEV_CON : 0));
000004  b10c              CBZ      r4,|L7.10|
000006  2001              MOVS     r0,#1
000008  e000              B        |L7.12|
                  |L7.10|
00000a  2000              MOVS     r0,#0
                  |L7.12|
00000c  f44f7280          MOV      r2,#0x100
000010  ea424100          ORR      r1,r2,r0,LSL #16
000014  4801              LDR      r0,|L7.28|
000016  f7fffffe          BL       WrCmdDat
;;;177    }
00001a  bd10              POP      {r4,pc}
;;;178    
                          ENDP

                  |L7.28|
                          DCD      0x00fe0500

                          AREA ||i.USB_DirCtrlEP||, CODE, READONLY, ALIGN=1

                  USB_DirCtrlEP PROC
;;;321    
;;;322    void USB_DirCtrlEP (uint32_t dir) {
000000  4770              BX       lr
;;;323      /* Not needed */
;;;324    }
;;;325    
                          ENDP


                          AREA ||i.USB_DisableEP||, CODE, READONLY, ALIGN=2

                  USB_DisableEP PROC
;;;347    
;;;348    void USB_DisableEP (uint32_t EPNum) {
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
;;;349      WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(EP_STAT_DA));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       EPAdr
00000a  4904              LDR      r1,|L9.28|
00000c  ea414500          ORR      r5,r1,r0,LSL #16
000010  4903              LDR      r1,|L9.32|
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       WrCmdDat
;;;350    }
000018  bd30              POP      {r4,r5,pc}
;;;351    
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x00400500
                  |L9.32|
                          DCD      0x00200100

                          AREA ||i.USB_EnableEP||, CODE, READONLY, ALIGN=2

                  USB_EnableEP PROC
;;;334    
;;;335    void USB_EnableEP (uint32_t EPNum) {
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
;;;336      WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       EPAdr
00000a  4904              LDR      r1,|L10.28|
00000c  ea414500          ORR      r5,r1,r0,LSL #16
000010  1389              ASRS     r1,r1,#14
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       WrCmdDat
;;;337    }
000018  bd30              POP      {r4,r5,pc}
;;;338    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x00400500

                          AREA ||i.USB_GetFrame||, CODE, READONLY, ALIGN=2

                  USB_GetFrame PROC
;;;642    
;;;643    uint32_t USB_GetFrame (void) {
000000  b500              PUSH     {lr}
;;;644      uint32_t val;
;;;645    
;;;646      WrCmd(CMD_RD_FRAME);
000002  4807              LDR      r0,|L11.32|
000004  f7fffffe          BL       WrCmd
;;;647      val = RdCmdDat(DAT_RD_FRAME);
000008  4806              LDR      r0,|L11.36|
00000a  f7fffffe          BL       RdCmdDat
00000e  4603              MOV      r3,r0
;;;648      val = val | (RdCmdDat(DAT_RD_FRAME) << 8);
000010  4804              LDR      r0,|L11.36|
000012  f7fffffe          BL       RdCmdDat
000016  ea432300          ORR      r3,r3,r0,LSL #8
;;;649    
;;;650      return (val);
00001a  4618              MOV      r0,r3
;;;651    }
00001c  bd00              POP      {pc}
;;;652    
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
                          DCD      0x00f50500
                  |L11.36|
                          DCD      0x00f50200

                          AREA ||i.USB_IRQHandler||, CODE, READONLY, ALIGN=2

                  USB_IRQHandler PROC
;;;657    
;;;658    void USB_IRQHandler (void) {
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;659      uint32_t disr, val, n, m;
;;;660      uint32_t episr, episrCur;
;;;661    
;;;662      disr = LPC_USB->USBDevIntSt;       /* Device Interrupt Status */
000004  483b              LDR      r0,|L12.244|
000006  f8d09000          LDR      r9,[r0,#0]
;;;663    
;;;664      /* Device Status Interrupt (Reset, Connect change, Suspend/Resume) */
;;;665      if (disr & DEV_STAT_INT) {
00000a  f0090008          AND      r0,r9,#8
00000e  b1e8              CBZ      r0,|L12.76|
;;;666        LPC_USB->USBDevIntClr = DEV_STAT_INT;
000010  2008              MOVS     r0,#8
000012  4938              LDR      r1,|L12.244|
000014  3108              ADDS     r1,r1,#8
000016  6008              STR      r0,[r1,#0]
;;;667        WrCmd(CMD_GET_DEV_STAT);
000018  4837              LDR      r0,|L12.248|
00001a  f7fffffe          BL       WrCmd
;;;668        val = RdCmdDat(DAT_GET_DEV_STAT);       /* Device Status */
00001e  4837              LDR      r0,|L12.252|
000020  f7fffffe          BL       RdCmdDat
000024  4605              MOV      r5,r0
;;;669        if (val & DEV_RST) {                    /* Reset */
000026  f0050010          AND      r0,r5,#0x10
00002a  b118              CBZ      r0,|L12.52|
;;;670          USB_Reset();
00002c  f7fffffe          BL       USB_Reset
;;;671    #if   USB_RESET_EVENT
;;;672          USB_Reset_Event();
000030  f7fffffe          BL       USB_Reset_Event
                  |L12.52|
;;;673    #endif
;;;674        }
;;;675        if (val & DEV_CON_CH) {                 /* Connect change */
;;;676    #if   USB_POWER_EVENT
;;;677          USB_Power_Event(val & DEV_CON);
;;;678    #endif
;;;679        }
;;;680        if (val & DEV_SUS_CH) {                 /* Suspend/Resume */
000034  f0050008          AND      r0,r5,#8
000038  b138              CBZ      r0,|L12.74|
;;;681          if (val & DEV_SUS) {                  /* Suspend */
00003a  f0050004          AND      r0,r5,#4
00003e  b110              CBZ      r0,|L12.70|
;;;682            USB_Suspend();
000040  f7fffffe          BL       USB_Suspend
000044  e001              B        |L12.74|
                  |L12.70|
;;;683    #if     USB_SUSPEND_EVENT
;;;684            USB_Suspend_Event();
;;;685    #endif
;;;686          } else {                              /* Resume */
;;;687            USB_Resume();
000046  f7fffffe          BL       USB_Resume
                  |L12.74|
;;;688    #if     USB_RESUME_EVENT
;;;689            USB_Resume_Event();
;;;690    #endif
;;;691          }
;;;692        }
;;;693        goto isr_end;
00004a  e051              B        |L12.240|
                  |L12.76|
;;;694      }
;;;695    
;;;696    #if USB_SOF_EVENT
;;;697      /* Start of Frame Interrupt */
;;;698      if (disr & FRAME_INT) {
;;;699    	LPC_USB->USBDevIntClr = FRAME_INT;
;;;700        USB_SOF_Event();
;;;701      }
;;;702    #endif
;;;703    
;;;704    #if USB_ERROR_EVENT
;;;705      /* Error Interrupt */
;;;706      if (disr & ERR_INT) {
;;;707    	LPC_USB->USBDevIntClr = ERR_INT;
;;;708        WrCmd(CMD_RD_ERR_STAT);
;;;709        val = RdCmdDat(DAT_RD_ERR_STAT);
;;;710        USB_Error_Event(val);
;;;711      }
;;;712    #endif
;;;713    
;;;714      /* Endpoint's Slow Interrupt */
;;;715      if (disr & EP_SLOW_INT) {
00004c  f0090004          AND      r0,r9,#4
000050  2800              CMP      r0,#0
000052  d04c              BEQ      |L12.238|
;;;716        episrCur = 0;
000054  f04f0800          MOV      r8,#0
;;;717        episr    = LPC_USB->USBEpIntSt;
000058  4826              LDR      r0,|L12.244|
00005a  3030              ADDS     r0,r0,#0x30
00005c  6807              LDR      r7,[r0,#0]
;;;718        for (n = 0; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
00005e  2400              MOVS     r4,#0
000060  e03e              B        |L12.224|
                  |L12.98|
;;;719          if (episr == episrCur) break;         /* break if all EP interrupts handled */
000062  4547              CMP      r7,r8
000064  d100              BNE      |L12.104|
000066  e03d              B        |L12.228|
                  |L12.104|
;;;720          if (episr & (1 << n)) {
000068  2001              MOVS     r0,#1
00006a  40a0              LSLS     r0,r0,r4
00006c  4038              ANDS     r0,r0,r7
00006e  b358              CBZ      r0,|L12.200|
;;;721            episrCur |= (1 << n);
000070  2001              MOVS     r0,#1
000072  40a0              LSLS     r0,r0,r4
000074  ea400808          ORR      r8,r0,r8
;;;722            m = n >> 1;
000078  0866              LSRS     r6,r4,#1
;;;723    
;;;724            LPC_USB->USBEpIntClr = (1 << n);
00007a  2001              MOVS     r0,#1
00007c  40a0              LSLS     r0,r0,r4
00007e  491d              LDR      r1,|L12.244|
000080  3138              ADDS     r1,r1,#0x38
000082  6008              STR      r0,[r1,#0]
;;;725            while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0);
000084  bf00              NOP      
                  |L12.134|
000086  481b              LDR      r0,|L12.244|
000088  6800              LDR      r0,[r0,#0]
00008a  f0000020          AND      r0,r0,#0x20
00008e  2800              CMP      r0,#0
000090  d0f9              BEQ      |L12.134|
;;;726            val = LPC_USB->USBCmdData;
000092  4818              LDR      r0,|L12.244|
000094  3014              ADDS     r0,r0,#0x14
000096  6805              LDR      r5,[r0,#0]
;;;727    
;;;728            if ((n & 1) == 0) {                 /* OUT Endpoint */
000098  f0040001          AND      r0,r4,#1
00009c  b9a8              CBNZ     r0,|L12.202|
;;;729              if (n == 0) {                     /* Control OUT Endpoint */
00009e  b954              CBNZ     r4,|L12.182|
;;;730                if (val & EP_SEL_STP) {         /* Setup Packet */
0000a0  f0050004          AND      r0,r5,#4
0000a4  b138              CBZ      r0,|L12.182|
;;;731                  if (USB_P_EP[0]) {
0000a6  4816              LDR      r0,|L12.256|
0000a8  6800              LDR      r0,[r0,#0]  ; USB_P_EP
0000aa  b120              CBZ      r0,|L12.182|
;;;732                    USB_P_EP[0](USB_EVT_SETUP);
0000ac  4814              LDR      r0,|L12.256|
0000ae  6801              LDR      r1,[r0,#0]  ; USB_P_EP
0000b0  2001              MOVS     r0,#1
0000b2  4788              BLX      r1
;;;733                    continue;
0000b4  e013              B        |L12.222|
                  |L12.182|
;;;734                  }
;;;735                }
;;;736              }
;;;737              if (USB_P_EP[m]) {
0000b6  4812              LDR      r0,|L12.256|
0000b8  f8500026          LDR      r0,[r0,r6,LSL #2]
0000bc  b120              CBZ      r0,|L12.200|
;;;738                USB_P_EP[m](USB_EVT_OUT);
0000be  4810              LDR      r0,|L12.256|
0000c0  f8501026          LDR      r1,[r0,r6,LSL #2]
0000c4  2002              MOVS     r0,#2
0000c6  4788              BLX      r1
                  |L12.200|
0000c8  e008              B        |L12.220|
                  |L12.202|
;;;739              }
;;;740            } else {                            /* IN Endpoint */
;;;741              if (USB_P_EP[m]) {
0000ca  480d              LDR      r0,|L12.256|
0000cc  f8500026          LDR      r0,[r0,r6,LSL #2]
0000d0  b120              CBZ      r0,|L12.220|
;;;742                USB_P_EP[m](USB_EVT_IN);
0000d2  480b              LDR      r0,|L12.256|
0000d4  f8501026          LDR      r1,[r0,r6,LSL #2]
0000d8  2003              MOVS     r0,#3
0000da  4788              BLX      r1
                  |L12.220|
0000dc  bf00              NOP                            ;733
                  |L12.222|
0000de  1c64              ADDS     r4,r4,#1              ;718
                  |L12.224|
0000e0  2c20              CMP      r4,#0x20              ;718
0000e2  d3be              BCC      |L12.98|
                  |L12.228|
0000e4  bf00              NOP                            ;719
;;;743              }
;;;744            }
;;;745          }
;;;746        }
;;;747        LPC_USB->USBDevIntClr = EP_SLOW_INT;
0000e6  2004              MOVS     r0,#4
0000e8  4902              LDR      r1,|L12.244|
0000ea  3108              ADDS     r1,r1,#8
0000ec  6008              STR      r0,[r1,#0]
                  |L12.238|
;;;748      }
;;;749    
;;;750    #if USB_DMA
;;;751    
;;;752      if (LPC_USB->USBDMAIntSt & 0x00000001) {          /* End of Transfer Interrupt */
;;;753        val = LPC_USB->USBEoTIntSt;
;;;754        for (n = 2; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
;;;755          if (val & (1 << n)) {
;;;756            m = n >> 1;
;;;757            if ((n & 1) == 0) {                 /* OUT Endpoint */
;;;758              if (USB_P_EP[m]) {
;;;759                USB_P_EP[m](USB_EVT_OUT_DMA_EOT);
;;;760              }
;;;761            } else {                            /* IN Endpoint */
;;;762              if (USB_P_EP[m]) {
;;;763                USB_P_EP[m](USB_EVT_IN_DMA_EOT);
;;;764              }
;;;765            }
;;;766          }
;;;767        }
;;;768        LPC_USB->USBEoTIntClr = val;
;;;769      }
;;;770    
;;;771      if (LPC_USB->USBDMAIntSt & 0x00000002) {          /* New DD Request Interrupt */
;;;772        val = LPC_USB->USBNDDRIntSt;
;;;773        for (n = 2; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
;;;774          if (val & (1 << n)) {
;;;775            m = n >> 1;
;;;776            if ((n & 1) == 0) {                 /* OUT Endpoint */
;;;777              if (USB_P_EP[m]) {
;;;778                USB_P_EP[m](USB_EVT_OUT_DMA_NDR);
;;;779              }
;;;780            } else {                            /* IN Endpoint */
;;;781              if (USB_P_EP[m]) {
;;;782                USB_P_EP[m](USB_EVT_IN_DMA_NDR);
;;;783              }
;;;784            }
;;;785          }
;;;786        }
;;;787        LPC_USB->USBNDDRIntClr = val;
;;;788      }
;;;789    
;;;790      if (LPC_USB->USBDMAIntSt & 0x00000004) {          /* System Error Interrupt */
;;;791        val = LPC_USB->USBSysErrIntSt;
;;;792        for (n = 2; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
;;;793          if (val & (1 << n)) {
;;;794            m = n >> 1;
;;;795            if ((n & 1) == 0) {                 /* OUT Endpoint */
;;;796              if (USB_P_EP[m]) {
;;;797                USB_P_EP[m](USB_EVT_OUT_DMA_ERR);
;;;798              }
;;;799            } else {                            /* IN Endpoint */
;;;800              if (USB_P_EP[m]) {
;;;801                USB_P_EP[m](USB_EVT_IN_DMA_ERR);
;;;802              }
;;;803            }
;;;804          }
;;;805        }
;;;806        LPC_USB->USBSysErrIntClr = val;
;;;807      }
;;;808    
;;;809    #endif /* USB_DMA */
;;;810    
;;;811    isr_end:
0000ee  bf00              NOP      
                  |L12.240|
;;;812      return;
;;;813    }
0000f0  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

                  |L12.244|
                          DCD      0x5000c200
                  |L12.248|
                          DCD      0x00fe0500
                  |L12.252|
                          DCD      0x00fe0200
                  |L12.256|
                          DCD      USB_P_EP

                          AREA ||i.USB_Init||, CODE, READONLY, ALIGN=2

                  USB_Init PROC
;;;144    
;;;145    void USB_Init (void) {
000000  b500              PUSH     {lr}
;;;146    
;;;147      LPC_PINCON->PINSEL1 &= ~((3<<26)|(3<<28));   /* P0.29 D+, P0.30 D- */
000002  4822              LDR      r0,|L13.140|
000004  6840              LDR      r0,[r0,#4]
000006  f0205070          BIC      r0,r0,#0x3c000000
00000a  4920              LDR      r1,|L13.140|
00000c  6048              STR      r0,[r1,#4]
;;;148      LPC_PINCON->PINSEL1 |=  ((1<<26)|(1<<28));   /* PINSEL1 26.27, 28.29  = 01 */
00000e  4608              MOV      r0,r1
000010  6840              LDR      r0,[r0,#4]
000012  f04050a0          ORR      r0,r0,#0x14000000
000016  6048              STR      r0,[r1,#4]
;;;149    
;;;150      LPC_PINCON->PINSEL3 &= ~((3<< 4)|(3<<28));   /* P1.18 GoodLink, P1.30 VBUS */
000018  4608              MOV      r0,r1
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  491c              LDR      r1,|L13.144|
00001e  4008              ANDS     r0,r0,r1
000020  491a              LDR      r1,|L13.140|
000022  60c8              STR      r0,[r1,#0xc]
;;;151      LPC_PINCON->PINSEL3 |=  ((1<< 4)|(2<<28));   /* PINSEL3 4.5 = 01, 28.29 = 10 */
000024  4608              MOV      r0,r1
000026  68c0              LDR      r0,[r0,#0xc]
000028  491a              LDR      r1,|L13.148|
00002a  4308              ORRS     r0,r0,r1
00002c  4917              LDR      r1,|L13.140|
00002e  60c8              STR      r0,[r1,#0xc]
;;;152    
;;;153      LPC_PINCON->PINSEL4 &= ~((3<<18)        );   /* P2.9 SoftConnect */
000030  4608              MOV      r0,r1
000032  6900              LDR      r0,[r0,#0x10]
000034  f4202040          BIC      r0,r0,#0xc0000
000038  6108              STR      r0,[r1,#0x10]
;;;154      LPC_PINCON->PINSEL4 |=  ((1<<18)        );   /* PINSEL4 18.19 = 01 */
00003a  4608              MOV      r0,r1
00003c  6900              LDR      r0,[r0,#0x10]
00003e  f4402080          ORR      r0,r0,#0x40000
000042  6108              STR      r0,[r1,#0x10]
;;;155    
;;;156      LPC_SC->PCONP |= (1UL<<31);                /* USB PCLK -> enable USB Per.       */
000044  4814              LDR      r0,|L13.152|
000046  6800              LDR      r0,[r0,#0]
000048  f0404000          ORR      r0,r0,#0x80000000
00004c  4912              LDR      r1,|L13.152|
00004e  39c4              SUBS     r1,r1,#0xc4
000050  f8c100c4          STR      r0,[r1,#0xc4]
;;;157    
;;;158      LPC_USB->USBClkCtrl = 0x1A;                /* Dev, PortSel, AHB clock enable */
000054  201a              MOVS     r0,#0x1a
000056  4911              LDR      r1,|L13.156|
000058  6008              STR      r0,[r1,#0]
;;;159      while ((LPC_USB->USBClkSt & 0x1A) != 0x1A);
00005a  bf00              NOP      
                  |L13.92|
00005c  480f              LDR      r0,|L13.156|
00005e  1d00              ADDS     r0,r0,#4
000060  6800              LDR      r0,[r0,#0]
000062  f000001a          AND      r0,r0,#0x1a
000066  281a              CMP      r0,#0x1a
000068  d1f8              BNE      |L13.92|
;;;160    
;;;161      NVIC_EnableIRQ(USB_IRQn);               /* enable USB interrupt */
00006a  2018              MOVS     r0,#0x18
00006c  2101              MOVS     r1,#1
00006e  4081              LSLS     r1,r1,r0
000070  0942              LSRS     r2,r0,#5
000072  0092              LSLS     r2,r2,#2
000074  f10222e0          ADD      r2,r2,#0xe000e000
000078  f8c21100          STR      r1,[r2,#0x100]
00007c  bf00              NOP      
;;;162    
;;;163      USB_Reset();
00007e  f7fffffe          BL       USB_Reset
;;;164      USB_SetAddress(0);
000082  2000              MOVS     r0,#0
000084  f7fffffe          BL       USB_SetAddress
;;;165    }
000088  bd00              POP      {pc}
;;;166    
                          ENDP

00008a  0000              DCW      0x0000
                  |L13.140|
                          DCD      0x4002c000
                  |L13.144|
                          DCD      0xcfffffcf
                  |L13.148|
                          DCD      0x20000010
                  |L13.152|
                          DCD      0x400fc0c4
                  |L13.156|
                          DCD      0x5000cff4

                          AREA ||i.USB_ReadEP||, CODE, READONLY, ALIGN=2

                  USB_ReadEP PROC
;;;413    
;;;414    uint32_t USB_ReadEP (uint32_t EPNum, uint8_t *pData) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4605              MOV      r5,r0
000004  460f              MOV      r7,r1
;;;415      uint32_t cnt, n;
;;;416    
;;;417      LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_RD_EN;
000006  f005000f          AND      r0,r5,#0xf
00000a  2101              MOVS     r1,#1
00000c  eb010080          ADD      r0,r1,r0,LSL #2
000010  4913              LDR      r1,|L14.96|
000012  6008              STR      r0,[r1,#0]
;;;418    
;;;419      do {
000014  bf00              NOP      
                  |L14.22|
;;;420        cnt = LPC_USB->USBRxPLen;
000016  4812              LDR      r0,|L14.96|
000018  3808              SUBS     r0,r0,#8
00001a  6804              LDR      r4,[r0,#0]
;;;421      } while ((cnt & PKT_RDY) == 0);
00001c  f4046000          AND      r0,r4,#0x800
000020  2800              CMP      r0,#0
000022  d0f8              BEQ      |L14.22|
;;;422      cnt &= PKT_LNGTH_MASK;
000024  f3c40409          UBFX     r4,r4,#0,#10
;;;423    
;;;424      for (n = 0; n < (cnt + 3) / 4; n++) {
000028  2600              MOVS     r6,#0
00002a  e005              B        |L14.56|
                  |L14.44|
;;;425        *((__packed uint32_t *)pData) = LPC_USB->USBRxData;
00002c  480d              LDR      r0,|L14.100|
00002e  f8d00218          LDR      r0,[r0,#0x218]
000032  6038              STR      r0,[r7,#0]
;;;426        pData += 4;
000034  1d3f              ADDS     r7,r7,#4
000036  1c76              ADDS     r6,r6,#1              ;424
                  |L14.56|
000038  1ce0              ADDS     r0,r4,#3              ;424
00003a  ebb60f90          CMP      r6,r0,LSR #2          ;424
00003e  d3f5              BCC      |L14.44|
;;;427      }
;;;428      LPC_USB->USBCtrl = 0;
000040  2000              MOVS     r0,#0
000042  4907              LDR      r1,|L14.96|
000044  6008              STR      r0,[r1,#0]
;;;429    
;;;430      if (((EP_MSK_ISO >> EPNum) & 1) == 0) {   /* Non-Isochronous Endpoint */
000046  f2412048          MOV      r0,#0x1248
00004a  4128              ASRS     r0,r0,r5
00004c  f0000001          AND      r0,r0,#1
000050  b918              CBNZ     r0,|L14.90|
;;;431        WrCmdEP(EPNum, CMD_CLR_BUF);
000052  4905              LDR      r1,|L14.104|
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       WrCmdEP
                  |L14.90|
;;;432      }
;;;433    
;;;434      return (cnt);
00005a  4620              MOV      r0,r4
;;;435    }
00005c  bdf0              POP      {r4-r7,pc}
;;;436    
                          ENDP

00005e  0000              DCW      0x0000
                  |L14.96|
                          DCD      0x5000c228
                  |L14.100|
                          DCD      0x5000c000
                  |L14.104|
                          DCD      0x00f20500

                          AREA ||i.USB_Reset||, CODE, READONLY, ALIGN=2

                  USB_Reset PROC
;;;185    
;;;186    void USB_Reset (void) {
000000  2000              MOVS     r0,#0
;;;187    #if USB_DMA
;;;188      uint32_t n;
;;;189    #endif
;;;190    
;;;191      LPC_USB->USBEpInd = 0;
000002  4912              LDR      r1,|L15.76|
000004  6008              STR      r0,[r1,#0]
;;;192      LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
000006  2008              MOVS     r0,#8
000008  4911              LDR      r1,|L15.80|
00000a  f8c1024c          STR      r0,[r1,#0x24c]
;;;193      LPC_USB->USBEpInd = 1;
00000e  2001              MOVS     r0,#1
000010  490e              LDR      r1,|L15.76|
000012  6008              STR      r0,[r1,#0]
;;;194      LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
000014  2008              MOVS     r0,#8
000016  490e              LDR      r1,|L15.80|
000018  f8c1024c          STR      r0,[r1,#0x24c]
;;;195      while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0);
00001c  bf00              NOP      
                  |L15.30|
00001e  480b              LDR      r0,|L15.76|
000020  3848              SUBS     r0,r0,#0x48
000022  6800              LDR      r0,[r0,#0]
000024  f4007080          AND      r0,r0,#0x100
000028  2800              CMP      r0,#0
00002a  d0f8              BEQ      |L15.30|
;;;196    
;;;197      LPC_USB->USBEpIntClr  = 0xFFFFFFFF;
00002c  f04f30ff          MOV      r0,#0xffffffff
000030  4906              LDR      r1,|L15.76|
000032  3910              SUBS     r1,r1,#0x10
000034  6008              STR      r0,[r1,#0]
;;;198      LPC_USB->USBEpIntEn   = 0xFFFFFFFF ^ USB_DMA_EP;
000036  4906              LDR      r1,|L15.80|
000038  f8c10234          STR      r0,[r1,#0x234]
;;;199      LPC_USB->USBDevIntClr = 0xFFFFFFFF;
00003c  4903              LDR      r1,|L15.76|
00003e  3940              SUBS     r1,r1,#0x40
000040  6008              STR      r0,[r1,#0]
;;;200      LPC_USB->USBDevIntEn  = DEV_STAT_INT    | EP_SLOW_INT    |
000042  200c              MOVS     r0,#0xc
000044  4902              LDR      r1,|L15.80|
000046  f8c10204          STR      r0,[r1,#0x204]
;;;201                   (USB_SOF_EVENT   ? FRAME_INT : 0) |
;;;202                   (USB_ERROR_EVENT ? ERR_INT   : 0);
;;;203    
;;;204    #if USB_DMA
;;;205      LPC_USB->USBUDCAH   = USB_RAM_ADR;
;;;206      LPC_USB->USBDMARClr = 0xFFFFFFFF;
;;;207      LPC_USB->USBEpDMADis  = 0xFFFFFFFF;
;;;208      LPC_USB->USBEpDMAEn   = USB_DMA_EP;
;;;209      LPC_USB->USBEoTIntClr = 0xFFFFFFFF;
;;;210      LPC_USB->USBNDDRIntClr = 0xFFFFFFFF;
;;;211      LPC_USB->USBSysErrIntClr = 0xFFFFFFFF;
;;;212      LPC_USB->USBDMAIntEn  = 0x00000007;
;;;213      DDMemMap[0] = 0x00000000;
;;;214      DDMemMap[1] = 0x00000000;
;;;215      for (n = 0; n < USB_EP_NUM; n++) {
;;;216        udca[n] = 0;
;;;217        UDCA[n] = 0;
;;;218      }
;;;219    #endif
;;;220    }
00004a  4770              BX       lr
;;;221    
                          ENDP

                  |L15.76|
                          DCD      0x5000c248
                  |L15.80|
                          DCD      0x5000c000

                          AREA ||i.USB_ResetEP||, CODE, READONLY, ALIGN=2

                  USB_ResetEP PROC
;;;360    
;;;361    void USB_ResetEP (uint32_t EPNum) {
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
;;;362      WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       EPAdr
00000a  4904              LDR      r1,|L16.28|
00000c  ea414500          ORR      r5,r1,r0,LSL #16
000010  1389              ASRS     r1,r1,#14
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       WrCmdDat
;;;363    }
000018  bd30              POP      {r4,r5,pc}
;;;364    
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      0x00400500

                          AREA ||i.USB_Resume||, CODE, READONLY, ALIGN=1

                  USB_Resume PROC
;;;239    
;;;240    void USB_Resume (void) {
000000  4770              BX       lr
;;;241      /* Performed by Hardware */
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.USB_SetAddress||, CODE, READONLY, ALIGN=2

                  USB_SetAddress PROC
;;;275    
;;;276    void USB_SetAddress (uint32_t adr) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;277      WrCmdDat(CMD_SET_ADDR, DAT_WR_BYTE(DEV_EN | adr)); /* Don't wait for next */
000004  f0440080          ORR      r0,r4,#0x80
000008  f44f7280          MOV      r2,#0x100
00000c  ea424100          ORR      r1,r2,r0,LSL #16
000010  4806              LDR      r0,|L18.44|
000012  f7fffffe          BL       WrCmdDat
;;;278      WrCmdDat(CMD_SET_ADDR, DAT_WR_BYTE(DEV_EN | adr)); /*  Setup Status Phase */
000016  f0440080          ORR      r0,r4,#0x80
00001a  f44f7280          MOV      r2,#0x100
00001e  ea424100          ORR      r1,r2,r0,LSL #16
000022  4802              LDR      r0,|L18.44|
000024  f7fffffe          BL       WrCmdDat
;;;279    }
000028  bd10              POP      {r4,pc}
;;;280    
                          ENDP

00002a  0000              DCW      0x0000
                  |L18.44|
                          DCD      0x00d00500

                          AREA ||i.USB_SetStallEP||, CODE, READONLY, ALIGN=2

                  USB_SetStallEP PROC
;;;373    
;;;374    void USB_SetStallEP (uint32_t EPNum) {
000000  b530              PUSH     {r4,r5,lr}
000002  4604              MOV      r4,r0
;;;375      WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(EP_STAT_ST));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       EPAdr
00000a  4904              LDR      r1,|L19.28|
00000c  ea414500          ORR      r5,r1,r0,LSL #16
000010  4903              LDR      r1,|L19.32|
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       WrCmdDat
;;;376    }
000018  bd30              POP      {r4,r5,pc}
;;;377    
                          ENDP

00001a  0000              DCW      0x0000
                  |L19.28|
                          DCD      0x00400500
                  |L19.32|
                          DCD      0x00010100

                          AREA ||i.USB_Suspend||, CODE, READONLY, ALIGN=1

                  USB_Suspend PROC
;;;228    
;;;229    void USB_Suspend (void) {
000000  4770              BX       lr
;;;230      /* Performed by Hardware */
;;;231    }
;;;232    
                          ENDP


                          AREA ||i.USB_WakeUp||, CODE, READONLY, ALIGN=2

                  USB_WakeUp PROC
;;;250    
;;;251    void USB_WakeUp (void) {
000000  b500              PUSH     {lr}
;;;252    
;;;253      if (USB_DeviceStatus & USB_GETSTATUS_REMOTE_WAKEUP) {
000002  4805              LDR      r0,|L21.24|
000004  7800              LDRB     r0,[r0,#0]  ; USB_DeviceStatus
000006  f0000002          AND      r0,r0,#2
00000a  b118              CBZ      r0,|L21.20|
;;;254        WrCmdDat(CMD_SET_DEV_STAT, DAT_WR_BYTE(DEV_CON));
00000c  4903              LDR      r1,|L21.28|
00000e  4804              LDR      r0,|L21.32|
000010  f7fffffe          BL       WrCmdDat
                  |L21.20|
;;;255      }
;;;256    }
000014  bd00              POP      {pc}
;;;257    
                          ENDP

000016  0000              DCW      0x0000
                  |L21.24|
                          DCD      USB_DeviceStatus
                  |L21.28|
                          DCD      0x00010100
                  |L21.32|
                          DCD      0x00fe0500

                          AREA ||i.USB_WakeUpCfg||, CODE, READONLY, ALIGN=1

                  USB_WakeUpCfg PROC
;;;264    
;;;265    void USB_WakeUpCfg (uint32_t cfg) {
000000  4770              BX       lr
;;;266      /* Not needed */
;;;267    }
;;;268    
                          ENDP


                          AREA ||i.USB_WriteEP||, CODE, READONLY, ALIGN=2

                  USB_WriteEP PROC
;;;447    
;;;448    uint32_t USB_WriteEP (uint32_t EPNum, uint8_t *pData, uint32_t cnt) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;449      uint32_t n;
;;;450    
;;;451      LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_WR_EN;
000008  f006000f          AND      r0,r6,#0xf
00000c  2102              MOVS     r1,#2
00000e  eb010080          ADD      r0,r1,r0,LSL #2
000012  490d              LDR      r1,|L23.72|
000014  6008              STR      r0,[r1,#0]
;;;452    
;;;453      LPC_USB->USBTxPLen = cnt;
000016  480d              LDR      r0,|L23.76|
000018  f8c04224          STR      r4,[r0,#0x224]
;;;454    
;;;455      for (n = 0; n < (cnt + 3) / 4; n++) {
00001c  2700              MOVS     r7,#0
00001e  e005              B        |L23.44|
                  |L23.32|
;;;456        LPC_USB->USBTxData = *((__packed uint32_t *)pData);
000020  6828              LDR      r0,[r5,#0]
000022  4909              LDR      r1,|L23.72|
000024  390c              SUBS     r1,r1,#0xc
000026  6008              STR      r0,[r1,#0]
;;;457        pData += 4;
000028  1d2d              ADDS     r5,r5,#4
00002a  1c7f              ADDS     r7,r7,#1              ;455
                  |L23.44|
00002c  1ce0              ADDS     r0,r4,#3              ;455
00002e  ebb70f90          CMP      r7,r0,LSR #2          ;455
000032  d3f5              BCC      |L23.32|
;;;458      }
;;;459      LPC_USB->USBCtrl = 0;
000034  2000              MOVS     r0,#0
000036  4904              LDR      r1,|L23.72|
000038  6008              STR      r0,[r1,#0]
;;;460      WrCmdEP(EPNum, CMD_VALID_BUF);
00003a  4905              LDR      r1,|L23.80|
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       WrCmdEP
;;;461      return (cnt);
000042  4620              MOV      r0,r4
;;;462    }
000044  bdf0              POP      {r4-r7,pc}
;;;463    
                          ENDP

000046  0000              DCW      0x0000
                  |L23.72|
                          DCD      0x5000c228
                  |L23.76|
                          DCD      0x5000c000
                  |L23.80|
                          DCD      0x00fa0500

                          AREA ||i.WrCmd||, CODE, READONLY, ALIGN=2

                  WrCmd PROC
;;;79     
;;;80     void WrCmd (uint32_t cmd) {
000000  2110              MOVS     r1,#0x10
;;;81     
;;;82       LPC_USB->USBDevIntClr = CCEMTY_INT;
000002  4a07              LDR      r2,|L24.32|
000004  6011              STR      r1,[r2,#0]
;;;83       LPC_USB->USBCmdCode = cmd;
000006  4907              LDR      r1,|L24.36|
000008  f8c10210          STR      r0,[r1,#0x210]
;;;84       while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
00000c  bf00              NOP      
                  |L24.14|
00000e  4904              LDR      r1,|L24.32|
000010  3908              SUBS     r1,r1,#8
000012  6809              LDR      r1,[r1,#0]
000014  f0010110          AND      r1,r1,#0x10
000018  2900              CMP      r1,#0
00001a  d0f8              BEQ      |L24.14|
;;;85     }
00001c  4770              BX       lr
;;;86     
                          ENDP

00001e  0000              DCW      0x0000
                  |L24.32|
                          DCD      0x5000c208
                  |L24.36|
                          DCD      0x5000c000

                          AREA ||i.WrCmdDat||, CODE, READONLY, ALIGN=2

                  WrCmdDat PROC
;;;94     
;;;95     void WrCmdDat (uint32_t cmd, uint32_t val) {
000000  2210              MOVS     r2,#0x10
;;;96     
;;;97       LPC_USB->USBDevIntClr = CCEMTY_INT;
000002  4b0e              LDR      r3,|L25.60|
000004  601a              STR      r2,[r3,#0]
;;;98       LPC_USB->USBCmdCode = cmd;
000006  4a0e              LDR      r2,|L25.64|
000008  f8c20210          STR      r0,[r2,#0x210]
;;;99       while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
00000c  bf00              NOP      
                  |L25.14|
00000e  4a0b              LDR      r2,|L25.60|
000010  3a08              SUBS     r2,r2,#8
000012  6812              LDR      r2,[r2,#0]
000014  f0020210          AND      r2,r2,#0x10
000018  2a00              CMP      r2,#0
00001a  d0f8              BEQ      |L25.14|
;;;100      LPC_USB->USBDevIntClr = CCEMTY_INT;
00001c  2210              MOVS     r2,#0x10
00001e  4b07              LDR      r3,|L25.60|
000020  601a              STR      r2,[r3,#0]
;;;101      LPC_USB->USBCmdCode = val;
000022  4a07              LDR      r2,|L25.64|
000024  f8c21210          STR      r1,[r2,#0x210]
;;;102      while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
000028  bf00              NOP      
                  |L25.42|
00002a  4a04              LDR      r2,|L25.60|
00002c  3a08              SUBS     r2,r2,#8
00002e  6812              LDR      r2,[r2,#0]
000030  f0020210          AND      r2,r2,#0x10
000034  2a00              CMP      r2,#0
000036  d0f8              BEQ      |L25.42|
;;;103    }
000038  4770              BX       lr
;;;104    
                          ENDP

00003a  0000              DCW      0x0000
                  |L25.60|
                          DCD      0x5000c208
                  |L25.64|
                          DCD      0x5000c000

                          AREA ||i.WrCmdEP||, CODE, READONLY, ALIGN=2

                  WrCmdEP PROC
;;;112    
;;;113    void WrCmdEP (uint32_t EPNum, uint32_t cmd){
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;114    
;;;115      LPC_USB->USBDevIntClr = CCEMTY_INT;
000006  2010              MOVS     r0,#0x10
000008  4911              LDR      r1,|L26.80|
00000a  6008              STR      r0,[r1,#0]
;;;116      LPC_USB->USBCmdCode = CMD_SEL_EP(EPAdr(EPNum));
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       EPAdr
000012  f44f61a0          MOV      r1,#0x500
000016  ea414000          ORR      r0,r1,r0,LSL #16
00001a  490e              LDR      r1,|L26.84|
00001c  f8c10210          STR      r0,[r1,#0x210]
;;;117      while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
000020  bf00              NOP      
                  |L26.34|
000022  480b              LDR      r0,|L26.80|
000024  3808              SUBS     r0,r0,#8
000026  6800              LDR      r0,[r0,#0]
000028  f0000010          AND      r0,r0,#0x10
00002c  2800              CMP      r0,#0
00002e  d0f8              BEQ      |L26.34|
;;;118      LPC_USB->USBDevIntClr = CCEMTY_INT;
000030  2010              MOVS     r0,#0x10
000032  4907              LDR      r1,|L26.80|
000034  6008              STR      r0,[r1,#0]
;;;119      LPC_USB->USBCmdCode = cmd;
000036  4807              LDR      r0,|L26.84|
000038  f8c03210          STR      r3,[r0,#0x210]
;;;120      while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
00003c  bf00              NOP      
                  |L26.62|
00003e  4804              LDR      r0,|L26.80|
000040  3808              SUBS     r0,r0,#8
000042  6800              LDR      r0,[r0,#0]
000044  f0000010          AND      r0,r0,#0x10
000048  2800              CMP      r0,#0
00004a  d0f8              BEQ      |L26.62|
;;;121    }
00004c  bd10              POP      {r4,pc}
;;;122    
                          ENDP

00004e  0000              DCW      0x0000
                  |L26.80|
                          DCD      0x5000c208
                  |L26.84|
                          DCD      0x5000c000

;*** Start embedded assembler ***

#line 1 "Lib\\Usb_Drivers\\Src\\usbhw.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usbhw_c_EPAdr____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usbhw_c_EPAdr____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usbhw_c_EPAdr____REVSH|
#line 144
|__asm___7_usbhw_c_EPAdr____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
