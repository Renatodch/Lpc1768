; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\cdcuser.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\cdcuser.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\cdcuser.crf Lib\Usb_Drivers\Src\cdcuser.c]
                          THUMB

                          AREA ||i.CDC_BulkIn||, CODE, READONLY, ALIGN=2

                  CDC_BulkIn PROC
;;;300     *---------------------------------------------------------------------------*/
;;;301    void CDC_BulkIn(void) {
000000  b538              PUSH     {r3-r5,lr}
;;;302      int numBytesRead, numBytesAvail;
;;;303    
;;;304      ser_AvailChar (&numBytesAvail);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       ser_AvailChar
;;;305    
;;;306      // ... add code to check for overwrite
;;;307    
;;;308      numBytesRead = ser_Read ((char *)&BulkBufIn[0], &numBytesAvail);
000008  4669              MOV      r1,sp
00000a  4808              LDR      r0,|L1.44|
00000c  f7fffffe          BL       ser_Read
000010  4604              MOV      r4,r0
;;;309    
;;;310      // send over USB
;;;311      if (numBytesRead > 0) {
000012  2c00              CMP      r4,#0
000014  dd05              BLE      |L1.34|
;;;312    	USB_WriteEP (CDC_DEP_IN, &BulkBufIn[0], numBytesRead);
000016  4622              MOV      r2,r4
000018  4904              LDR      r1,|L1.44|
00001a  2082              MOVS     r0,#0x82
00001c  f7fffffe          BL       USB_WriteEP
000020  e002              B        |L1.40|
                  |L1.34|
;;;313      }
;;;314      else {
;;;315        CDC_DepInEmpty = 1;
000022  2001              MOVS     r0,#1
000024  4902              LDR      r1,|L1.48|
000026  8008              STRH     r0,[r1,#0]
                  |L1.40|
;;;316      }
;;;317    }
000028  bd38              POP      {r3-r5,pc}
;;;318    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      BulkBufIn
                  |L1.48|
                          DCD      CDC_DepInEmpty

                          AREA ||i.CDC_BulkOut||, CODE, READONLY, ALIGN=2

                  CDC_BulkOut PROC
;;;324     *---------------------------------------------------------------------------*/
;;;325    void CDC_BulkOut(void) {
000000  b508              PUSH     {r3,lr}
;;;326      int numBytesRead;
;;;327    
;;;328      // get data from USB into intermediate buffer
;;;329      numBytesRead = USB_ReadEP(CDC_DEP_OUT, &BulkBufOut[0]);
000002  4905              LDR      r1,|L2.24|
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       USB_ReadEP
00000a  9000              STR      r0,[sp,#0]
;;;330    
;;;331      // ... add code to check for overwrite
;;;332    
;;;333      // store data in a buffer to transmit it over serial interface
;;;334      CDC_WrOutBuf ((char *)&BulkBufOut[0], &numBytesRead);
00000c  4669              MOV      r1,sp
00000e  4802              LDR      r0,|L2.24|
000010  f7fffffe          BL       CDC_WrOutBuf
;;;335    
;;;336    }
000014  bd08              POP      {r3,pc}
;;;337    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      BulkBufOut

                          AREA ||i.CDC_ClearCommFeature||, CODE, READONLY, ALIGN=1

                  CDC_ClearCommFeature PROC
;;;205     *---------------------------------------------------------------------------*/
;;;206    uint32_t CDC_ClearCommFeature (unsigned short wFeatureSelector) {
000000  4601              MOV      r1,r0
;;;207    
;;;208      /* ... add code to handle request */
;;;209      return (TRUE);
000002  2001              MOVS     r0,#1
;;;210    }
000004  4770              BX       lr
;;;211    
                          ENDP


                          AREA ||i.CDC_GetCommFeature||, CODE, READONLY, ALIGN=1

                  CDC_GetCommFeature PROC
;;;192     *---------------------------------------------------------------------------*/
;;;193    uint32_t CDC_GetCommFeature (unsigned short wFeatureSelector) {
000000  4601              MOV      r1,r0
;;;194    
;;;195      /* ... add code to handle request */
;;;196      return (TRUE);
000002  2001              MOVS     r0,#1
;;;197    }
000004  4770              BX       lr
;;;198    
                          ENDP


                          AREA ||i.CDC_GetEncapsulatedResponse||, CODE, READONLY, ALIGN=1

                  CDC_GetEncapsulatedResponse PROC
;;;166     *---------------------------------------------------------------------------*/
;;;167    uint32_t CDC_GetEncapsulatedResponse (void) {
000000  2001              MOVS     r0,#1
;;;168    
;;;169      /* ... add code to handle request */
;;;170      return (TRUE);
;;;171    }
000002  4770              BX       lr
;;;172    
                          ENDP


                          AREA ||i.CDC_GetLineCoding||, CODE, READONLY, ALIGN=2

                  CDC_GetLineCoding PROC
;;;253     *---------------------------------------------------------------------------*/
;;;254    uint32_t CDC_GetLineCoding (void) {
000000  480d              LDR      r0,|L6.56|
;;;255    
;;;256      EP0Buf[0] = (CDC_LineCoding.dwDTERate >>  0) & 0xFF;
000002  7800              LDRB     r0,[r0,#0]  ; CDC_LineCoding
000004  490d              LDR      r1,|L6.60|
000006  7008              STRB     r0,[r1,#0]
;;;257      EP0Buf[1] = (CDC_LineCoding.dwDTERate >>  8) & 0xFF;
000008  480b              LDR      r0,|L6.56|
00000a  8800              LDRH     r0,[r0,#0]  ; CDC_LineCoding
00000c  0a00              LSRS     r0,r0,#8
00000e  7048              STRB     r0,[r1,#1]
;;;258      EP0Buf[2] = (CDC_LineCoding.dwDTERate >> 16) & 0xFF;
000010  4809              LDR      r0,|L6.56|
000012  6800              LDR      r0,[r0,#0]  ; CDC_LineCoding
000014  0c00              LSRS     r0,r0,#16
000016  7088              STRB     r0,[r1,#2]
;;;259      EP0Buf[3] = (CDC_LineCoding.dwDTERate >> 24) & 0xFF;
000018  4807              LDR      r0,|L6.56|
00001a  6800              LDR      r0,[r0,#0]  ; CDC_LineCoding
00001c  0e00              LSRS     r0,r0,#24
00001e  70c8              STRB     r0,[r1,#3]
;;;260      EP0Buf[4] =  CDC_LineCoding.bCharFormat;
000020  4805              LDR      r0,|L6.56|
000022  7900              LDRB     r0,[r0,#4]  ; CDC_LineCoding
000024  7108              STRB     r0,[r1,#4]
;;;261      EP0Buf[5] =  CDC_LineCoding.bParityType;
000026  4804              LDR      r0,|L6.56|
000028  7940              LDRB     r0,[r0,#5]  ; CDC_LineCoding
00002a  7148              STRB     r0,[r1,#5]
;;;262      EP0Buf[6] =  CDC_LineCoding.bDataBits;
00002c  4802              LDR      r0,|L6.56|
00002e  7980              LDRB     r0,[r0,#6]  ; CDC_LineCoding
000030  7188              STRB     r0,[r1,#6]
;;;263    
;;;264      return (TRUE);
000032  2001              MOVS     r0,#1
;;;265    }
000034  4770              BX       lr
;;;266    
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
                          DCD      CDC_LineCoding
                  |L6.60|
                          DCD      EP0Buf

                          AREA ||i.CDC_GetSerialState||, CODE, READONLY, ALIGN=2

                  CDC_GetSerialState PROC
;;;343     *---------------------------------------------------------------------------*/
;;;344    unsigned short CDC_GetSerialState (void) {
000000  b508              PUSH     {r3,lr}
;;;345      unsigned short temp;
;;;346    
;;;347      CDC_SerialState = 0;
000002  2000              MOVS     r0,#0
000004  492a              LDR      r1,|L7.176|
000006  8008              STRH     r0,[r1,#0]
;;;348      ser_LineState (&temp);
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       ser_LineState
;;;349    
;;;350      if (temp & 0x8000)  CDC_SerialState |= CDC_SERIAL_STATE_RX_CARRIER;
00000e  f8bd0000          LDRH     r0,[sp,#0]
000012  f4004000          AND      r0,r0,#0x8000
000016  b128              CBZ      r0,|L7.36|
000018  4825              LDR      r0,|L7.176|
00001a  8800              LDRH     r0,[r0,#0]  ; CDC_SerialState
00001c  f0400001          ORR      r0,r0,#1
000020  4923              LDR      r1,|L7.176|
000022  8008              STRH     r0,[r1,#0]
                  |L7.36|
;;;351      if (temp & 0x2000)  CDC_SerialState |= CDC_SERIAL_STATE_TX_CARRIER;
000024  f8bd0000          LDRH     r0,[sp,#0]
000028  f4005000          AND      r0,r0,#0x2000
00002c  b128              CBZ      r0,|L7.58|
00002e  4820              LDR      r0,|L7.176|
000030  8800              LDRH     r0,[r0,#0]  ; CDC_SerialState
000032  f0400002          ORR      r0,r0,#2
000036  491e              LDR      r1,|L7.176|
000038  8008              STRH     r0,[r1,#0]
                  |L7.58|
;;;352      if (temp & 0x0010)  CDC_SerialState |= CDC_SERIAL_STATE_BREAK;
00003a  f8bd0000          LDRH     r0,[sp,#0]
00003e  f0000010          AND      r0,r0,#0x10
000042  b128              CBZ      r0,|L7.80|
000044  481a              LDR      r0,|L7.176|
000046  8800              LDRH     r0,[r0,#0]  ; CDC_SerialState
000048  f0400004          ORR      r0,r0,#4
00004c  4918              LDR      r1,|L7.176|
00004e  8008              STRH     r0,[r1,#0]
                  |L7.80|
;;;353      if (temp & 0x4000)  CDC_SerialState |= CDC_SERIAL_STATE_RING;
000050  f8bd0000          LDRH     r0,[sp,#0]
000054  f4004080          AND      r0,r0,#0x4000
000058  b128              CBZ      r0,|L7.102|
00005a  4815              LDR      r0,|L7.176|
00005c  8800              LDRH     r0,[r0,#0]  ; CDC_SerialState
00005e  f0400008          ORR      r0,r0,#8
000062  4913              LDR      r1,|L7.176|
000064  8008              STRH     r0,[r1,#0]
                  |L7.102|
;;;354      if (temp & 0x0008)  CDC_SerialState |= CDC_SERIAL_STATE_FRAMING;
000066  f8bd0000          LDRH     r0,[sp,#0]
00006a  f0000008          AND      r0,r0,#8
00006e  b128              CBZ      r0,|L7.124|
000070  480f              LDR      r0,|L7.176|
000072  8800              LDRH     r0,[r0,#0]  ; CDC_SerialState
000074  f0400010          ORR      r0,r0,#0x10
000078  490d              LDR      r1,|L7.176|
00007a  8008              STRH     r0,[r1,#0]
                  |L7.124|
;;;355      if (temp & 0x0004)  CDC_SerialState |= CDC_SERIAL_STATE_PARITY;
00007c  f8bd0000          LDRH     r0,[sp,#0]
000080  f0000004          AND      r0,r0,#4
000084  b128              CBZ      r0,|L7.146|
000086  480a              LDR      r0,|L7.176|
000088  8800              LDRH     r0,[r0,#0]  ; CDC_SerialState
00008a  f0400020          ORR      r0,r0,#0x20
00008e  4908              LDR      r1,|L7.176|
000090  8008              STRH     r0,[r1,#0]
                  |L7.146|
;;;356      if (temp & 0x0002)  CDC_SerialState |= CDC_SERIAL_STATE_OVERRUN;
000092  f8bd0000          LDRH     r0,[sp,#0]
000096  f0000002          AND      r0,r0,#2
00009a  b128              CBZ      r0,|L7.168|
00009c  4804              LDR      r0,|L7.176|
00009e  8800              LDRH     r0,[r0,#0]  ; CDC_SerialState
0000a0  f0400040          ORR      r0,r0,#0x40
0000a4  4902              LDR      r1,|L7.176|
0000a6  8008              STRH     r0,[r1,#0]
                  |L7.168|
;;;357    
;;;358      return (CDC_SerialState);
0000a8  4801              LDR      r0,|L7.176|
0000aa  8800              LDRH     r0,[r0,#0]  ; CDC_SerialState
;;;359    }
0000ac  bd08              POP      {r3,pc}
;;;360    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L7.176|
                          DCD      CDC_SerialState

                          AREA ||i.CDC_Init||, CODE, READONLY, ALIGN=2

                  CDC_Init PROC
;;;123     *---------------------------------------------------------------------------*/
;;;124    void CDC_Init (char portNum ) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;125    
;;;126      if ( portNum == 0 )
000004  b954              CBNZ     r4,|L8.28|
;;;127      {
;;;128    	ser_OpenPort (0);
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       ser_OpenPort
;;;129    	ser_InitPort0 (CDC_LineCoding.dwDTERate,
00000c  4d0e              LDR      r5,|L8.72|
00000e  792b              LDRB     r3,[r5,#4]  ; CDC_LineCoding
000010  796a              LDRB     r2,[r5,#5]  ; CDC_LineCoding
000012  79a9              LDRB     r1,[r5,#6]  ; CDC_LineCoding
000014  6828              LDR      r0,[r5,#0]  ; CDC_LineCoding
000016  f7fffffe          BL       ser_InitPort0
00001a  e009              B        |L8.48|
                  |L8.28|
;;;130                    CDC_LineCoding.bDataBits,
;;;131                    CDC_LineCoding.bParityType,
;;;132                    CDC_LineCoding.bCharFormat);
;;;133      }
;;;134      else
;;;135      {
;;;136    	ser_OpenPort (1);
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       ser_OpenPort
;;;137    	ser_InitPort1 (CDC_LineCoding.dwDTERate,
000022  4d09              LDR      r5,|L8.72|
000024  792b              LDRB     r3,[r5,#4]  ; CDC_LineCoding
000026  796a              LDRB     r2,[r5,#5]  ; CDC_LineCoding
000028  79a9              LDRB     r1,[r5,#6]  ; CDC_LineCoding
00002a  6828              LDR      r0,[r5,#0]  ; CDC_LineCoding
00002c  f7fffffe          BL       ser_InitPort1
                  |L8.48|
;;;138                    CDC_LineCoding.bDataBits,
;;;139                    CDC_LineCoding.bParityType,
;;;140                    CDC_LineCoding.bCharFormat);
;;;141      }
;;;142      CDC_DepInEmpty  = 1;
000030  2001              MOVS     r0,#1
000032  4906              LDR      r1,|L8.76|
000034  8008              STRH     r0,[r1,#0]
;;;143      CDC_SerialState = CDC_GetSerialState();
000036  f7fffffe          BL       CDC_GetSerialState
00003a  4905              LDR      r1,|L8.80|
00003c  8008              STRH     r0,[r1,#0]
;;;144    
;;;145      CDC_BUF_RESET(CDC_OutBuf);
00003e  2000              MOVS     r0,#0
000040  4904              LDR      r1,|L8.84|
000042  6408              STR      r0,[r1,#0x40]  ; CDC_OutBuf
000044  6448              STR      r0,[r1,#0x44]  ; CDC_OutBuf
;;;146    }
000046  bd70              POP      {r4-r6,pc}
;;;147    
                          ENDP

                  |L8.72|
                          DCD      CDC_LineCoding
                  |L8.76|
                          DCD      CDC_DepInEmpty
                  |L8.80|
                          DCD      CDC_SerialState
                  |L8.84|
                          DCD      CDC_OutBuf

                          AREA ||i.CDC_NotificationIn||, CODE, READONLY, ALIGN=2

                  CDC_NotificationIn PROC
;;;364     *---------------------------------------------------------------------------*/
;;;365    void CDC_NotificationIn (void) {
000000  b510              PUSH     {r4,lr}
;;;366    
;;;367      NotificationBuf[0] = 0xA1;                           // bmRequestType
000002  20a1              MOVS     r0,#0xa1
000004  490c              LDR      r1,|L9.56|
000006  7008              STRB     r0,[r1,#0]
;;;368      NotificationBuf[1] = CDC_NOTIFICATION_SERIAL_STATE;  // bNotification (SERIAL_STATE)
000008  2020              MOVS     r0,#0x20
00000a  7048              STRB     r0,[r1,#1]
;;;369      NotificationBuf[2] = 0x00;                           // wValue
00000c  2000              MOVS     r0,#0
00000e  7088              STRB     r0,[r1,#2]
;;;370      NotificationBuf[3] = 0x00;
000010  70c8              STRB     r0,[r1,#3]
;;;371      NotificationBuf[4] = 0x00;                           // wIndex (Interface #, LSB first)
000012  7108              STRB     r0,[r1,#4]
;;;372      NotificationBuf[5] = 0x00;
000014  7148              STRB     r0,[r1,#5]
;;;373      NotificationBuf[6] = 0x02;                           // wLength (Data length = 2 bytes, LSB first)
000016  2002              MOVS     r0,#2
000018  7188              STRB     r0,[r1,#6]
;;;374      NotificationBuf[7] = 0x00;
00001a  2000              MOVS     r0,#0
00001c  71c8              STRB     r0,[r1,#7]
;;;375      NotificationBuf[8] = (CDC_SerialState >>  0) & 0xFF; // UART State Bitmap (16bits, LSB first)
00001e  4807              LDR      r0,|L9.60|
000020  7800              LDRB     r0,[r0,#0]  ; CDC_SerialState
000022  7208              STRB     r0,[r1,#8]
;;;376      NotificationBuf[9] = (CDC_SerialState >>  8) & 0xFF;
000024  4805              LDR      r0,|L9.60|
000026  8800              LDRH     r0,[r0,#0]  ; CDC_SerialState
000028  0a00              LSRS     r0,r0,#8
00002a  7248              STRB     r0,[r1,#9]
;;;377    
;;;378      USB_WriteEP (CDC_CEP_IN, &NotificationBuf[0], 10);   // send notification
00002c  220a              MOVS     r2,#0xa
00002e  2081              MOVS     r0,#0x81
000030  f7fffffe          BL       USB_WriteEP
;;;379    }
000034  bd10              POP      {r4,pc}
                          ENDP

000036  0000              DCW      0x0000
                  |L9.56|
                          DCD      NotificationBuf
                  |L9.60|
                          DCD      CDC_SerialState

                          AREA ||i.CDC_OutBufAvailChar||, CODE, READONLY, ALIGN=2

                  CDC_OutBufAvailChar PROC
;;;108     *---------------------------------------------------------------------------*/
;;;109    int CDC_OutBufAvailChar (int *availChar) {
000000  4601              MOV      r1,r0
;;;110    
;;;111      *availChar = CDC_BUF_COUNT(CDC_OutBuf);
000002  4805              LDR      r0,|L10.24|
000004  6c00              LDR      r0,[r0,#0x40]  ; CDC_OutBuf
000006  4a04              LDR      r2,|L10.24|
000008  6c52              LDR      r2,[r2,#0x44]  ; CDC_OutBuf
00000a  1a80              SUBS     r0,r0,r2
00000c  f000003f          AND      r0,r0,#0x3f
000010  6008              STR      r0,[r1,#0]
;;;112    
;;;113      return (0);
000012  2000              MOVS     r0,#0
;;;114    }
000014  4770              BX       lr
;;;115    /* end Buffer handling */
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      CDC_OutBuf

                          AREA ||i.CDC_RdOutBuf||, CODE, READONLY, ALIGN=2

                  CDC_RdOutBuf PROC
;;;67      *---------------------------------------------------------------------------*/
;;;68     int CDC_RdOutBuf (char *buffer, const int *length) {
000000  b570              PUSH     {r4-r6,lr}
000002  4602              MOV      r2,r0
;;;69       int bytesToRead, bytesRead;
;;;70     
;;;71       /* Read *length bytes, block if *bytes are not available	*/
;;;72       bytesToRead = *length;
000004  680b              LDR      r3,[r1,#0]
;;;73       bytesToRead = (bytesToRead < (*length)) ? bytesToRead : (*length);
000006  680c              LDR      r4,[r1,#0]
000008  429c              CMP      r4,r3
00000a  dd01              BLE      |L11.16|
00000c  461c              MOV      r4,r3
00000e  e000              B        |L11.18|
                  |L11.16|
000010  680c              LDR      r4,[r1,#0]
                  |L11.18|
000012  4623              MOV      r3,r4
;;;74       bytesRead = bytesToRead;
000014  4618              MOV      r0,r3
;;;75     
;;;76     
;;;77       // ... add code to check for under run
;;;78     
;;;79       while (bytesToRead--) {
000016  e009              B        |L11.44|
                  |L11.24|
;;;80         *buffer++ = CDC_BUF_RD(CDC_OutBuf);
000018  4d07              LDR      r5,|L11.56|
00001a  6c6c              LDR      r4,[r5,#0x44]  ; CDC_OutBuf
00001c  1c65              ADDS     r5,r4,#1
00001e  4e06              LDR      r6,|L11.56|
000020  6475              STR      r5,[r6,#0x44]  ; CDC_OutBuf
000022  f004053f          AND      r5,r4,#0x3f
000026  5d75              LDRB     r5,[r6,r5]
000028  f8025b01          STRB     r5,[r2],#1
                  |L11.44|
00002c  1e1c              SUBS     r4,r3,#0              ;79
00002e  f1a30301          SUB      r3,r3,#1              ;79
000032  d1f1              BNE      |L11.24|
;;;81       }
;;;82       return (bytesRead);
;;;83     }
000034  bd70              POP      {r4-r6,pc}
;;;84     
                          ENDP

000036  0000              DCW      0x0000
                  |L11.56|
                          DCD      CDC_OutBuf

                          AREA ||i.CDC_SendBreak||, CODE, READONLY, ALIGN=1

                  CDC_SendBreak PROC
;;;288     *---------------------------------------------------------------------------*/
;;;289    uint32_t CDC_SendBreak (unsigned short wDurationOfBreak) {
000000  4601              MOV      r1,r0
;;;290    
;;;291      /* ... add code to handle request */
;;;292      return (TRUE);
000002  2001              MOVS     r0,#1
;;;293    }
000004  4770              BX       lr
;;;294    
                          ENDP


                          AREA ||i.CDC_SendEncapsulatedCommand||, CODE, READONLY, ALIGN=1

                  CDC_SendEncapsulatedCommand PROC
;;;154     *---------------------------------------------------------------------------*/
;;;155    uint32_t CDC_SendEncapsulatedCommand (void) {
000000  2001              MOVS     r0,#1
;;;156    
;;;157      return (TRUE);
;;;158    }
000002  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.CDC_SetCommFeature||, CODE, READONLY, ALIGN=1

                  CDC_SetCommFeature PROC
;;;179     *---------------------------------------------------------------------------*/
;;;180    uint32_t CDC_SetCommFeature (unsigned short wFeatureSelector) {
000000  4601              MOV      r1,r0
;;;181    
;;;182      /* ... add code to handle request */
;;;183      return (TRUE);
000002  2001              MOVS     r0,#1
;;;184    }
000004  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i.CDC_SetControlLineState||, CODE, READONLY, ALIGN=1

                  CDC_SetControlLineState PROC
;;;273     *---------------------------------------------------------------------------*/
;;;274    uint32_t CDC_SetControlLineState (unsigned short wControlSignalBitmap) {
000000  4601              MOV      r1,r0
;;;275    
;;;276      /* ... add code to handle request */
;;;277      return (TRUE);
000002  2001              MOVS     r0,#1
;;;278    }
000004  4770              BX       lr
;;;279    
                          ENDP


                          AREA ||i.CDC_SetLineCoding||, CODE, READONLY, ALIGN=2

                  CDC_SetLineCoding PROC
;;;218     *---------------------------------------------------------------------------*/
;;;219    uint32_t CDC_SetLineCoding (void) {
000000  b510              PUSH     {r4,lr}
;;;220    
;;;221      CDC_LineCoding.dwDTERate   =   (EP0Buf[0] <<  0)
000002  4814              LDR      r0,|L16.84|
000004  7800              LDRB     r0,[r0,#0]  ; EP0Buf
000006  4913              LDR      r1,|L16.84|
000008  7849              LDRB     r1,[r1,#1]  ; EP0Buf
00000a  ea402001          ORR      r0,r0,r1,LSL #8
00000e  4911              LDR      r1,|L16.84|
000010  7889              LDRB     r1,[r1,#2]  ; EP0Buf
000012  ea404001          ORR      r0,r0,r1,LSL #16
000016  490f              LDR      r1,|L16.84|
000018  78c9              LDRB     r1,[r1,#3]  ; EP0Buf
00001a  ea406001          ORR      r0,r0,r1,LSL #24
00001e  490e              LDR      r1,|L16.88|
000020  6008              STR      r0,[r1,#0]  ; CDC_LineCoding
;;;222                                   | (EP0Buf[1] <<  8)
;;;223                                   | (EP0Buf[2] << 16)
;;;224                                   | (EP0Buf[3] << 24);
;;;225      CDC_LineCoding.bCharFormat =  EP0Buf[4];
000022  480c              LDR      r0,|L16.84|
000024  7900              LDRB     r0,[r0,#4]  ; EP0Buf
000026  7108              STRB     r0,[r1,#4]
;;;226      CDC_LineCoding.bParityType =  EP0Buf[5];
000028  480a              LDR      r0,|L16.84|
00002a  7940              LDRB     r0,[r0,#5]  ; EP0Buf
00002c  7148              STRB     r0,[r1,#5]
;;;227      CDC_LineCoding.bDataBits   =  EP0Buf[6];
00002e  4809              LDR      r0,|L16.84|
000030  7980              LDRB     r0,[r0,#6]  ; EP0Buf
000032  7188              STRB     r0,[r1,#6]
;;;228    
;;;229    #if PORT_NUM
;;;230      ser_ClosePort(1);
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       ser_ClosePort
;;;231      ser_OpenPort (1);
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       ser_OpenPort
;;;232      ser_InitPort1 (CDC_LineCoding.dwDTERate,
000040  4c05              LDR      r4,|L16.88|
000042  7923              LDRB     r3,[r4,#4]  ; CDC_LineCoding
000044  7962              LDRB     r2,[r4,#5]  ; CDC_LineCoding
000046  79a1              LDRB     r1,[r4,#6]  ; CDC_LineCoding
000048  6820              LDR      r0,[r4,#0]  ; CDC_LineCoding
00004a  f7fffffe          BL       ser_InitPort1
;;;233                    CDC_LineCoding.bDataBits,
;;;234                    CDC_LineCoding.bParityType,
;;;235                    CDC_LineCoding.bCharFormat);
;;;236    #else
;;;237      ser_ClosePort(0);
;;;238      ser_OpenPort (0);
;;;239      ser_InitPort0 (CDC_LineCoding.dwDTERate,
;;;240                    CDC_LineCoding.bDataBits,
;;;241                    CDC_LineCoding.bParityType,
;;;242                    CDC_LineCoding.bCharFormat);
;;;243    #endif
;;;244      return (TRUE);
00004e  2001              MOVS     r0,#1
;;;245    }
000050  bd10              POP      {r4,pc}
;;;246    
                          ENDP

000052  0000              DCW      0x0000
                  |L16.84|
                          DCD      EP0Buf
                  |L16.88|
                          DCD      CDC_LineCoding

                          AREA ||i.CDC_WrOutBuf||, CODE, READONLY, ALIGN=2

                  CDC_WrOutBuf PROC
;;;87      *---------------------------------------------------------------------------*/
;;;88     int CDC_WrOutBuf (const char *buffer, int *length) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;89       int bytesToWrite, bytesWritten;
;;;90     
;;;91       // Write *length bytes
;;;92       bytesToWrite = *length;
000006  6819              LDR      r1,[r3,#0]
;;;93       bytesWritten = bytesToWrite;
000008  460c              MOV      r4,r1
;;;94     
;;;95     
;;;96       // ... add code to check for overwrite
;;;97     
;;;98       while (bytesToWrite) {
00000a  e00a              B        |L17.34|
                  |L17.12|
;;;99           CDC_BUF_WR(CDC_OutBuf, *buffer++);           // Copy Data to buffer
00000c  f8126b01          LDRB     r6,[r2],#1
000010  4d06              LDR      r5,|L17.44|
000012  6c28              LDR      r0,[r5,#0x40]  ; CDC_OutBuf
000014  1c45              ADDS     r5,r0,#1
000016  4f05              LDR      r7,|L17.44|
000018  643d              STR      r5,[r7,#0x40]  ; CDC_OutBuf
00001a  f000053f          AND      r5,r0,#0x3f
00001e  557e              STRB     r6,[r7,r5]
;;;100          bytesToWrite--;
000020  1e49              SUBS     r1,r1,#1
                  |L17.34|
000022  2900              CMP      r1,#0                 ;98
000024  d1f2              BNE      |L17.12|
;;;101      }
;;;102    
;;;103      return (bytesWritten);
000026  4620              MOV      r0,r4
;;;104    }
000028  bdf0              POP      {r4-r7,pc}
;;;105    
                          ENDP

00002a  0000              DCW      0x0000
                  |L17.44|
                          DCD      CDC_OutBuf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BulkBufIn
                          %        64
                  BulkBufOut
                          %        64
                  NotificationBuf
                          %        12
                  CDC_OutBuf
                          %        72

                          AREA ||.data||, DATA, ALIGN=1

                  CDC_LineCoding
                          DCDU     0x00002580
000004  00000800          DCB      0x00,0x00,0x08,0x00
                  CDC_SerialState
000008  0000              DCW      0x0000
                  CDC_DepInEmpty
00000a  0001              DCW      0x0001
