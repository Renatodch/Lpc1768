; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\capture.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\capture.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Lib\Drivers\include -I.\Inc -I.\Lib\Usb_Drivers\Inc -I.\Lib\CLib__1_0_0_4\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\NXP\LPC17xx -D__UVISION_VERSION=525 --omf_browse=.\flash\capture.crf Lib\CLib__1_0_0_4\src\Capture.c]
                          THUMB

                          AREA ||i.Capture_Clock||, CODE, READONLY, ALIGN=1

                  Capture_Clock PROC
;;;48     *******************************************************************************/
;;;49     void  			Capture_Clock(Capture *p)
000000  7b01              LDRB     r1,[r0,#0xc]
;;;50     {
;;;51     		if(p->nivel)
000002  b119              CBZ      r1,|L1.12|
;;;52     			p->highTime++;
000004  6881              LDR      r1,[r0,#8]
000006  1c49              ADDS     r1,r1,#1
000008  6081              STR      r1,[r0,#8]
00000a  e002              B        |L1.18|
                  |L1.12|
;;;53     		else
;;;54     			p->lowTime++;
00000c  6841              LDR      r1,[r0,#4]
00000e  1c49              ADDS     r1,r1,#1
000010  6041              STR      r1,[r0,#4]
                  |L1.18|
;;;55     }
000012  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.Capture_GetTotalTime||, CODE, READONLY, ALIGN=1

                  Capture_GetTotalTime PROC
;;;9      *******************************************************************************/
;;;10     uint32_t  	Capture_GetTotalTime(Capture *p)
000000  4601              MOV      r1,r0
;;;11     {
;;;12     		return (p->highTime + p->lowTime) / 1000;
000002  e9d12001          LDRD     r2,r0,[r1,#4]
000006  4410              ADD      r0,r0,r2
000008  f44f727a          MOV      r2,#0x3e8
00000c  fbb0f0f2          UDIV     r0,r0,r2
;;;13     }
000010  4770              BX       lr
;;;14     
                          ENDP


                          AREA ||i.Capture_Handlers||, CODE, READONLY, ALIGN=1

                  Capture_Handlers PROC
;;;21     *******************************************************************************/
;;;22     void  			Capture_Handlers(Capture *p, uint8_t  nivel)
000000  b570              PUSH     {r4-r6,lr}
;;;23     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;24     
;;;25     			if(p->nivel == 0 && nivel == 1 && p->initNivel == 0)
000006  7b20              LDRB     r0,[r4,#0xc]
000008  b940              CBNZ     r0,|L3.28|
00000a  2d01              CMP      r5,#1
00000c  d106              BNE      |L3.28|
00000e  7e20              LDRB     r0,[r4,#0x18]
000010  b920              CBNZ     r0,|L3.28|
;;;26     			//if(p->nivel == 0 && nivel == 1)
;;;27     			{
;;;28     					p->risingEdgeHandler(p);
000012  4620              MOV      r0,r4
000014  6921              LDR      r1,[r4,#0x10]
000016  4788              BLX      r1
;;;29     					p->highTime = 0;
000018  2000              MOVS     r0,#0
00001a  60a0              STR      r0,[r4,#8]
                  |L3.28|
;;;30     			}
;;;31     		
;;;32     			if(p->nivel == 1 && nivel == 0 && p->initNivel == 1)
00001c  7b20              LDRB     r0,[r4,#0xc]
00001e  2801              CMP      r0,#1
000020  d108              BNE      |L3.52|
000022  b93d              CBNZ     r5,|L3.52|
000024  7e20              LDRB     r0,[r4,#0x18]
000026  2801              CMP      r0,#1
000028  d104              BNE      |L3.52|
;;;33     			//if(p->nivel == 1 && nivel == 0)
;;;34     			{
;;;35     					p->fallingEdgeHandler(p);
00002a  4620              MOV      r0,r4
00002c  6961              LDR      r1,[r4,#0x14]
00002e  4788              BLX      r1
;;;36     					p->lowTime = 0;
000030  2000              MOVS     r0,#0
000032  6060              STR      r0,[r4,#4]
                  |L3.52|
;;;37     			}
;;;38     	
;;;39     		p->nivel = nivel;
000034  7325              STRB     r5,[r4,#0xc]
;;;40     }
000036  bd70              POP      {r4-r6,pc}
;;;41     
                          ENDP


                          AREA ||i.Capture_Init||, CODE, READONLY, ALIGN=1

                  Capture_Init PROC
;;;82     *******************************************************************************/
;;;83     void  			Capture_Init(Capture *p, uint8_t  initNivel, RisingEdgeHandler risingEdgeHandler, FallingEdgeHandler fallingEdgeHandler)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85     		p->highTime = 0; 
000002  2400              MOVS     r4,#0
000004  6084              STR      r4,[r0,#8]
;;;86     		p->lowTime = 0;
000006  6044              STR      r4,[r0,#4]
;;;87     		p->nivel = initNivel;
000008  7301              STRB     r1,[r0,#0xc]
;;;88     		p->risingEdgeHandler = risingEdgeHandler;
00000a  6102              STR      r2,[r0,#0x10]
;;;89     		p->fallingEdgeHandler = fallingEdgeHandler;
00000c  6143              STR      r3,[r0,#0x14]
;;;90     		p->initNivel = initNivel;
00000e  7601              STRB     r1,[r0,#0x18]
;;;91     		p->firstRead = 1;
000010  2401              MOVS     r4,#1
000012  7644              STRB     r4,[r0,#0x19]
;;;92     		p->pulses = 0;
000014  2400              MOVS     r4,#0
000016  61c4              STR      r4,[r0,#0x1c]
;;;93     		p->pulseFlag=0;
000018  f8804020          STRB     r4,[r0,#0x20]
;;;94     }
00001c  bd10              POP      {r4,pc}
;;;95     
                          ENDP


                          AREA ||i.Capture_ToString||, CODE, READONLY, ALIGN=2

                  Capture_ToString PROC
;;;63     *******************************************************************************/
;;;64     void  			Capture_ToString(Capture *p, char* s)
000000  b570              PUSH     {r4-r6,lr}
;;;65     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;66     			Parameters_Add_Uint(s, "firstRead", p->firstRead);	
000006  7e62              LDRB     r2,[r4,#0x19]
000008  a113              ADR      r1,|L5.88|
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       Parameters_Add_Uint
;;;67     			Parameters_Add_Uint(s, "initNivel", p->initNivel);
000010  7e22              LDRB     r2,[r4,#0x18]
000012  a114              ADR      r1,|L5.100|
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       Parameters_Add_Uint
;;;68     			Parameters_Add_Uint(s, "  nivel", p->nivel);
00001a  7b22              LDRB     r2,[r4,#0xc]
00001c  a114              ADR      r1,|L5.112|
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       Parameters_Add_Uint
;;;69     			Parameters_Add_Uint(s, "  highTime", p->highTime / 1000);
000024  f44f717a          MOV      r1,#0x3e8
000028  68a0              LDR      r0,[r4,#8]
00002a  fbb0f6f1          UDIV     r6,r0,r1
00002e  4632              MOV      r2,r6
000030  a111              ADR      r1,|L5.120|
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       Parameters_Add_Uint
;;;70     			Parameters_Add_Uint(s, "  lowTime", p->lowTime / 1000);	
000038  f44f717a          MOV      r1,#0x3e8
00003c  6860              LDR      r0,[r4,#4]
00003e  fbb0f6f1          UDIV     r6,r0,r1
000042  4632              MOV      r2,r6
000044  a10f              ADR      r1,|L5.132|
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       Parameters_Add_Uint
;;;71     			Parameters_Add_UintToLine(s, "  pulses", p->pulses);	
00004c  a110              ADR      r1,|L5.144|
00004e  4628              MOV      r0,r5
000050  69e2              LDR      r2,[r4,#0x1c]
000052  f7fffffe          BL       Parameters_Add_UintToLine
;;;72     			//Parameters_Add_Uint(s, "  fallingEdgeHandler", (int) p->fallingEdgeHandler);
;;;73     			//Parameters_Add_UintToLine(s, "  risingEdgeHandler", (int) p->risingEdgeHandler);
;;;74     }
000056  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP

                  |L5.88|
000058  66697273          DCB      "firstRead",0
00005c  74526561
000060  6400    
000062  00                DCB      0
000063  00                DCB      0
                  |L5.100|
000064  696e6974          DCB      "initNivel",0
000068  4e697665
00006c  6c00    
00006e  00                DCB      0
00006f  00                DCB      0
                  |L5.112|
000070  20206e69          DCB      "  nivel",0
000074  76656c00
                  |L5.120|
000078  20206869          DCB      "  highTime",0
00007c  67685469
000080  6d6500  
000083  00                DCB      0
                  |L5.132|
000084  20206c6f          DCB      "  lowTime",0
000088  7754696d
00008c  6500    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L5.144|
000090  20207075          DCB      "  pulses",0
000094  6c736573
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0

;*** Start embedded assembler ***

#line 1 "Lib\\CLib__1_0_0_4\\src\\Capture.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_Capture_c_0f5fae95____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_Capture_c_0f5fae95____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_Capture_c_0f5fae95____REVSH|
#line 144
|__asm___9_Capture_c_0f5fae95____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
